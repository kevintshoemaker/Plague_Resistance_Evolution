if(KEVIN_LAPTOP) GIT_DIR <- "C:\\Users\\Kevin\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_OFFICEPC) GIT_DIR <- "E:\\GIT\\Plague_Resistance_Evolution"
#####################
# LOAD FUNCTIONS
#####################
setwd(GIT_DIR)
source("PlagueResistanceEvolution_FUNCTIONS.R")
############
## SET UP WORKSPACE AND LOAD PACKAGES
############
SetUpWorkspace()
num_cores <- detectCores() - 1   # for setting up cluster... leave one core free for windows background processes?
############
## SAMPLE FROM LATIN HYPERCUBE
############
N_LHS_SAMPLES <- 10
masterDF <- MakeLHSSamples(nicheBreadthDir=dir,NicheBreadth)
i=1
DoSimulateResistance(rep=i)    # simulate for these params...
t
MakePlots <- function(rep,t){
################
# MAKE PLOTS
width = 500
height= 500
thisFIGS_DIR <- sprintf("%s\\rep%04d",FIGS_DIR2,rep)
if(is.na(file.info(thisFIGS_DIR)[1,"isdir"])) dir.create(thisFIGS_DIR)
# abundance figure
setwd(thisFIGS_DIR)
file = sprintf("AbundanceFig_year%03d.tif",t)
tiff(file, width=width,height=height)
plot(patchRaster,col=gray(0.7),legend=F)
#col = colorRampPalette(c("red","red"))(1)
col = rgb(0,seq(0,1,length=10),0)
plot(reclassify(DensRaster,rcl=c(-Inf,5,NA)),add=T,legend=T)
#plot(reclassify(PlagueRaster,rcl=c(-Inf,0.01,NA)),col=rgb(1,0,0),add=T,alpha=0.5,legend=F)
#plot(reclassify(NextPlagueSurvRaster,rcl=c(-Inf,0.001,NA)),col=heat.colors(10),add=T,legend=T)
dev.off()
# evolution figure 1
setwd(thisFIGS_DIR)
file = sprintf("AllGenesFreqFig_year%03d.tif",t)
tiff(file, width=width*1.5,height=height)
par(mfrow=c(1,2))
plot(patchRaster,col=gray(0.7),legend=F,main="Gene 1")
#col = colorRampPalette(c("red","red"))(1)
col = rgb(0,seq(0,maxValue(FreqList[["gene1"]]),length=10),0)
plot(reclassify(FreqList[["gene1"]],rcl=c(-Inf,0.001,NA)),add=T,col=col,legend=T)
plot(patchRaster,col=gray(0.7),legend=F,main="Gene 2")
#col = colorRampPalette(c("red","red"))(1)
col = rgb(0,seq(0,maxValue(FreqList[["gene2"]]),length=10),0)
plot(reclassify(FreqList[["gene2"]],rcl=c(-Inf,0.001,NA)),add=T,col=col,legend=T)
#plot(reclassify(PlagueRaster,rcl=c(-Inf,0.01,NA)),col=rgb(1,0,0),add=T,alpha=0.5,legend=F)
#plot(reclassify(NextPlagueSurvRaster,rcl=c(-Inf,0.001,NA)),col=heat.colors(10),add=T,legend=T)
dev.off()
# plague figure
setwd(thisFIGS_DIR)
file = sprintf("PlagueFig_year%03d.tif",t)
tiff(file, width=width,height=height)
plot(patchRaster,col=gray(0.7),legend=F)
#col = colorRampPalette(c("red","red"))(1)
col = rgb(seq(0,maxValue(PlagueRaster),length=10),0,0)
plot(reclassify(PlagueRaster,rcl=c(-Inf,0.01,NA)),add=T,col=col,legend=T)
#plot(reclassify(PlagueRaster,rcl=c(-Inf,0.01,NA)),col=rgb(1,0,0),add=T,alpha=0.5,legend=F)
#plot(reclassify(NextPlagueSurvRaster,rcl=c(-Inf,0.001,NA)),col=heat.colors(10),add=T,legend=T)
dev.off()
#gray.colors(10)
}
DoSimulateResistance <- function(rep=1){
#plot(PlagueRaster)
############
## USER-DEFINED VARIABLES
############
dmat <- list()
dmat[[1]] <- matrix(c(1,0,0, 1,0,0), nrow=2,ncol=3,byrow = T)
dmat[[2]] <- matrix(c(1,1,0, 1,0,0), nrow=2,ncol=3,byrow = T)
dmat[[3]] <- matrix(c(1,0,0, 1,1,0), nrow=2,ncol=3,byrow = T)
dmat[[4]] <- matrix(c(1,1,0, 1,1,0), nrow=2,ncol=3,byrow = T)
UserParams <- DefineUserParams(PER_SUITABLE=masterDF$PER_SUITABLE[rep],SNUGGLE=masterDF$SNUGGLE[rep],NFOCI=1,MAXDISPERSAL=500,BASELINE_DISPERSAL=0.05,
MAXDISPERSAL_PLAGUE = 1000,PLAGUE_DISPERSAL=masterDF$PLAGUE_DISPERSAL[rep], MAXDENS = masterDF$MAXDENS[rep],
MINDENS = 15, BASELINE_MEANSURV = 0.6, BASELINE_PLAGUESURV=masterDF$BASELINE_PLAGUESURV[rep],
BASELINE_PLAGUESURV_RESIST=0.5,BASELINE_MEANFEC=masterDF$BASELINE_MEANFEC[rep],
FITNESS_COST=rep(masterDF$FITNESS_COST[rep],2),INITFREQ=rep(masterDF$INITFREQ[rep],2),DOMINANCE=dmat[[masterDF$DOMINANCE[rep]]])
assign(x="UserParams",value=UserParams, envir = .GlobalEnv)
DoInitialization()
####################
# START LOOP THROUGH YEARS
####################
# names of important raster maps to save to file etc...
#rasterNames  <- c("PopArray","NextPlagueSurvRaster","NextNormalSurvRaster","PlagueResistancePotentialRaster")   # Deprecate?
# t=which(plagueyear)[1]
t=0
t=t+1
for(t in 1:(NYEARS)){
deviate <- rnorm(1)   #determine if this is a good year or a bad year (for now, survival and fecundity are perfectly correlated)
assign(x="deviate",value=deviate, envir = .GlobalEnv)
cv=UserParams$Popbio$CV_SURVIVAL   # set up for using the getYearVariate function
assign(x="cv",value=cv, envir = .GlobalEnv)
if(t==1){
FreqList=InitFreqList; DensRaster=InitDensRaster; newFociRaster <- reclassify(DensRaster,rcl=c(-Inf,Inf,0))     # initial conditions
assign(x="FreqList",value=FreqList, envir = .GlobalEnv)
assign(x="DensRaster",value=DensRaster, envir = .GlobalEnv)
assign(x="newFociRaster",value=newFociRaster, envir = .GlobalEnv)
}
##################
# DENSITY INDEPENDENT SURVIVAL (including plague survival)
##################
#PopArray <- GetStructuredPop(DensRaster)
DensRaster <- doSurvival(DensRaster,PlagueRaster,FreqList)
assign(x="DensRaster",value=DensRaster, envir = .GlobalEnv)
# plot(DensRaster)
# plot(FreqList[["gene1"]])
################
# REPRODUCTION
################
DensRaster <- doReproduce(DensRaster,PlagueRaster)    # TODO: make specific to each resistance type...?
assign(x="DensRaster",value=DensRaster, envir = .GlobalEnv)
# plot(DensRaster)
# plot(FreqList[["gene1"]])
###############
# DISPERSAL: Move individuals around the landscape (this takes a while!)
###############
DensRaster <- doDispersal(PlagueRaster)
assign(x="DensRaster",value=DensRaster, envir = .GlobalEnv)
# plot(DensRaster)    # good in t=1, not so much in t=2
# plot(FreqList[["gene2"]])
###############
# ALLEE EFFECT: REMOVE POPULATIONS BELOW A MINIMUM ABUNDANCE THRESHOLD
###############
#PopArray <- doAllee()
#if(MINABUND>0) PopArray <- doAllee()   # don't need this! all low-dens individuals move out anyway...
# $
###############
# CLEAR excess individuals from cells (DD)
DensRaster <- doDDSurvival(DensRaster)
assign(x="DensRaster",value=DensRaster, envir = .GlobalEnv)
# plot(DensRaster)
# plot(FreqList[["gene1"]])
##################
# PLAGUE PRESSURE
##################
PlagueRaster <- doPlague(PlagueRaster=PlagueRaster,DensRaster=DensRaster)
assign(x="DensRaster",value=DensRaster, envir = .GlobalEnv)
# plot(PlagueRaster)
# # plot(PopArray)
#
#   plot(PopArray)    # okay
#   plot(reclassify(NextNormalSurvRaster,rcl=c(NA,NA,0)))   # okay in t=1,2
#   plot(NextNormalSurvRaster)
#   plot(reclassify(NextPlagueSurvRaster,rcl=c(NA,NA,0)))    # okay t=1,2
#
#   plot(newFociRaster)   # okay t=1
#
#   plot(PlagueRaster)
###############
# MAKE PLOTS
###############
MakePlots(rep,t)
}   # end loop through time
###############
# MAKE MOVIES
###############
MakeMovies(rep)
}
i
DoSimulateResistance(rep=i)    # simulate for these params...
rm(list=ls())
############
## SIMULATION CONTROLS
############
NYEARS <- 20
############
## SET GLOBAL VARS
############
KEVIN_LAPTOP <- FALSE #  TRUE #
KEVIN_OFFICEPC <- TRUE # FALSE #
if(KEVIN_LAPTOP) GIT_DIR <- "C:\\Users\\Kevin\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_OFFICEPC) GIT_DIR <- "E:\\GIT\\Plague_Resistance_Evolution"
#####################
# LOAD FUNCTIONS
#####################
setwd(GIT_DIR)
source("PlagueResistanceEvolution_FUNCTIONS.R")
############
## SET UP WORKSPACE AND LOAD PACKAGES
############
SetUpWorkspace()
num_cores <- detectCores() - 1   # for setting up cluster... leave one core free for windows background processes?
############
## SAMPLE FROM LATIN HYPERCUBE
############
N_LHS_SAMPLES <- 10
masterDF <- MakeLHSSamples(nicheBreadthDir=dir,NicheBreadth)
i=1
DoSimulateResistance(rep=i)    # simulate for these params...
rep
rep=1
suppressMessages(MakeMovie(rep))
MakeMovie <- function(rep){
thisMOVIE_DIR <- sprintf("%s\\rep%04d",MOVIE_DIR2,rep)
if(is.na(file.info(thisMOVIE_DIR)[1,"isdir"])) dir.create(thisMOVIE_DIR)
thisFIGS_DIR <- sprintf("%s\\rep%04d",FIGS_DIR2,rep)
setwd(thisFIGS_DIR)
## NOTE: need command line like this: ffmpeg -f image2 -framerate 2 -i AbundanceFig_year%03d.tif -s 500x500 test.avi -y
# MAKING THE REAL MOVIE HERE! USE IMAGE MAGICK AND FFMPEG SOFTWARE  (https://blogazonia.wordpress.com/2016/01/19/making-a-movie-with-r/)
# create the movie
cmd_abundmov <- paste0("ffmpeg -f image2 -framerate 2 -i AbundanceFig_year%03d.tif -s 500x500 ",
sprintf("%s\\AbundanceMovie.avi",MOVIE_DIR)," -y")
cmd_evolutionmov <- paste0("ffmpeg -f image2 -framerate 2 -i AllGenesFreqFig_year%03d.tif -s 800x500 ",
sprintf("%s\\EvolutionMovie.avi",MOVIE_DIR)," -y")
cmd_plaguemov <- paste0("ffmpeg -f image2 -framerate 2 -i PlagueFig_year%03d.tif -s 500x500 ",
sprintf("%s\\PlagueMovie.avi",MOVIE_DIR)," -y")
invisible(system(cmd_abundmov))
invisible(system(cmd_evolutionmov))
invisible(system(cmd_plaguemov))
}
MakeMovie(rep)
MakeMovie <- function(rep){
thisMOVIE_DIR <- sprintf("%s\\rep%04d",MOVIE_DIR2,rep)
if(is.na(file.info(thisMOVIE_DIR)[1,"isdir"])) dir.create(thisMOVIE_DIR)
thisFIGS_DIR <- sprintf("%s\\rep%04d",FIGS_DIR2,rep)
setwd(thisFIGS_DIR)
## NOTE: need command line like this: ffmpeg -f image2 -framerate 2 -i AbundanceFig_year%03d.tif -s 500x500 test.avi -y
# MAKING THE REAL MOVIE HERE! USE IMAGE MAGICK AND FFMPEG SOFTWARE  (https://blogazonia.wordpress.com/2016/01/19/making-a-movie-with-r/)
# create the movie
cmd_abundmov <- paste0("ffmpeg -f image2 -framerate 2 -i AbundanceFig_year%03d.tif -s 500x500 ",
sprintf("%s\\AbundanceMovie.avi",MOVIE_DIR)," -y")
cmd_evolutionmov <- paste0("ffmpeg -f image2 -framerate 2 -i AllGenesFreqFig_year%03d.tif -s 800x500 ",
sprintf("%s\\EvolutionMovie.avi",MOVIE_DIR)," -y")
cmd_plaguemov <- paste0("ffmpeg -f image2 -framerate 2 -i PlagueFig_year%03d.tif -s 500x500 ",
sprintf("%s\\PlagueMovie.avi",MOVIE_DIR)," -y")
sink(tempfile())
system(cmd_abundmov)
system(cmd_evolutionmov)
system(cmd_plaguemov)
}
MakeMovie(rep)
sink()
sink()
MakeMovie <- function(rep){
thisMOVIE_DIR <- sprintf("%s\\rep%04d",MOVIE_DIR2,rep)
if(is.na(file.info(thisMOVIE_DIR)[1,"isdir"])) dir.create(thisMOVIE_DIR)
thisFIGS_DIR <- sprintf("%s\\rep%04d",FIGS_DIR2,rep)
setwd(thisFIGS_DIR)
## NOTE: need command line like this: ffmpeg -f image2 -framerate 2 -i AbundanceFig_year%03d.tif -s 500x500 test.avi -y
# MAKING THE REAL MOVIE HERE! USE IMAGE MAGICK AND FFMPEG SOFTWARE  (https://blogazonia.wordpress.com/2016/01/19/making-a-movie-with-r/)
# create the movie
cmd_abundmov <- paste0("ffmpeg -f image2 -framerate 2 -i AbundanceFig_year%03d.tif -s 500x500 ",
sprintf("%s\\AbundanceMovie.avi",MOVIE_DIR)," -y")
cmd_evolutionmov <- paste0("ffmpeg -f image2 -framerate 2 -i AllGenesFreqFig_year%03d.tif -s 800x500 ",
sprintf("%s\\EvolutionMovie.avi",MOVIE_DIR)," -y")
cmd_plaguemov <- paste0("ffmpeg -f image2 -framerate 2 -i PlagueFig_year%03d.tif -s 500x500 ",
sprintf("%s\\PlagueMovie.avi",MOVIE_DIR)," -y")
sink(tempfile())
system(cmd_abundmov)
system(cmd_evolutionmov)
system(cmd_plaguemov)
sink()
}
MakeMovie(rep)
thisMOVIE_DIR <- sprintf("%s\\rep%04d",MOVIE_DIR2,rep)
if(is.na(file.info(thisMOVIE_DIR)[1,"isdir"])) dir.create(thisMOVIE_DIR)
thisFIGS_DIR <- sprintf("%s\\rep%04d",FIGS_DIR2,rep)
setwd(thisFIGS_DIR)
cmd_abundmov <- paste0("ffmpeg -f image2 -framerate 2 -i AbundanceFig_year%03d.tif -s 500x500 ",
sprintf("%s\\AbundanceMovie.avi",MOVIE_DIR)," -y")
cmd_evolutionmov <- paste0("ffmpeg -f image2 -framerate 2 -i AllGenesFreqFig_year%03d.tif -s 800x500 ",
sprintf("%s\\EvolutionMovie.avi",MOVIE_DIR)," -y")
cmd_plaguemov <- paste0("ffmpeg -f image2 -framerate 2 -i PlagueFig_year%03d.tif -s 500x500 ",
sprintf("%s\\PlagueMovie.avi",MOVIE_DIR)," -y")
sink()
sink(tempfile())
system(cmd_abundmov)
capture.output(cmd_abundmov)
sink()
sink()
capture.output(system(cmd_abundmov))
system(cmd_abundmov)
sink(tempfile())
capture.output(system(cmd_abundmov))
sink()
capture.output(MakeMovie(rep) )
MakeMovie <- function(rep){
thisMOVIE_DIR <- sprintf("%s\\rep%04d",MOVIE_DIR2,rep)
if(is.na(file.info(thisMOVIE_DIR)[1,"isdir"])) dir.create(thisMOVIE_DIR)
thisFIGS_DIR <- sprintf("%s\\rep%04d",FIGS_DIR2,rep)
setwd(thisFIGS_DIR)
## NOTE: need command line like this: ffmpeg -f image2 -framerate 2 -i AbundanceFig_year%03d.tif -s 500x500 test.avi -y
# MAKING THE REAL MOVIE HERE! USE IMAGE MAGICK AND FFMPEG SOFTWARE  (https://blogazonia.wordpress.com/2016/01/19/making-a-movie-with-r/)
# create the movie
cmd_abundmov <- paste0("ffmpeg -f image2 -framerate 2 -i AbundanceFig_year%03d.tif -s 500x500 ",
sprintf("%s\\AbundanceMovie.avi",MOVIE_DIR)," -y")
cmd_evolutionmov <- paste0("ffmpeg -f image2 -framerate 2 -i AllGenesFreqFig_year%03d.tif -s 800x500 ",
sprintf("%s\\EvolutionMovie.avi",MOVIE_DIR)," -y")
cmd_plaguemov <- paste0("ffmpeg -f image2 -framerate 2 -i PlagueFig_year%03d.tif -s 500x500 ",
sprintf("%s\\PlagueMovie.avi",MOVIE_DIR)," -y")
#sink(tempfile())
system(cmd_abundmov,ignore.stdout = T)
system(cmd_evolutionmov,ignore.stdout = T)
system(cmd_plaguemov,ignore.stdout = T)
#sink()
}
MakeMovie(rep)
system(cmd_abundmov,ignore.stdout = T)
system(cmd_abundmov,ignore.stdout = T,ignore.stderr = T)
MakeMovie <- function(rep){
thisMOVIE_DIR <- sprintf("%s\\rep%04d",MOVIE_DIR2,rep)
if(is.na(file.info(thisMOVIE_DIR)[1,"isdir"])) dir.create(thisMOVIE_DIR)
thisFIGS_DIR <- sprintf("%s\\rep%04d",FIGS_DIR2,rep)
setwd(thisFIGS_DIR)
## NOTE: need command line like this: ffmpeg -f image2 -framerate 2 -i AbundanceFig_year%03d.tif -s 500x500 test.avi -y
# MAKING THE REAL MOVIE HERE! USE IMAGE MAGICK AND FFMPEG SOFTWARE  (https://blogazonia.wordpress.com/2016/01/19/making-a-movie-with-r/)
# create the movie
cmd_abundmov <- paste0("ffmpeg -f image2 -framerate 2 -i AbundanceFig_year%03d.tif -s 500x500 ",
sprintf("%s\\AbundanceMovie.avi",MOVIE_DIR)," -y")
cmd_evolutionmov <- paste0("ffmpeg -f image2 -framerate 2 -i AllGenesFreqFig_year%03d.tif -s 800x500 ",
sprintf("%s\\EvolutionMovie.avi",MOVIE_DIR)," -y")
cmd_plaguemov <- paste0("ffmpeg -f image2 -framerate 2 -i PlagueFig_year%03d.tif -s 500x500 ",
sprintf("%s\\PlagueMovie.avi",MOVIE_DIR)," -y")
#sink(tempfile())
system(cmd_abundmov,ignore.stdout = T,ignore.stderr = T)
system(cmd_evolutionmov,ignore.stdout = T,ignore.stderr = T)
system(cmd_plaguemov,ignore.stdout = T,ignore.stderr = T)
#sink()
}
MakeMovie(rep)
rm(list=ls())
############
## SIMULATION CONTROLS
############
NYEARS <- 20
############
## SET GLOBAL VARS
############
KEVIN_LAPTOP <- FALSE #  TRUE #
KEVIN_OFFICEPC <- TRUE # FALSE #
if(KEVIN_LAPTOP) GIT_DIR <- "C:\\Users\\Kevin\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_OFFICEPC) GIT_DIR <- "E:\\GIT\\Plague_Resistance_Evolution"
#####################
# LOAD FUNCTIONS
#####################
setwd(GIT_DIR)
source("PlagueResistanceEvolution_FUNCTIONS.R")
############
## SET UP WORKSPACE AND LOAD PACKAGES
############
SetUpWorkspace()
num_cores <- detectCores() - 1   # for setting up cluster... leave one core free for windows background processes?
############
## SAMPLE FROM LATIN HYPERCUBE
############
N_LHS_SAMPLES <- 10
masterDF <- MakeLHSSamples(nicheBreadthDir=dir,NicheBreadth)
DoSimulateResistance(rep=i)    # simulate for these params...
i=1
DoSimulateResistance(rep=i)    # simulate for these params...
i=2
DoSimulateResistance(rep=i)    # simulate for these params...
i=2
DoSimulateResistance(rep=i)    # simulate for these params...
rep=2
thisMOVIE_DIR <- sprintf("%s\\rep%04d",MOVIE_DIR2,rep)
if(is.na(file.info(thisMOVIE_DIR)[1,"isdir"])) dir.create(thisMOVIE_DIR)
thisFIGS_DIR <- sprintf("%s\\rep%04d",FIGS_DIR2,rep)
setwd(thisFIGS_DIR)
cmd_abundmov <- paste0("ffmpeg -f image2 -framerate 2 -i AbundanceFig_year%03d.tif -s 500x500 ",
sprintf("%s\\AbundanceMovie.avi",thisMOVIE_DIR)," -y")
thisFIGS_DIR
setwd(thisFIGS_DIR)
cmd_abundmov <- paste0("ffmpeg -f image2 -framerate 2 -i AbundanceFig_year%03d.tif -s 500x500 ",
sprintf("%s\\AbundanceMovie.avi",thisMOVIE_DIR)," -y")
cmd_evolutionmov <- paste0("ffmpeg -f image2 -framerate 2 -i AllGenesFreqFig_year%03d.tif -s 800x500 ",
sprintf("%s\\EvolutionMovie.avi",thisMOVIE_DIR)," -y")
cmd_plaguemov <- paste0("ffmpeg -f image2 -framerate 2 -i PlagueFig_year%03d.tif -s 500x500 ",
sprintf("%s\\PlagueMovie.avi",thisMOVIE_DIR)," -y")
system(cmd_abundmov,ignore.stdout = T,ignore.stderr = T)
system(cmd_evolutionmov,ignore.stdout = T,ignore.stderr = T)
system(cmd_plaguemov,ignore.stdout = T,ignore.stderr = T)
MakeMovie(rep)
MakeMovie
rep
MakeMovie(rep)
MakeMovie
thisMOVIE_DIR <- sprintf("%s\\rep%04d",MOVIE_DIR2,rep)
thisMOVIE_DIR
MakeMovie <- function(rep){
thisMOVIE_DIR <- sprintf("%s\\rep%04d",MOVIE_DIR2,rep)
if(is.na(file.info(thisMOVIE_DIR)[1,"isdir"])) dir.create(thisMOVIE_DIR)
thisFIGS_DIR <- sprintf("%s\\rep%04d",FIGS_DIR2,rep)
setwd(thisFIGS_DIR)
## NOTE: need command line like this: ffmpeg -f image2 -framerate 2 -i AbundanceFig_year%03d.tif -s 500x500 test.avi -y
# MAKING THE REAL MOVIE HERE! USE IMAGE MAGICK AND FFMPEG SOFTWARE  (https://blogazonia.wordpress.com/2016/01/19/making-a-movie-with-r/)
# create the movie
cmd_abundmov <- paste0("ffmpeg -f image2 -framerate 2 -i AbundanceFig_year%03d.tif -s 500x500 ",
sprintf("%s\\AbundanceMovie.avi",thisMOVIE_DIR)," -y")
cmd_evolutionmov <- paste0("ffmpeg -f image2 -framerate 2 -i AllGenesFreqFig_year%03d.tif -s 800x500 ",
sprintf("%s\\EvolutionMovie.avi",thisMOVIE_DIR)," -y")
cmd_plaguemov <- paste0("ffmpeg -f image2 -framerate 2 -i PlagueFig_year%03d.tif -s 500x500 ",
sprintf("%s\\PlagueMovie.avi",thisMOVIE_DIR)," -y")
#sink(tempfile())
system(cmd_abundmov,ignore.stdout = T,ignore.stderr = T)
system(cmd_evolutionmov,ignore.stdout = T,ignore.stderr = T)
system(cmd_plaguemov,ignore.stdout = T,ignore.stderr = T)
#sink()
}
MakeMovie(rep)
dmat <- list()
dmat[[1]] <- matrix(c(1,0,0, 1,0,0), nrow=2,ncol=3,byrow = T)
dmat[[2]] <- matrix(c(1,1,0, 1,0,0), nrow=2,ncol=3,byrow = T)
dmat[[3]] <- matrix(c(1,0,0, 1,1,0), nrow=2,ncol=3,byrow = T)
dmat[[4]] <- matrix(c(1,1,0, 1,1,0), nrow=2,ncol=3,byrow = T)
UserParams <- DefineUserParams(PER_SUITABLE=masterDF$PER_SUITABLE[rep],SNUGGLE=masterDF$SNUGGLE[rep],NFOCI=1,MAXDISPERSAL=500,BASELINE_DISPERSAL=0.05,
MAXDISPERSAL_PLAGUE = 1000,PLAGUE_DISPERSAL=masterDF$PLAGUE_DISPERSAL[rep], MAXDENS = masterDF$MAXDENS[rep],
MINDENS = 15, BASELINE_MEANSURV = 0.6, BASELINE_PLAGUESURV=masterDF$BASELINE_PLAGUESURV[rep],
BASELINE_PLAGUESURV_RESIST=0.5,BASELINE_MEANFEC=masterDF$BASELINE_MEANFEC[rep],
FITNESS_COST=rep(masterDF$FITNESS_COST[rep],2),INITFREQ=rep(masterDF$INITFREQ[rep],2),DOMINANCE=dmat[[masterDF$DOMINANCE[rep]]])
assign(x="UserParams",value=UserParams, envir = .GlobalEnv)
DoInitialization()
t=0
t=t+1
deviate <- rnorm(1)   #determine if this is a good year or a bad year (for now, survival and fecundity are perfectly correlated)
assign(x="deviate",value=deviate, envir = .GlobalEnv)
cv=UserParams$Popbio$CV_SURVIVAL   # set up for using the getYearVariate function
assign(x="cv",value=cv, envir = .GlobalEnv)
if(t==1){
FreqList=InitFreqList; DensRaster=InitDensRaster; newFociRaster <- reclassify(DensRaster,rcl=c(-Inf,Inf,0))     # initial conditions
assign(x="FreqList",value=FreqList, envir = .GlobalEnv)
assign(x="DensRaster",value=DensRaster, envir = .GlobalEnv)
assign(x="newFociRaster",value=newFociRaster, envir = .GlobalEnv)
}
DensRaster <- doSurvival(DensRaster,PlagueRaster,FreqList)
assign(x="DensRaster",value=DensRaster, envir = .GlobalEnv)
DensRaster <- doReproduce(DensRaster,PlagueRaster)    # TODO: make specific to each resistance type...?
assign(x="DensRaster",value=DensRaster, envir = .GlobalEnv)
DensRaster <- doDispersal(PlagueRaster)
plot(DensRaster)
UserParams
masterDF
plot(patchRaster)
MakeLHSSamples <- function(nicheBreadthDir,NicheBreadth){
LHSParms <- list()    # initialize the container for parameter bounds
####  PER_SUITABLE
LHSParms <- specifyLHSParam(LHSParms,"PER_SUITABLE",type="CONT",lb=0.1,ub=1)
#### SNUGGLE
LHSParms <- specifyLHSParam(LHSParms,"SNUGGLE",type="CONT",lb=0.01,ub=0.99)
### PLAGUE_DISPERSAL    0 to 100 individuals...
LHSParms <- specifyLHSParam(LHSParms,"PLAGUE_DISPERSAL",type="CONT",lb=0.05,ub=0.99)
### MAXDENS
LHSParms <- specifyLHSParam(LHSParms,"MAXDENS",type="INT",lb=25,ub=150)
### BASELINE_PLAGUESURV
LHSParms <- specifyLHSParam(LHSParms,"BASELINE_PLAGUESURV",type="CONT",lb=0.01,ub=0.1)
### BASELINE_MEANFEC
LHSParms <- specifyLHSParam(LHSParms,"BASELINE_MEANFEC",type="CONT",lb=2.5,ub=6)
### FITNESS_COST
LHSParms <- specifyLHSParam(LHSParms,"FITNESS_COST",type="CONT",lb=0.01,ub=0.25)
### INITFREQ
LHSParms <- specifyLHSParam(LHSParms,"INITFREQ",type="CONT",lb=0.01,ub=0.25)
#### DOMINANCE
LHSParms <- specifyLHSParam(LHSParms,"DOMINANCE",type="CAT",lb=0,ub=4)
##################
##### GENERATE LATIN HYPERCUBE SAMPLE
nVars <- length(names(LHSParms))
LHS <- randomLHS(N_LHS_SAMPLES, nVars)   # generate multiple samples from parameter space according to a LHS sampling scheme
masterDF <- as.data.frame(LHS)    #  storage container (data frame) to record relevant details for each MP file. Rows:MP file/LHS samples. Cols: relevant variables
### translate raw lhs samples into desired parameter space
colnames(masterDF) <- names(LHSParms)
parm=1
for(parm in 1:nVars){
if(LHSParms[[parm]]$type=="CONT"){
masterDF[,parm] <- LHSParms[[parm]]$lb + LHS[,parm]*(LHSParms[[parm]]$ub-LHSParms[[parm]]$lb)
}
if(LHSParms[[parm]]$type=="CAT"){
masterDF[,parm] <- ceiling(LHSParms[[parm]]$lb + LHS[,parm]*(LHSParms[[parm]]$ub-LHSParms[[parm]]$lb))
}
if(LHSParms[[parm]]$type=="INT"){
masterDF[,parm] <- round(LHSParms[[parm]]$lb + LHS[,parm]*(LHSParms[[parm]]$ub-LHSParms[[parm]]$lb))
}
}
setwd(DATA_DIR)
## name file for LHS parameters
write.csv(masterDF,sprintf("masterDF_prelim%s.csv",Sys.Date()),row.names=F)
return(masterDF)
}
rm(list=ls())
############
## SIMULATION CONTROLS
############
NYEARS <- 20
############
## SET GLOBAL VARS
############
KEVIN_LAPTOP <- FALSE #  TRUE #
KEVIN_OFFICEPC <- TRUE # FALSE #
if(KEVIN_LAPTOP) GIT_DIR <- "C:\\Users\\Kevin\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_OFFICEPC) GIT_DIR <- "E:\\GIT\\Plague_Resistance_Evolution"
#####################
# LOAD FUNCTIONS
#####################
setwd(GIT_DIR)
source("PlagueResistanceEvolution_FUNCTIONS.R")
############
## SET UP WORKSPACE AND LOAD PACKAGES
############
SetUpWorkspace()
num_cores <- detectCores() - 1   # for setting up cluster... leave one core free for windows background processes?
############
## SAMPLE FROM LATIN HYPERCUBE
############
N_LHS_SAMPLES <- 10
masterDF <- MakeLHSSamples(nicheBreadthDir=dir,NicheBreadth)
masterDF
i=1
DoSimulateResistance(rep=i)    # simulate for these params...
