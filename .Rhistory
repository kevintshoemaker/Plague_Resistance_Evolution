newStack[[n]] <- stayRaster
}else{
newStack[[n]][stayRaster>0] <- eval(parse(text=n))[stayRaster>0]*stayRaster[stayRaster>0]
}
# plot(eval(parse(text=n)))
# plot(eval(parse(text=n))*stayRaster)
# plot(newStack[[n]])
# extent <- drawExtent()
# plot(crop(stayRaster,extent))   # okay this is actually working
}
focalCells <- which(leaveRaster@data@values>0)   # identify cells with dispersers leaving
xy_df <- data.frame(
xyFromCell(patchRaster,focalCells)
)
# reshuffle the order (make foci of expansion a bit more random...)
xy_df <- xy_df[sample(c(1:nrow(xy_df))),]
# head(xy_df)
#plot(newStack[[rasterNames[2]]])
counter <- 1
focalcell <- focalCells[counter]  # cell from which to draw potential dispersers
for(focalcell in focalCells){    # loop through focal cells [actually should only loop through cells that have positive abundance... ]
xy <- xy_df[counter,]
plagueStatus <- ifelse(PlagueRaster[focalcell]==1,"plague","noPlague")   # determine if plague
GetDispersalRates(plagueStatus = plagueStatus)  # get the current dispersal rates
neighborhoodRasters <- makeNeighborhoodRasters(newStack=newStack,plagueStatus = plagueStatus, xy=xy)  # characterize the possible sites to move to in the neighborhood
thisAbund <- as.numeric(PopArray[focalcell])  # abundance in the focal cell
overcrowded <- thisAbund>MAXABUND # if overcrowded, then dispersal will unfold in a certain way: e.g., colony will expand outward
undercrowded <- thisAbund<MINABUND  # if undercrowded, then dispersal can unfold in a different way: e.g., colony will restructure and group together at new focal areas
stay <- stayRaster[focalcell]
leave <- leaveRaster[focalcell]
if((overcrowded)){   # if focal cell is overcrowded (and not currently experiencing plague)
#stay <- stayRaster[focalcell] #MAXABUND*(1-disprate)  # number that should stay
#newStack <- UpdateAbund(focalxy=xy,stack=newStack,df=as.data.frame(cbind(xy,stay)))   # keep the "stay" individuals in place
#leave <- leaveRaster[focalcell] #max(0,thisAbund-MAXABUND) + MAXABUND*disprate
#newPop[focalcell] <- newPop[focalcell] + stay   # make sure that all staying individuals stay put...
if(plagueStatus=="plague") leave_snuggle <- 0
if(plagueStatus=="noPlague") leave_snuggle <- floor(leave*SNUGGLE)   # these individuals will try to find a place to settle next door
leave_kernel <- leave-leave_snuggle     # these individuals will obey the dispersal kernel
# expand the colony
newStack <- SpreadOut(newStack=newStack,leave_snuggle=leave_snuggle,
plagueStatus=plagueStatus,xy=xy,neighborhood_raster=neighborhoodRasters[['abundRaster']],
neighborhood_mask_raster=neighborhoodRasters[['maskRaster']],
freeSpace_raster=neighborhoodRasters[['freeSpaceRaster']])
# do long-distance dispersal (according to the dispersal kernel)
newStack <- LongDistanceDispersal(newStack=newStack,leave_kernel=leave_kernel,
plagueStatus=plagueStatus,
xy=xy,
neighborhood_raster=neighborhoodRasters[['abundRaster']],
freeSpace_raster=neighborhoodRasters[['freeSpaceRaster']],
neighborhood_kernel_raster=neighborhoodRasters[['kernelRaster']])
}else if((!overcrowded)&(!undercrowded)){   # if focal cell is not overcrowded or undercrowded
#stay <- stayRaster[focalcell] #round(thisAbund * (1-BASELINE_DISPERSAL))   # number of individuals staying in the focal cell
# newStack <- UpdateAbund(focalxy=xy,stack=newStack,df=as.data.frame(cbind(xy,stay)))   # keep the "stay" individuals in place (and update the evolving factors)
#leave <- leaveRaster[focalcell] thisAbund-stay  # how many are leaving?
# just do long-distance dispersal (according to the dispersal kernel)
newStack <- LongDistanceDispersal(newStack=newStack,leave_kernel=leave,
plagueStatus=plagueStatus,
xy=xy,
neighborhood_raster=neighborhoodRasters[['abundRaster']],
freeSpace_raster=neighborhoodRasters[['freeSpaceRaster']],
neighborhood_kernel_raster=neighborhoodRasters[['kernelRaster']])
}else if((undercrowded)){    # if focal cell is undercrowded
#stay <- stayRaster[focalcell] # in this case, all animals leave  (revisit this!)
#leave <- stayRaster[focalcell]   #thisAbund
# consolidate into new focal populations
newStack <- ConsolidatePops(newStack=newStack,leave=leave,
#newFociRaster=newFociRaster,
plagueStatus=plagueStatus,
xy=xy,
newFociRaster=newFociRaster,
neighborhood_raster=neighborhoodRasters[['abundRaster']],
neighborhood_mask_raster=neighborhoodRasters[['maskRaster']])
}
if(counter%%100==0) cat(sprintf("%s...",counter))
counter=counter+1
}  # end loop through focal cells
#   plot(newStack[["PopArray"]])
#   plot(newFociRaster)
#   plot(PopArray)
#   plot(PlagueRaster)
#   plot(newStack[[rasterNames[2]]])     # plague survival
#   plot(newStack[[rasterNames[3]]])
##########
# Expand focal cells
##########
# plot(newFociRaster)
foci_ndx <- which((newFociRaster@data@values==1)&(newStack[["PopArray"]]@data@values>0))
totfoci <- length(foci_ndx)
# focalcell <- foci_ndx[6]
if(totfoci>0){
names <- rasterNames   #names(newStack)
focalcell = foci_ndx[1]
for(focalcell in foci_ndx){  #loop through foci and spread them out!
xy <- as.data.frame(xyFromCell(PopArray,focalcell))
plagueStatus <- ifelse(PlagueRaster[focalcell]==1,"plague","noPlague")   # determine if plague
GetDispersalRates(plagueStatus=plagueStatus)  # get the current dispersal rates
neighborhoodRasters <- makeNeighborhoodRasters(newStack=newStack,plagueStatus = plagueStatus, xy=xy)  # characterize the possible sites to move to in the neighborhood
thisAbund <- as.numeric(newStack[['PopArray']][focalcell])  # abundance in the focal cell
# compute the mean values for evolving layers for focal cells so that these values can be spread out
i = names[2]
for(i in names){
if(i!="PopArray"){
temp <- newStack[[i]][focalcell]/thisAbund    # get the population mean for key evolving variables
eval(parse(text=sprintf("%s[focalcell]<-temp",i)))   # does this need a double arrow when in function? how to assign this to global environment
assign(x=i,value=eval(parse(text=i)), envir = .GlobalEnv)   # assign the variable to the global environment
}
}
overcrowded <- thisAbund>MAXABUND # if overcrowded, then dispersal will unfold in a certain way: e.g., colony will expand outward
if((overcrowded)){   # if focal cell is overcrowded
stay <- MAXABUND-thisAbund  # number that should stay (here, negative so that individuals are removed)
newStack <- UpdateAbund(focalxy=xy,stack=newStack,df=as.data.frame(cbind(xy,stay)))   # keep the "stay" individuals in place
leave <- max(0,thisAbund-MAXABUND)
# expand the colony
newStack <- SpreadOut(newStack=newStack,leave_snuggle=leave,
plagueStatus=plagueStatus,xy=xy,neighborhood_raster=neighborhoodRasters[['abundRaster']],
neighborhood_mask_raster=neighborhoodRasters[['maskRaster']],
freeSpace_raster=neighborhoodRasters[['freeSpaceRaster']])
}
}
}
UpdateStack(stack=newStack)   # make the new population, get the averages for the evolving layers and save them to .GlobalEnv
newPop <- newStack[['PopArray']]
#  PopArray <- newStack[['PopArray']]
return(newPop)
}
##################
# FECUNDITY FUNCTIONS
##################
# c=c(1,2,3,4,NA,5)
demographicStoch <- function(c){
value=c
if(any(!is.na(c))) value[!is.na(c)] <- rpois(length(which(!is.na(c))),c[!is.na(c)])    # why does this throw errors sometimes?
return(value)
}
doReproduce <- function(PlagueRaster=PlagueRaster){
thisPop <- PopArray
#thisFec <- rnorm(1,BASELINE_MEANFEC,CV_FECUNDITY*BASELINE_MEANFEC)
thisFec <- BASELINE_MEANFEC + (CV_FECUNDITY*BASELINE_MEANFEC)*deviate
thisFec <- max(0.1,thisFec)  # make sure fecundity is not zero
#thisPop[(thisPop<MINABUND)] <- 0  # populations below the allee threshold cannot breed
thisPop[(PlagueRaster==0)&(thisPop>MINABUND)] <- thisPop[(PlagueRaster==0)&(thisPop>MINABUND)] + PopArray[(PlagueRaster==0)&(thisPop>MINABUND)]*thisFec
thisPop[(PlagueRaster==1)&(thisPop>MINABUND)] <- thisPop[(PlagueRaster==1)&(thisPop>MINABUND)] + (PopArray[(PlagueRaster==1)&(thisPop>MINABUND)]*thisFec)/2   # reduced fecundity under plague...
thisPop <- calc(thisPop,fun=demographicStoch)
# plot(thisPop)
return(thisPop)
}
##################
# SURVIVAL FUNCTIONS
##################
#a=c(NA,NA,0.5,0.7)
#a=c(NA,NA,NA)
# a = c(NA,NA,NA,NA,NA)
getYearVariate <- function(a){            # note: this function could work for fecundity too...
#browser()
sd <- a*cv
value <- rep(NA,times=length(a))
if(any(!is.na(sd))){
value[!is.na(sd)] <- a[!is.na(sd)] + deviate*sd[!is.na(sd)]    # for now, spatially correlated...
value[value<SURVMIN_NOPLAGUE] <- SURVMIN_NOPLAGUE
value[value>SURVMAX_NOPLAGUE] <- SURVMAX_NOPLAGUE
}
return(value)
}
getSurvival <- function(resistanceStatus="susceptible",plagueStatus="plague"){
survival=0
if((plagueStatus=="noPlague")&(resistanceStatus=="susceptible")) survival = BASELINE_MEANSURV
if((plagueStatus=="noPlague")&(resistanceStatus=="resistant")) survival = BASELINE_MEANSURV - FITNESS_COST*(BASELINE_MEANSURV*BASELINE_PLAGUESURV_RESIST-SURVMIN_PLAGUE)
if((plagueStatus=="plague")&(resistanceStatus=="susceptible")) survival = BASELINE_PLAGUESURV
if((plagueStatus=="plague")&(resistanceStatus=="resistant")) survival = BASELINE_MEANSURV*BASELINE_PLAGUESURV_RESIST
return(survival)
}
getSurvival_thisYear <- function(meansurv=meansurv,deviate=deviate,cv=cv){
surv <- meansurv + deviate*(surv*cv)
surv[,"plague"] <- min(SURVMAX_PLAGUE,max(SURVMIN_PLAGUE,surv["resistant","plague"]))
surv[,"noPlague"] <- min(SURVMAX_NOPLAGUE,max(SURVMIN_NOPLAGUE,surv["resistant","plague"]))
return(surv)
}
##################
# DD SURVIVAL FUNCTION
##################
doDDSurvival <- function(){
thisPop <- PopArray
for(status in c("resistant","susceptible")){
thisPop[[status]][PopArray>(MAXABUND*1.15)] <- MAXABUND*1.15  # kill off all individuals in populations above the threshold
}
return(thisPop)
}
##################
# ALLEE FUNCTION
##################
doAllee <- function(){
thisPop <- PopArray
thisPop[PopArray<MINABUND] <- 0  # kill off all individuals in populations below the threshold
return(thisPop)
}
UserParams <- DefineUserParams()
InitializeDispersal(UserParams)
InitializeLandscape(solid=F)   # generate patchmaps etc.
plot(patchRaster)
plot(patchIDRaster)
PlagueModel <- GetPlagueModel()    # for now, use fake plague model- will be a statistical model
InitDensRaster <- KRaster    # initialize abundance at carrying capacity
plot(InitDensRaster)
INITFREQ
i=1
name <- sprintf("gene%s",i)
temp <- rnorm(nPatches,UserParams$Genetics$INITFREQ[1],UserParams$Genetics$INITFREQ_SD[1])
temp <- ifelse(temp<0,0.01,temp)
InitFreqList[[name]] <- reclassify(patchIDRaster,rcl=cbind(c(1:nPatches),temp))
InitFreqList <- list()
UserParams$Genetics$INITFREQ
i=1
for(i in 1:UserParams$Genetics$NGENES){
name <- sprintf("gene%s",i)
temp <- rnorm(nPatches,UserParams$Genetics$INITFREQ[1],UserParams$Genetics$INITFREQ_SD[1])
temp <- ifelse(temp<0,0.01,temp)
InitFreqList[[name]] <- reclassify(patchIDRaster,rcl=cbind(c(1:nPatches),temp))
}
plot(InitFreqList[["gene1"]])
InitFreqList <- stack(InitFreqList)
plot(InitFreqList)
ngenes
plot(InitFreqList)
UserParams$Genetics$RESISTANCE_SCENARIOS
ngenes=UserParams$Genetics$NGENES
nargs <- ngenes
arguments <- paste("X",c(1:nargs),sep="")
arguments
arguments2 <- paste(arguments, collapse=",")
arguments3 <- paste(arguments, collapse="*")
expression <- sprintf("function(%s) %s ",arguments2,arguments3)
arguments2
arguments3
UserParams$Genetics$RESISTANCE_SCENARIOS
temp <- numeric(UserParams[["Genetics"]]$NGENES)
temp
temp <- numeric(3)
names(temp) <- c("2x(rr)","1x(rs)","0x(ss)")
temp
UserParams[["Genetics"]]$DOMINANCE <- list()
UserParams[["Genetics"]]$DOMINANCE[[1]] <- temp
UserParams[["Genetics"]]$DOMINANCE[[1]] <- c(1,1,0)
UserParams[["Genetics"]]$DOMINANCE
temp <- matrix(0,nrow=UserParams[["Genetics"]]$NGENES,ncol=3)
colnames(temp) <- c("2x(rr)","1x(rs)","0x(ss)")
temp
UserParams[["Genetics"]]$DOMINANCE <- temp
UserParams[["Genetics"]]$DOMINANCE
temp <- matrix(0,nrow=UserParams[["Genetics"]]$NGENES,ncol=3)
colnames(temp) <- c("2x(rr)","1x(rs)","0x(ss)")
UserParams[["Genetics"]]$DOMINANCE <- temp
UserParams[["Genetics"]]$DOMINANCE[1,] <- c(1,1,0)   # dominant
UserParams[["Genetics"]]$DOMINANCE[2,] <- c(1,0,0)  # recessive
UserParams[["Genetics"]]$DOMINANCE
resistfunc <- function(ngenes=UserParams$Genetics$NGENES){      # this function assumes that all factors are needed for resistance
nargs <- ngenes
arguments <- paste("X",c(1:nargs),sep="")
arguments2 <- paste(arguments, collapse=",")
arguments3 <- paste(arguments, collapse="*")
expression <- sprintf("function(%s) %s ",arguments2,arguments3)
eval(parse(text=expression))
}
resistfunc(3)
newlist <- list()
gene=1
FreqList
FreqList = InitFreqList
UserParams
FreqList^2
name = sprintf("gene%s",gene)
name
FreqList[[gene]]
FreqList[[gene]]^2
(2*FreqList[[gene]]*(1-FreqList[gene]))
2*FreqList[[gene]]
(1-FreqList[gene])
(2*FreqList[[gene]]*(1-FreqList[[gene]]))
for(gene in 1:UserParams$Genetics$NGENES){
name = sprintf("gene%s",gene)
newlist =  FreqList[[gene]]^2 * UserParams$Genetics$DOMINANCE[gene,1] +
(2*FreqList[[gene]]*(1-FreqList[[gene]])) * UserParams$Genetics$DOMINANCE[gene,2]
}
newlist <- FreqList
FreqList[[name]]
newlist <- FreqList
gene=1
for(gene in 1:UserParams$Genetics$NGENES){
name = sprintf("gene%s",gene)
newlist[[name]] =  FreqList[[name]]^2 * UserParams$Genetics$DOMINANCE[gene,1] +
(2*FreqList[[name]]*(1-FreqList[[name]])) * UserParams$Genetics$DOMINANCE[gene,2]
}
plot(newlist)
newlist <- FreqList
gene=1
for(gene in 1:UserParams$Genetics$NGENES){
name = sprintf("gene%s",gene)
name2 = sprintf("factor%s",gene)
newlist[[name2]] =  FreqList[[name]]^2 * UserParams$Genetics$DOMINANCE[gene,1] +
(2*FreqList[[name]]*(1-FreqList[[name]])) * UserParams$Genetics$DOMINANCE[gene,2]
}
plot(newlist)
newlist <- list()
newlist <- list()
gene=1
for(gene in 1:UserParams$Genetics$NGENES){
name = sprintf("gene%s",gene)
name2 = sprintf("factor%s",gene)
newlist[[name2]] =  FreqList[[name]]^2 * UserParams$Genetics$DOMINANCE[gene,1] +
(2*FreqList[[name]]*(1-FreqList[[name]])) * UserParams$Genetics$DOMINANCE[gene,2]
}
newlist <- stack(newlist)
plot(newlist)
Gene2Factor <- function(UserParams, FreqList = InitFreqList){
newlist <- list()
gene=1
for(gene in 1:UserParams$Genetics$NGENES){
name = sprintf("gene%s",gene)
name2 = sprintf("factor%s",gene)
newlist[[name2]] =  FreqList[[name]]^2 * UserParams$Genetics$DOMINANCE[gene,1] +
(2*FreqList[[name]]*(1-FreqList[[name]])) * UserParams$Genetics$DOMINANCE[gene,2]
}
newlist <- stack(newlist)
return(newlist)
}
Gene2Factor <- function(UserParams, FreqList = InitFreqList){
newlist <- list()
gene=1
for(gene in 1:UserParams$Genetics$NGENES){
name = sprintf("gene%s",gene)
name2 = sprintf("factor%s",gene)
newlist[[name2]] =  FreqList[[name]]^2 * UserParams$Genetics$DOMINANCE[gene,1] +
(2*FreqList[[name]]*(1-FreqList[[name]])) * UserParams$Genetics$DOMINANCE[gene,2]
}
newlist <- stack(newlist)
return(newlist)
}
resistfunc <- function(ngenes=UserParams$Genetics$NGENES){      # this function assumes that all factors are needed for resistance
nargs <- ngenes
arguments <- paste("X",c(1:nargs),sep="")
arguments2 <- paste(arguments, collapse=",")
arguments3 <- paste(arguments, collapse="*")
expression <- sprintf("function(%s) %s ",arguments2,arguments3)
eval(parse(text=expression))
}
UserParams$Genetics$RESISTANCE_SCENARIOS
FactorList <- Gene2Factor(UserParams,FreqList)
temp <- overlay(FactorList,fun=fungen(NGENES)) #round(InitDensRaster*InitFreq[["gene1"]])   # freq of resist for each grid cell
FactorList
fungen=resistfunc
temp <- overlay(FactorList,fun=fungen(NGENES)) #round(InitDensRaster*InitFreq[["gene1"]])   # freq of resist for each grid cell
FactorList <- Gene2Factor(UserParams,FreqList)
FreqList=InitFreqList
fungen=resistfunc
temp <- overlay(FactorList,fun=fungen(UserParams$Genetics$NGENES)) #round(InitDensRaster*InitFreq[["gene1"]])   # freq of resist for each grid cell
ResistRaster <- overlay(DensRaster,temp,fun=function(x,y) x*y)      # numbers of resistant individuals in each grid cell
DensRaster=InitDensRaster
ResistRaster <- overlay(DensRaster,temp,fun=function(x,y) x*y)      # numbers of resistant individuals in each grid cell
DensRaster=InitDensRaster
FreqList = InitFreqList
newlist <- list()
gene=1
reslist <- list()
suslist <- list()
gene=1
name = sprintf("gene%s",gene)
name
FactorList=FactorList
FactorList
reslist[[name]] <- reclassify(DensRaster[[name]],rcl=c(-Inf,Inf,0))
DensRaster[[name]]
DensRaster=InitDensRaster
reslist[[name]] <- reclassify(FreqList[[name]],rcl=c(-Inf,Inf,0))
reslist[[name]]
serParams$Genetics$DOMINANCE[gene,1]
UserParams$Genetics$DOMINANCE[gene,1]
suslist[[name]] <- 2*DensRaster*FreqList[[name]]
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
reslist[[name]] <- reclassify(FreqList[[name]],rcl=c(-Inf,Inf,0))
reslist <- list()
suslist <- list()
temp <- DensRaster*F
gene=1
name = sprintf("gene%s",gene)
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
reslist[[name]] <- reclassify(FreqList[[name]],rcl=c(-Inf,Inf,0))
reslist[[name]] <- reslist[[name]] + (2 * ResistRaster * UserParams$Genetics$DOMINANCE[gene,1]) + (ResistRaster * UserParams$Genetics$DOMINANCE[gene,2])
reslist[[name]]
suslist[[name]] <- suslist[[name]] - reslist[[name]]  # number of resistance alleles remaining in the susceptible population
suslist[[name]]
UserParams$Genetics$DOMINANCE[gene,1]
(2*ResistRaster) * FreqList^2 * UserParams$Genetics$DOMINANCE[gene,1]
name = sprintf("gene%s",gene)
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
reslist[[name]] <- reclassify(FreqList[[name]],rcl=c(-Inf,Inf,0))
reslist[[name]] <- reslist[[name]] + (2*ResistRaster) * FreqList^2 * UserParams$Genetics$DOMINANCE[gene,1] +
(ResistRaster) * (2*FreqList[[name]]*(1-FreqList[[name]])) * UserParams$Genetics$DOMINANCE[gene,2]
reslist[[name]]
suslist[[name]] <- suslist[[name]] - reslist[[name]]  # number of resistance alleles remaining in the susceptible population
suslist[[name]]
reslist[[name]] <- reslist[[name]]/(2*ResistRaster)  # allele frequency in res pop
reslist[[name]]
suslist[[name]] <- suslist[[name]]/(2*(DensRaster-ResistRaster))  # freq in sus pop
suslist[[name]]
reslist <- list()
suslist <- list()
temp <- DensRaster*F
gene=1
name = sprintf("gene%s",gene)
DensRaster
FreqList[[name]]
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
suslist[[name]]
reslist[[name]] <- reclassify(FreqList[[name]],rcl=c(-Inf,Inf,0))
reslist[[name]]
2*ResistRaster
reslist[[name]] <- reslist[[name]] + (2*ResistRaster) * FreqList[[name]]^2 * UserParams$Genetics$DOMINANCE[gene,1] +
(ResistRaster) * (2*FreqList[[name]]*(1-FreqList[[name]])) * UserParams$Genetics$DOMINANCE[gene,2]
suslist[[name]] <- suslist[[name]] - reslist[[name]]  # number of resistance alleles remaining in the susceptible population
suslist[[name]]
reslist[[name]] <
reslist[[name]]
reslist[[name]] <- reslist[[name]]/(2*ResistRaster)  # allele frequency in res pop
suslist[[name]] <- suslist[[name]]/(2*(DensRaster-ResistRaster))  # freq in sus pop
reslist[[name]]
suslist[[name]]
DensRaster-ResistRaster
reslist <- list()
suslist <- list()
temp <- DensRaster*F
gene=1
name = sprintf("gene%s",gene)
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
suslist[[name]]
2*ResistRaster
ResistRaster
reslist[[name]]
reslist <- list()
suslist <- list()
temp <- DensRaster*F
gene=1
name = sprintf("gene%s",gene)
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
reslist[[name]] <- reclassify(FreqList[[name]],rcl=c(-Inf,Inf,0))
name = sprintf("gene%s",gene)
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
reslist[[name]] <- reclassify(FreqList[[name]],rcl=c(-Inf,Inf,0))
reslist <- list()
suslist <- list()
temp <- DensRaster*F
gene=2
name = sprintf("gene%s",gene)
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
reslist[[name]] <- reclassify(FreqList[[name]],rcl=c(-Inf,Inf,0))
reslist[[name]]
reslist[[name]] <- reslist[[name]] + (2*DensRaster) * FreqList[[name]]^2 * UserParams$Genetics$DOMINANCE[gene,1] +
(DensRaster) * (2*FreqList[[name]]*(1-FreqList[[name]])) * UserParams$Genetics$DOMINANCE[gene,2]
suslist[[name]] <- suslist[[name]] - reslist[[name]]  # number of resistance alleles remaining in the susceptible population
reslist[[name]] <- reslist[[name]]/(2*ResistRaster)  # allele frequency in res pop
reslist
reslist <- list()
suslist <- list()
temp <- DensRaster*F
gene=2
name = sprintf("gene%s",gene)
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
reslist[[name]] <- reclassify(FreqList[[name]],rcl=c(-Inf,Inf,0))
reslist[[name]]
(2*DensRaster)
FreqList[[name]]^2
(2*DensRaster) * FreqList[[name]]^2 * UserParams$Genetics$DOMINANCE[gene,1]
(DensRaster) * (2*FreqList[[name]]*(1-FreqList[[name]])) * UserParams$Genetics$DOMINANCE[gene,2]
ResistRaster
PerHet <- 1/(((2/FreqList)-2)+1)
PerHet
PerHet <- ((2/FreqList)-2)/(((2/FreqList)-2)+1)    # percent
PerHet
1-FreqList^2-(1-FreqList)^2
reslist <- list()
suslist <- list()
temp <- DensRaster*F
gene=2
PerHet <- ((2/FreqList)-2)/(((2/FreqList)-2)+1)    # percent heterozygotes for dominant factors in resistant pool
name = sprintf("gene%s",gene)
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
reslist[[name]] <- reclassify(FreqList[[name]],rcl=c(-Inf,Inf,0))
sum(UserParams$Genetics$DOMINANCE[gene,])==2
gene=1
sum(UserParams$Genetics$DOMINANCE[gene,])==2
reslist[[name]] <- reslist[[name]] + (2*ResistRaster) * (1-PerHet[[name]])  +
ResistRaster*PerHet[[name]]
suslist[[name]] <- suslist[[name]] - reslist[[name]]
reslist <- list()
suslist <- list()
temp <- DensRaster*F
gene=1
PerHet <- ((2/FreqList)-2)/(((2/FreqList)-2)+1)    # percent heterozygotes for dominant factors in resistant pool
name = sprintf("gene%s",gene)
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
reslist[[name]] <- reclassify(FreqList[[name]],rcl=c(-Inf,Inf,0))
if(sum(UserParams$Genetics$DOMINANCE[gene,])==2){   # if fully dominant
reslist[[name]] <- reslist[[name]] + (2*ResistRaster) * (1-PerHet[[name]])  +
ResistRaster*PerHet[[name]]
suslist[[name]] <- suslist[[name]] - reslist[[name]]  # number of resistance alleles remaining in the susceptible population
}else{
reslist[[name]] <- reslist[[name]] + (2*ResistRaster) * UserParams$Genetics$DOMINANCE[gene,1] +
(ResistRaster) * UserParams$Genetics$DOMINANCE[gene,2]
suslist[[name]] <- suslist[[name]] - reslist[[name]]  # number of resistance alleles remaining in the susceptible population
}
reslist[[name]] <- reslist[[name]]/(2*ResistRaster)  # allele frequency in res pop
reslist[[name]]
suslist[[name]] <- suslist[[name]]/(2*(DensRaster-ResistRaster))  # freq in sus pop
suslist[[name]]
