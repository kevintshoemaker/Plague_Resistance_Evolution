############
## SET GLOBAL VARS
############
KEVIN_LAPTOP <- FALSE #
KEVIN_OFFICEPC <- TRUE # FALSE #
KEVIN_LAPTOP2 <- FALSE # TRUE #
if(KEVIN_LAPTOP) GIT_DIR <- "C:\\Users\\Kevin\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_OFFICEPC) GIT_DIR <- "E:\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_LAPTOP2) GIT_DIR <- "C:\\Users\\KevinT_Kevin\\Documents\\GitHub\\Plague_Resistance_Evolution"
#####################
# LOAD FUNCTIONS
#####################
setwd(GIT_DIR)
source("PlagueResistanceEvolution_FUNCTIONS.R")
############
## SET UP WORKSPACE AND LOAD PACKAGES
############
dirs <- SetUpDirectories()
num_cores <- parallel::detectCores() - 2   # for setting up cluster... leave one core free for windows background processes?
############
## SAMPLE FROM LATIN HYPERCUBE
############
N_LHS_SAMPLES <- 4  # 200
masterDF <- MakeLHSSamples(add=FALSE)
rep=1
fake=F
dmat <- list()
dmat[[1]] <- matrix(c(1,0,0, 1,0,0), nrow=2,ncol=3,byrow = T)  # dominant
dmat[[2]] <- matrix(c(1,1,0, 1,0,0), nrow=2,ncol=3,byrow = T)  # gene 1 dominant
dmat[[3]] <- matrix(c(1,0,0, 1,1,0), nrow=2,ncol=3,byrow = T)  # gene 2 dominant
dmat[[4]] <- matrix(c(1,1,0, 1,1,0), nrow=2,ncol=3,byrow = T)  # recessive
UserParams <- DefineUserParams(PER_SUITABLE=masterDF$PER_SUITABLE[rep],SNUGGLE=masterDF$SNUGGLE[rep],NFOCI=1,MAXDISPERSAL=500,BASELINE_DISPERSAL=0.05,
MAXDISPERSAL_PLAGUE = 1000,PLAGUE_DISPERSAL=masterDF$PLAGUE_DISPERSAL[rep], MAXDENS = masterDF$MAXDENS[rep],
MINDENS = 15, BASELINE_MEANSURV = 0.6, BASELINE_PLAGUESURV=masterDF$BASELINE_PLAGUESURV[rep],
BASELINE_PLAGUESURV_RESIST=0.5,BASELINE_MEANFEC=masterDF$BASELINE_MEANFEC[rep],
FITNESS_COST=rep(masterDF$FITNESS_COST[rep],2),INITFREQ=rep(masterDF$INITFREQ[rep],2),DOMINANCE=dmat[[masterDF$DOMINANCE[rep]]])
#assign(x="UserParams",value=UserParams, envir = env)
InitList <- DoInitialization(UserParams,fake=fake)  #BaseLandscape
PlagueRaster <- InitList$PlagueRaster
YearsSincePlague <- InitList$YearsSincePlague
#PopArray <- InitList$PopArray
InitFreqList <- InitList$InitFreqList
InitDensRaster <- InitList$InitDensRaster
PlagueModel <- InitList$PlagueModel
DispList <- InitList$DispList
UserParams <- InitList$UserParams
BaseLandscape <- InitList$BaseLandscape
EnvCovs <- InitList$EnvCovs
# UserParams <- get("UserParams",envir=env)
# BaseLandscape <- get("BaseLandscape",envir=env)
ResultsList <- SetUpResults(NYEARS,UserParams)
####################
# START LOOP THROUGH YEARS
####################
# names of important raster maps to save to file etc...
#rasterNames  <- c("PopArray","NextPlagueSurvRaster","NextNormalSurvRaster","PlagueResistancePotentialRaster")   # Deprecate?
# t=which(plagueyear)[1]
t<-0
t<-t+1
for(t in 1:(NYEARS)){
deviate <- rnorm(1)   #determine if this is a good year or a bad year (for now, survival and fecundity are perfectly correlated)
#assign(x="deviate",value=deviate, envir = env)
cv=UserParams$Popbio$CV_SURVIVAL   # set up for using the getYearVariate function
#assign(x="cv",value=cv, envir = env)
if(t==1){
FreqList<-InitFreqList;
DensRaster<-InitDensRaster;
newFociRaster <- raster::reclassify(DensRaster,rcl=c(-Inf,Inf,0))     # initial conditions
# assign(x="FreqList",value=FreqList, envir = env)
# assign(x="DensRaster",value=DensRaster, envir = env)
# assign(x="newFociRaster",value=newFociRaster, envir = env)
}
##################
# DENSITY INDEPENDENT SURVIVAL (including plague survival)
##################
temp <- doSurvival(DensRaster,PlagueRaster,FreqList,UserParams,BaseLandscape,deviate,cv)  #env
DensRaster <- temp$NewDensRaster
FreqList <- temp$FreqList
#assign(x="DensRaster",value=DensRaster, envir = env)
#FreqList <- get("FreqList",envir=env) # get("UserParams",envir=env)
# plot(DensRaster)
# plot(FreqList[["gene1"]])
################
# REPRODUCTION
################
DensRaster <- doReproduce(UserParams,DensRaster,PlagueRaster,deviate)    # TODO: make specific to each resistance type...?
#assign(x="DensRaster",value=DensRaster, envir = env)
# plot(DensRaster)
# plot(FreqList[["gene1"]])
###############
# DISPERSAL: Move individuals around the landscape (this takes a while!)
###############
temp <- doDispersal(UserParams,DensRaster,PlagueRaster,newFociRaster,FreqList,BaseLandscape,DispList)
DensRaster <- temp$newPop
newFociRaster <- temp$newFociRaster
FreqList <- temp$newFreqList
#assign(x="DensRaster",value=DensRaster, envir = env)
# plot(DensRaster)    # good in t=1, not so much in t=2
# plot(FreqList[["gene2"]])
###############
# ALLEE EFFECT: REMOVE POPULATIONS BELOW A MINIMUM ABUNDANCE THRESHOLD
###############
#PopArray <- doAllee()
#if(MINABUND>0) PopArray <- doAllee()   # don't need this! all low-dens individuals move out anyway...
# $
###############
# CLEAR excess individuals from cells (DD)
DensRaster <- doDDSurvival(DensRaster,UserParams)
#assign(x="DensRaster",value=DensRaster, envir = env)
# plot(DensRaster)
# plot(FreqList[["gene1"]])
##################
# PLAGUE PRESSURE
##################
YearsSincePlague <- YearsSincePlague + 1
PlagueRaster <- doPlague(PlagueRaster=PlagueRaster,YearsSincePlague=YearsSincePlague,DensRaster=DensRaster,UserParams,PlagueModel,EnvCovs,fake,timestep=t)
# raster::plot(PlagueRaster)
##################
# update the years since plague variable...
YearsSincePlague[PlagueRaster==1] <- 0
# raster::plot(YearsSincePlague)
#assign(x="DensRaster",value=DensRaster, envir = env)
# plot(PlagueRaster)
# # plot(PopArray)
#
#   plot(PopArray)    # okay
#   plot(raster::reclassify(NextNormalSurvRaster,rcl=c(NA,NA,0)))   # okay in t=1,2
#   plot(NextNormalSurvRaster)
#   plot(raster::reclassify(NextPlagueSurvRaster,rcl=c(NA,NA,0)))    # okay t=1,2
#
#   plot(newFociRaster)   # okay t=1
#
#   plot(PlagueRaster)
###############
# MAKE PLOTS
###############
if(rep%%5==0) MakePlots(rep,t,BaseLandscape,DensRaster,PlagueRaster,FreqList)
###############
# STORE RESULTS
###############
ResultsList <- ComputeYearResults(ResultsList,DensRaster,FreqList,t)
}   # end loop through time
# time step is one year
# consider scalar demographic model for now, but with potential for matrix model
# 8/29/16: changed to consider a binary resistance trait that is potentially a function of several gene loci...
############
## CLEAR WORKSPACE
############
rm(list=ls())
############
## SIMULATION CONTROLS
############
NYEARS <- 10
############
## SET GLOBAL VARS
############
KEVIN_LAPTOP <- FALSE #
KEVIN_OFFICEPC <- TRUE # FALSE #
KEVIN_LAPTOP2 <- FALSE # TRUE #
if(KEVIN_LAPTOP) GIT_DIR <- "C:\\Users\\Kevin\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_OFFICEPC) GIT_DIR <- "E:\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_LAPTOP2) GIT_DIR <- "C:\\Users\\KevinT_Kevin\\Documents\\GitHub\\Plague_Resistance_Evolution"
#####################
# LOAD FUNCTIONS
#####################
setwd(GIT_DIR)
source("PlagueResistanceEvolution_FUNCTIONS.R")
############
## SET UP WORKSPACE AND LOAD PACKAGES
############
dirs <- SetUpDirectories()
num_cores <- parallel::detectCores() - 2   # for setting up cluster... leave one core free for windows background processes?
############
## SAMPLE FROM LATIN HYPERCUBE
############
N_LHS_SAMPLES <- 4  # 200
masterDF <- MakeLHSSamples(add=FALSE)
rep=1
fake=F
dmat <- list()
dmat[[1]] <- matrix(c(1,0,0, 1,0,0), nrow=2,ncol=3,byrow = T)  # dominant
dmat[[2]] <- matrix(c(1,1,0, 1,0,0), nrow=2,ncol=3,byrow = T)  # gene 1 dominant
dmat[[3]] <- matrix(c(1,0,0, 1,1,0), nrow=2,ncol=3,byrow = T)  # gene 2 dominant
dmat[[4]] <- matrix(c(1,1,0, 1,1,0), nrow=2,ncol=3,byrow = T)  # recessive
UserParams <- DefineUserParams(PER_SUITABLE=masterDF$PER_SUITABLE[rep],SNUGGLE=masterDF$SNUGGLE[rep],NFOCI=1,MAXDISPERSAL=500,BASELINE_DISPERSAL=0.05,
MAXDISPERSAL_PLAGUE = 1000,PLAGUE_DISPERSAL=masterDF$PLAGUE_DISPERSAL[rep], MAXDENS = masterDF$MAXDENS[rep],
MINDENS = 15, BASELINE_MEANSURV = 0.6, BASELINE_PLAGUESURV=masterDF$BASELINE_PLAGUESURV[rep],
BASELINE_PLAGUESURV_RESIST=0.5,BASELINE_MEANFEC=masterDF$BASELINE_MEANFEC[rep],
FITNESS_COST=rep(masterDF$FITNESS_COST[rep],2),INITFREQ=rep(masterDF$INITFREQ[rep],2),DOMINANCE=dmat[[masterDF$DOMINANCE[rep]]])
#assign(x="UserParams",value=UserParams, envir = env)
InitList <- DoInitialization(UserParams,fake=fake)  #BaseLandscape
PlagueRaster <- InitList$PlagueRaster
YearsSincePlague <- InitList$YearsSincePlague
#PopArray <- InitList$PopArray
InitFreqList <- InitList$InitFreqList
InitDensRaster <- InitList$InitDensRaster
PlagueModel <- InitList$PlagueModel
DispList <- InitList$DispList
UserParams <- InitList$UserParams
BaseLandscape <- InitList$BaseLandscape
EnvCovs <- InitList$EnvCovs
# UserParams <- get("UserParams",envir=env)
# BaseLandscape <- get("BaseLandscape",envir=env)
ResultsList <- SetUpResults(NYEARS,UserParams)
####################
# START LOOP THROUGH YEARS
####################
# names of important raster maps to save to file etc...
#rasterNames  <- c("PopArray","NextPlagueSurvRaster","NextNormalSurvRaster","PlagueResistancePotentialRaster")   # Deprecate?
# t=which(plagueyear)[1]
t<-0
t<-t+1
for(t in 1:(NYEARS)){
deviate <- rnorm(1)   #determine if this is a good year or a bad year (for now, survival and fecundity are perfectly correlated)
#assign(x="deviate",value=deviate, envir = env)
cv=UserParams$Popbio$CV_SURVIVAL   # set up for using the getYearVariate function
#assign(x="cv",value=cv, envir = env)
if(t==1){
FreqList<-InitFreqList;
DensRaster<-InitDensRaster;
newFociRaster <- raster::reclassify(DensRaster,rcl=c(-Inf,Inf,0))     # initial conditions
# assign(x="FreqList",value=FreqList, envir = env)
# assign(x="DensRaster",value=DensRaster, envir = env)
# assign(x="newFociRaster",value=newFociRaster, envir = env)
}
##################
# DENSITY INDEPENDENT SURVIVAL (including plague survival)
##################
temp <- doSurvival(DensRaster,PlagueRaster,FreqList,UserParams,BaseLandscape,deviate,cv)  #env
DensRaster <- temp$NewDensRaster
FreqList <- temp$FreqList
#assign(x="DensRaster",value=DensRaster, envir = env)
#FreqList <- get("FreqList",envir=env) # get("UserParams",envir=env)
# plot(DensRaster)
# plot(FreqList[["gene1"]])
################
# REPRODUCTION
################
DensRaster <- doReproduce(UserParams,DensRaster,PlagueRaster,deviate)    # TODO: make specific to each resistance type...?
#assign(x="DensRaster",value=DensRaster, envir = env)
# plot(DensRaster)
# plot(FreqList[["gene1"]])
###############
# DISPERSAL: Move individuals around the landscape (this takes a while!)
###############
temp <- doDispersal(UserParams,DensRaster,PlagueRaster,newFociRaster,FreqList,BaseLandscape,DispList)
DensRaster <- temp$newPop
newFociRaster <- temp$newFociRaster
FreqList <- temp$newFreqList
#assign(x="DensRaster",value=DensRaster, envir = env)
# plot(DensRaster)    # good in t=1, not so much in t=2
# plot(FreqList[["gene2"]])
###############
# ALLEE EFFECT: REMOVE POPULATIONS BELOW A MINIMUM ABUNDANCE THRESHOLD
###############
#PopArray <- doAllee()
#if(MINABUND>0) PopArray <- doAllee()   # don't need this! all low-dens individuals move out anyway...
# $
###############
# CLEAR excess individuals from cells (DD)
DensRaster <- doDDSurvival(DensRaster,UserParams)
#assign(x="DensRaster",value=DensRaster, envir = env)
# plot(DensRaster)
# plot(FreqList[["gene1"]])
##################
# PLAGUE PRESSURE
##################
YearsSincePlague <- YearsSincePlague + 1
PlagueRaster <- doPlague(PlagueRaster=PlagueRaster,YearsSincePlague=YearsSincePlague,DensRaster=DensRaster,UserParams,PlagueModel,EnvCovs,fake,timestep=t)
# raster::plot(PlagueRaster)
##################
# update the years since plague variable...
YearsSincePlague[PlagueRaster==1] <- 0
# raster::plot(YearsSincePlague)
#assign(x="DensRaster",value=DensRaster, envir = env)
# plot(PlagueRaster)
# # plot(PopArray)
#
#   plot(PopArray)    # okay
#   plot(raster::reclassify(NextNormalSurvRaster,rcl=c(NA,NA,0)))   # okay in t=1,2
#   plot(NextNormalSurvRaster)
#   plot(raster::reclassify(NextPlagueSurvRaster,rcl=c(NA,NA,0)))    # okay t=1,2
#
#   plot(newFociRaster)   # okay t=1
#
#   plot(PlagueRaster)
###############
# MAKE PLOTS
###############
if(rep%%5==0) MakePlots(rep,t,BaseLandscape,DensRaster,PlagueRaster,FreqList)
###############
# STORE RESULTS
###############
ResultsList <- ComputeYearResults(ResultsList,DensRaster,FreqList,t)
}   # end loop through time
rep%%5==0
ResultsList
# time step is one year
# consider scalar demographic model for now, but with potential for matrix model
# 8/29/16: changed to consider a binary resistance trait that is potentially a function of several gene loci...
############
## CLEAR WORKSPACE
############
rm(list=ls())
############
## SIMULATION CONTROLS
############
NYEARS <- 10
############
## SET GLOBAL VARS
############
KEVIN_LAPTOP <- FALSE #
KEVIN_OFFICEPC <- TRUE # FALSE #
KEVIN_LAPTOP2 <- FALSE # TRUE #
if(KEVIN_LAPTOP) GIT_DIR <- "C:\\Users\\Kevin\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_OFFICEPC) GIT_DIR <- "E:\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_LAPTOP2) GIT_DIR <- "C:\\Users\\KevinT_Kevin\\Documents\\GitHub\\Plague_Resistance_Evolution"
#####################
# LOAD FUNCTIONS
#####################
setwd(GIT_DIR)
source("PlagueResistanceEvolution_FUNCTIONS.R")
############
## SET UP WORKSPACE AND LOAD PACKAGES
############
dirs <- SetUpDirectories()
num_cores <- parallel::detectCores() - 2   # for setting up cluster... leave one core free for windows background processes?
############
## SAMPLE FROM LATIN HYPERCUBE
############
N_LHS_SAMPLES <- 4  # 200
masterDF <- MakeLHSSamples(add=FALSE)
rep=1
fake=F
dmat <- list()
dmat[[1]] <- matrix(c(1,0,0, 1,0,0), nrow=2,ncol=3,byrow = T)  # dominant
dmat[[2]] <- matrix(c(1,1,0, 1,0,0), nrow=2,ncol=3,byrow = T)  # gene 1 dominant
dmat[[3]] <- matrix(c(1,0,0, 1,1,0), nrow=2,ncol=3,byrow = T)  # gene 2 dominant
dmat[[4]] <- matrix(c(1,1,0, 1,1,0), nrow=2,ncol=3,byrow = T)  # recessive
UserParams <- DefineUserParams(PER_SUITABLE=masterDF$PER_SUITABLE[rep],SNUGGLE=masterDF$SNUGGLE[rep],NFOCI=1,MAXDISPERSAL=500,BASELINE_DISPERSAL=0.05,
MAXDISPERSAL_PLAGUE = 1000,PLAGUE_DISPERSAL=masterDF$PLAGUE_DISPERSAL[rep], MAXDENS = masterDF$MAXDENS[rep],
MINDENS = 15, BASELINE_MEANSURV = 0.6, BASELINE_PLAGUESURV=masterDF$BASELINE_PLAGUESURV[rep],
BASELINE_PLAGUESURV_RESIST=0.5,BASELINE_MEANFEC=masterDF$BASELINE_MEANFEC[rep],
FITNESS_COST=rep(masterDF$FITNESS_COST[rep],2),INITFREQ=rep(masterDF$INITFREQ[rep],2),DOMINANCE=dmat[[masterDF$DOMINANCE[rep]]])
#assign(x="UserParams",value=UserParams, envir = env)
InitList <- DoInitialization(UserParams,fake=fake)  #BaseLandscape
PlagueRaster <- InitList$PlagueRaster
YearsSincePlague <- InitList$YearsSincePlague
#PopArray <- InitList$PopArray
InitFreqList <- InitList$InitFreqList
InitDensRaster <- InitList$InitDensRaster
PlagueModel <- InitList$PlagueModel
DispList <- InitList$DispList
UserParams <- InitList$UserParams
BaseLandscape <- InitList$BaseLandscape
EnvCovs <- InitList$EnvCovs
# UserParams <- get("UserParams",envir=env)
# BaseLandscape <- get("BaseLandscape",envir=env)
ResultsList <- SetUpResults(NYEARS,UserParams)
####################
# START LOOP THROUGH YEARS
####################
# names of important raster maps to save to file etc...
#rasterNames  <- c("PopArray","NextPlagueSurvRaster","NextNormalSurvRaster","PlagueResistancePotentialRaster")   # Deprecate?
# t=which(plagueyear)[1]
t<-0
t<-t+1
for(t in 1:(NYEARS)){
deviate <- rnorm(1)   #determine if this is a good year or a bad year (for now, survival and fecundity are perfectly correlated)
#assign(x="deviate",value=deviate, envir = env)
cv=UserParams$Popbio$CV_SURVIVAL   # set up for using the getYearVariate function
#assign(x="cv",value=cv, envir = env)
if(t==1){
FreqList<-InitFreqList;
DensRaster<-InitDensRaster;
newFociRaster <- raster::reclassify(DensRaster,rcl=c(-Inf,Inf,0))     # initial conditions
# assign(x="FreqList",value=FreqList, envir = env)
# assign(x="DensRaster",value=DensRaster, envir = env)
# assign(x="newFociRaster",value=newFociRaster, envir = env)
}
##################
# DENSITY INDEPENDENT SURVIVAL (including plague survival)
##################
temp <- doSurvival(DensRaster,PlagueRaster,FreqList,UserParams,BaseLandscape,deviate,cv)  #env
DensRaster <- temp$NewDensRaster
FreqList <- temp$FreqList
#assign(x="DensRaster",value=DensRaster, envir = env)
#FreqList <- get("FreqList",envir=env) # get("UserParams",envir=env)
# plot(DensRaster)
# plot(FreqList[["gene1"]])
################
# REPRODUCTION
################
DensRaster <- doReproduce(UserParams,DensRaster,PlagueRaster,deviate)    # TODO: make specific to each resistance type...?
#assign(x="DensRaster",value=DensRaster, envir = env)
# plot(DensRaster)
# plot(FreqList[["gene1"]])
###############
# DISPERSAL: Move individuals around the landscape (this takes a while!)
###############
temp <- doDispersal(UserParams,DensRaster,PlagueRaster,newFociRaster,FreqList,BaseLandscape,DispList)
DensRaster <- temp$newPop
newFociRaster <- temp$newFociRaster
FreqList <- temp$newFreqList
#assign(x="DensRaster",value=DensRaster, envir = env)
# plot(DensRaster)    # good in t=1, not so much in t=2
# plot(FreqList[["gene2"]])
###############
# ALLEE EFFECT: REMOVE POPULATIONS BELOW A MINIMUM ABUNDANCE THRESHOLD
###############
#PopArray <- doAllee()
#if(MINABUND>0) PopArray <- doAllee()   # don't need this! all low-dens individuals move out anyway...
# $
###############
# CLEAR excess individuals from cells (DD)
DensRaster <- doDDSurvival(DensRaster,UserParams)
#assign(x="DensRaster",value=DensRaster, envir = env)
# plot(DensRaster)
# plot(FreqList[["gene1"]])
##################
# PLAGUE PRESSURE
##################
YearsSincePlague <- YearsSincePlague + 1
PlagueRaster <- doPlague(PlagueRaster=PlagueRaster,YearsSincePlague=YearsSincePlague,DensRaster=DensRaster,UserParams,PlagueModel,EnvCovs,fake,timestep=t)
# raster::plot(PlagueRaster)
##################
# update the years since plague variable...
YearsSincePlague[PlagueRaster==1] <- 0
# raster::plot(YearsSincePlague)
#assign(x="DensRaster",value=DensRaster, envir = env)
# plot(PlagueRaster)
# # plot(PopArray)
#
#   plot(PopArray)    # okay
#   plot(raster::reclassify(NextNormalSurvRaster,rcl=c(NA,NA,0)))   # okay in t=1,2
#   plot(NextNormalSurvRaster)
#   plot(raster::reclassify(NextPlagueSurvRaster,rcl=c(NA,NA,0)))    # okay t=1,2
#
#   plot(newFociRaster)   # okay t=1
#
#   plot(PlagueRaster)
###############
# MAKE PLOTS
###############
if(rep%%1==0) MakePlots(rep,t,BaseLandscape,DensRaster,PlagueRaster,FreqList)
###############
# STORE RESULTS
###############
ResultsList <- ComputeYearResults(ResultsList,DensRaster,FreqList,t)
}   # end loop through time
###############
# MAKE MOVIES
###############
if(rep%%1==0) MakeMovie(rep)
rep
thisMOVIE_DIR <- sprintf("%s\\rep%04d",dirs$MOVIE_DIR2,rep)
if(is.na(file.info(thisMOVIE_DIR)[1,"isdir"])) dir.create(thisMOVIE_DIR)
thisFIGS_DIR <- sprintf("%s\\rep%04d",dirs$FIGS_DIR2,rep)
setwd(thisFIGS_DIR)
ls()
list.files()
as.numeric(gsub("([0-9]+).*$", "\\1", list.files()))
regmatches(years, gregexpr("[[:digit:]]+", list.files()))
regmatches(list.files(), gregexpr("[[:digit:]]+", list.files()))
unlist(regmatches(list.files(), gregexpr("[[:digit:]]+", list.files())))
as.numeric(unlist(regmatches(list.files(), gregexpr("[[:digit:]]+", list.files()))))
fileyrs <- as.numeric(unlist(regmatches(list.files(), gregexpr("[[:digit:]]+", list.files()))))
fileyrs > NYEARS
fileyrs <- as.numeric(unlist(regmatches(list.files(), gregexpr("[[:digit:]]+", list.files()))))
notthissim <- fileyrs > NYEARS
list.files()[notthissim]
toremove <- list.files()[notthissim]
rm(list=toremove)
list.files()
ls()
?file.remove
file.remove(toremove)
list.files()
fileyrs <- as.numeric(unlist(regmatches(list.files(), gregexpr("[[:digit:]]+", list.files()))))
notthissim <- fileyrs > NYEARS
toremove <- list.files()[notthissim]
toremove
notthissim
any(notthissim)
if(any(notthissim)) file.remove(toremove)
MakeMovie <- function(rep){
thisMOVIE_DIR <- sprintf("%s\\rep%04d",dirs$MOVIE_DIR2,rep)
if(is.na(file.info(thisMOVIE_DIR)[1,"isdir"])) dir.create(thisMOVIE_DIR)
thisFIGS_DIR <- sprintf("%s\\rep%04d",dirs$FIGS_DIR2,rep)
setwd(thisFIGS_DIR)
#### remove figures that are not part of this simulation?
fileyrs <- as.numeric(unlist(regmatches(list.files(), gregexpr("[[:digit:]]+", list.files()))))
notthissim <- fileyrs > NYEARS
toremove <- list.files()[notthissim]
if(any(notthissim)) file.remove(toremove)
## NOTE: need command line like this: ffmpeg -f image2 -framerate 2 -i AbundanceFig_year%03d.tif -s 500x500 test.avi -y
# MAKING THE REAL MOVIE HERE! USE IMAGE MAGICK AND FFMPEG SOFTWARE  (https://blogazonia.wordpress.com/2016/01/19/making-a-movie-with-r/)
# create the movie
cmd_abundmov <- paste0("ffmpeg -f image2 -framerate 2 -i AbundanceFig_year%03d.tif -s 500x500 ",
sprintf("%s\\AbundanceMovie.avi",thisMOVIE_DIR)," -y")
cmd_evolutionmov <- paste0("ffmpeg -f image2 -framerate 2 -i AllGenesFreqFig_year%03d.tif -s 800x500 ",
sprintf("%s\\EvolutionMovie.avi",thisMOVIE_DIR)," -y")
cmd_plaguemov <- paste0("ffmpeg -f image2 -framerate 2 -i PlagueFig_year%03d.tif -s 500x500 ",
sprintf("%s\\PlagueMovie.avi",thisMOVIE_DIR)," -y")
#sink(tempfile())
system(cmd_abundmov,ignore.stdout = T,ignore.stderr = T)
system(cmd_evolutionmov,ignore.stdout = T,ignore.stderr = T)
system(cmd_plaguemov,ignore.stdout = T,ignore.stderr = T)
#sink()
}  ### end function "MakeMovie"
rep%%1==0
if(rep%%1==0) MakeMovie(rep)
