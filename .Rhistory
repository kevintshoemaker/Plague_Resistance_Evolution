UserParams$Genetics$INITFREQ
i=1
for(i in 1:UserParams$Genetics$NGENES){
name <- sprintf("gene%s",i)
temp <- rnorm(nPatches,UserParams$Genetics$INITFREQ[1],UserParams$Genetics$INITFREQ_SD[1])
temp <- ifelse(temp<0,0.01,temp)
InitFreqList[[name]] <- reclassify(patchIDRaster,rcl=cbind(c(1:nPatches),temp))
}
plot(InitFreqList[["gene1"]])
InitFreqList <- stack(InitFreqList)
plot(InitFreqList)
ngenes
plot(InitFreqList)
UserParams$Genetics$RESISTANCE_SCENARIOS
ngenes=UserParams$Genetics$NGENES
nargs <- ngenes
arguments <- paste("X",c(1:nargs),sep="")
arguments
arguments2 <- paste(arguments, collapse=",")
arguments3 <- paste(arguments, collapse="*")
expression <- sprintf("function(%s) %s ",arguments2,arguments3)
arguments2
arguments3
UserParams$Genetics$RESISTANCE_SCENARIOS
temp <- numeric(UserParams[["Genetics"]]$NGENES)
temp
temp <- numeric(3)
names(temp) <- c("2x(rr)","1x(rs)","0x(ss)")
temp
UserParams[["Genetics"]]$DOMINANCE <- list()
UserParams[["Genetics"]]$DOMINANCE[[1]] <- temp
UserParams[["Genetics"]]$DOMINANCE[[1]] <- c(1,1,0)
UserParams[["Genetics"]]$DOMINANCE
temp <- matrix(0,nrow=UserParams[["Genetics"]]$NGENES,ncol=3)
colnames(temp) <- c("2x(rr)","1x(rs)","0x(ss)")
temp
UserParams[["Genetics"]]$DOMINANCE <- temp
UserParams[["Genetics"]]$DOMINANCE
temp <- matrix(0,nrow=UserParams[["Genetics"]]$NGENES,ncol=3)
colnames(temp) <- c("2x(rr)","1x(rs)","0x(ss)")
UserParams[["Genetics"]]$DOMINANCE <- temp
UserParams[["Genetics"]]$DOMINANCE[1,] <- c(1,1,0)   # dominant
UserParams[["Genetics"]]$DOMINANCE[2,] <- c(1,0,0)  # recessive
UserParams[["Genetics"]]$DOMINANCE
resistfunc <- function(ngenes=UserParams$Genetics$NGENES){      # this function assumes that all factors are needed for resistance
nargs <- ngenes
arguments <- paste("X",c(1:nargs),sep="")
arguments2 <- paste(arguments, collapse=",")
arguments3 <- paste(arguments, collapse="*")
expression <- sprintf("function(%s) %s ",arguments2,arguments3)
eval(parse(text=expression))
}
resistfunc(3)
newlist <- list()
gene=1
FreqList
FreqList = InitFreqList
UserParams
FreqList^2
name = sprintf("gene%s",gene)
name
FreqList[[gene]]
FreqList[[gene]]^2
(2*FreqList[[gene]]*(1-FreqList[gene]))
2*FreqList[[gene]]
(1-FreqList[gene])
(2*FreqList[[gene]]*(1-FreqList[[gene]]))
for(gene in 1:UserParams$Genetics$NGENES){
name = sprintf("gene%s",gene)
newlist =  FreqList[[gene]]^2 * UserParams$Genetics$DOMINANCE[gene,1] +
(2*FreqList[[gene]]*(1-FreqList[[gene]])) * UserParams$Genetics$DOMINANCE[gene,2]
}
newlist <- FreqList
FreqList[[name]]
newlist <- FreqList
gene=1
for(gene in 1:UserParams$Genetics$NGENES){
name = sprintf("gene%s",gene)
newlist[[name]] =  FreqList[[name]]^2 * UserParams$Genetics$DOMINANCE[gene,1] +
(2*FreqList[[name]]*(1-FreqList[[name]])) * UserParams$Genetics$DOMINANCE[gene,2]
}
plot(newlist)
newlist <- FreqList
gene=1
for(gene in 1:UserParams$Genetics$NGENES){
name = sprintf("gene%s",gene)
name2 = sprintf("factor%s",gene)
newlist[[name2]] =  FreqList[[name]]^2 * UserParams$Genetics$DOMINANCE[gene,1] +
(2*FreqList[[name]]*(1-FreqList[[name]])) * UserParams$Genetics$DOMINANCE[gene,2]
}
plot(newlist)
newlist <- list()
newlist <- list()
gene=1
for(gene in 1:UserParams$Genetics$NGENES){
name = sprintf("gene%s",gene)
name2 = sprintf("factor%s",gene)
newlist[[name2]] =  FreqList[[name]]^2 * UserParams$Genetics$DOMINANCE[gene,1] +
(2*FreqList[[name]]*(1-FreqList[[name]])) * UserParams$Genetics$DOMINANCE[gene,2]
}
newlist <- stack(newlist)
plot(newlist)
Gene2Factor <- function(UserParams, FreqList = InitFreqList){
newlist <- list()
gene=1
for(gene in 1:UserParams$Genetics$NGENES){
name = sprintf("gene%s",gene)
name2 = sprintf("factor%s",gene)
newlist[[name2]] =  FreqList[[name]]^2 * UserParams$Genetics$DOMINANCE[gene,1] +
(2*FreqList[[name]]*(1-FreqList[[name]])) * UserParams$Genetics$DOMINANCE[gene,2]
}
newlist <- stack(newlist)
return(newlist)
}
Gene2Factor <- function(UserParams, FreqList = InitFreqList){
newlist <- list()
gene=1
for(gene in 1:UserParams$Genetics$NGENES){
name = sprintf("gene%s",gene)
name2 = sprintf("factor%s",gene)
newlist[[name2]] =  FreqList[[name]]^2 * UserParams$Genetics$DOMINANCE[gene,1] +
(2*FreqList[[name]]*(1-FreqList[[name]])) * UserParams$Genetics$DOMINANCE[gene,2]
}
newlist <- stack(newlist)
return(newlist)
}
resistfunc <- function(ngenes=UserParams$Genetics$NGENES){      # this function assumes that all factors are needed for resistance
nargs <- ngenes
arguments <- paste("X",c(1:nargs),sep="")
arguments2 <- paste(arguments, collapse=",")
arguments3 <- paste(arguments, collapse="*")
expression <- sprintf("function(%s) %s ",arguments2,arguments3)
eval(parse(text=expression))
}
UserParams$Genetics$RESISTANCE_SCENARIOS
FactorList <- Gene2Factor(UserParams,FreqList)
temp <- overlay(FactorList,fun=fungen(NGENES)) #round(InitDensRaster*InitFreq[["gene1"]])   # freq of resist for each grid cell
FactorList
fungen=resistfunc
temp <- overlay(FactorList,fun=fungen(NGENES)) #round(InitDensRaster*InitFreq[["gene1"]])   # freq of resist for each grid cell
FactorList <- Gene2Factor(UserParams,FreqList)
FreqList=InitFreqList
fungen=resistfunc
temp <- overlay(FactorList,fun=fungen(UserParams$Genetics$NGENES)) #round(InitDensRaster*InitFreq[["gene1"]])   # freq of resist for each grid cell
ResistRaster <- overlay(DensRaster,temp,fun=function(x,y) x*y)      # numbers of resistant individuals in each grid cell
DensRaster=InitDensRaster
ResistRaster <- overlay(DensRaster,temp,fun=function(x,y) x*y)      # numbers of resistant individuals in each grid cell
DensRaster=InitDensRaster
FreqList = InitFreqList
newlist <- list()
gene=1
reslist <- list()
suslist <- list()
gene=1
name = sprintf("gene%s",gene)
name
FactorList=FactorList
FactorList
reslist[[name]] <- reclassify(DensRaster[[name]],rcl=c(-Inf,Inf,0))
DensRaster[[name]]
DensRaster=InitDensRaster
reslist[[name]] <- reclassify(FreqList[[name]],rcl=c(-Inf,Inf,0))
reslist[[name]]
serParams$Genetics$DOMINANCE[gene,1]
UserParams$Genetics$DOMINANCE[gene,1]
suslist[[name]] <- 2*DensRaster*FreqList[[name]]
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
reslist[[name]] <- reclassify(FreqList[[name]],rcl=c(-Inf,Inf,0))
reslist <- list()
suslist <- list()
temp <- DensRaster*F
gene=1
name = sprintf("gene%s",gene)
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
reslist[[name]] <- reclassify(FreqList[[name]],rcl=c(-Inf,Inf,0))
reslist[[name]] <- reslist[[name]] + (2 * ResistRaster * UserParams$Genetics$DOMINANCE[gene,1]) + (ResistRaster * UserParams$Genetics$DOMINANCE[gene,2])
reslist[[name]]
suslist[[name]] <- suslist[[name]] - reslist[[name]]  # number of resistance alleles remaining in the susceptible population
suslist[[name]]
UserParams$Genetics$DOMINANCE[gene,1]
(2*ResistRaster) * FreqList^2 * UserParams$Genetics$DOMINANCE[gene,1]
name = sprintf("gene%s",gene)
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
reslist[[name]] <- reclassify(FreqList[[name]],rcl=c(-Inf,Inf,0))
reslist[[name]] <- reslist[[name]] + (2*ResistRaster) * FreqList^2 * UserParams$Genetics$DOMINANCE[gene,1] +
(ResistRaster) * (2*FreqList[[name]]*(1-FreqList[[name]])) * UserParams$Genetics$DOMINANCE[gene,2]
reslist[[name]]
suslist[[name]] <- suslist[[name]] - reslist[[name]]  # number of resistance alleles remaining in the susceptible population
suslist[[name]]
reslist[[name]] <- reslist[[name]]/(2*ResistRaster)  # allele frequency in res pop
reslist[[name]]
suslist[[name]] <- suslist[[name]]/(2*(DensRaster-ResistRaster))  # freq in sus pop
suslist[[name]]
reslist <- list()
suslist <- list()
temp <- DensRaster*F
gene=1
name = sprintf("gene%s",gene)
DensRaster
FreqList[[name]]
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
suslist[[name]]
reslist[[name]] <- reclassify(FreqList[[name]],rcl=c(-Inf,Inf,0))
reslist[[name]]
2*ResistRaster
reslist[[name]] <- reslist[[name]] + (2*ResistRaster) * FreqList[[name]]^2 * UserParams$Genetics$DOMINANCE[gene,1] +
(ResistRaster) * (2*FreqList[[name]]*(1-FreqList[[name]])) * UserParams$Genetics$DOMINANCE[gene,2]
suslist[[name]] <- suslist[[name]] - reslist[[name]]  # number of resistance alleles remaining in the susceptible population
suslist[[name]]
reslist[[name]] <
reslist[[name]]
reslist[[name]] <- reslist[[name]]/(2*ResistRaster)  # allele frequency in res pop
suslist[[name]] <- suslist[[name]]/(2*(DensRaster-ResistRaster))  # freq in sus pop
reslist[[name]]
suslist[[name]]
DensRaster-ResistRaster
reslist <- list()
suslist <- list()
temp <- DensRaster*F
gene=1
name = sprintf("gene%s",gene)
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
suslist[[name]]
2*ResistRaster
ResistRaster
reslist[[name]]
reslist <- list()
suslist <- list()
temp <- DensRaster*F
gene=1
name = sprintf("gene%s",gene)
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
reslist[[name]] <- reclassify(FreqList[[name]],rcl=c(-Inf,Inf,0))
name = sprintf("gene%s",gene)
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
reslist[[name]] <- reclassify(FreqList[[name]],rcl=c(-Inf,Inf,0))
reslist <- list()
suslist <- list()
temp <- DensRaster*F
gene=2
name = sprintf("gene%s",gene)
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
reslist[[name]] <- reclassify(FreqList[[name]],rcl=c(-Inf,Inf,0))
reslist[[name]]
reslist[[name]] <- reslist[[name]] + (2*DensRaster) * FreqList[[name]]^2 * UserParams$Genetics$DOMINANCE[gene,1] +
(DensRaster) * (2*FreqList[[name]]*(1-FreqList[[name]])) * UserParams$Genetics$DOMINANCE[gene,2]
suslist[[name]] <- suslist[[name]] - reslist[[name]]  # number of resistance alleles remaining in the susceptible population
reslist[[name]] <- reslist[[name]]/(2*ResistRaster)  # allele frequency in res pop
reslist
reslist <- list()
suslist <- list()
temp <- DensRaster*F
gene=2
name = sprintf("gene%s",gene)
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
reslist[[name]] <- reclassify(FreqList[[name]],rcl=c(-Inf,Inf,0))
reslist[[name]]
(2*DensRaster)
FreqList[[name]]^2
(2*DensRaster) * FreqList[[name]]^2 * UserParams$Genetics$DOMINANCE[gene,1]
(DensRaster) * (2*FreqList[[name]]*(1-FreqList[[name]])) * UserParams$Genetics$DOMINANCE[gene,2]
ResistRaster
PerHet <- 1/(((2/FreqList)-2)+1)
PerHet
PerHet <- ((2/FreqList)-2)/(((2/FreqList)-2)+1)    # percent
PerHet
1-FreqList^2-(1-FreqList)^2
reslist <- list()
suslist <- list()
temp <- DensRaster*F
gene=2
PerHet <- ((2/FreqList)-2)/(((2/FreqList)-2)+1)    # percent heterozygotes for dominant factors in resistant pool
name = sprintf("gene%s",gene)
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
reslist[[name]] <- reclassify(FreqList[[name]],rcl=c(-Inf,Inf,0))
sum(UserParams$Genetics$DOMINANCE[gene,])==2
gene=1
sum(UserParams$Genetics$DOMINANCE[gene,])==2
reslist[[name]] <- reslist[[name]] + (2*ResistRaster) * (1-PerHet[[name]])  +
ResistRaster*PerHet[[name]]
suslist[[name]] <- suslist[[name]] - reslist[[name]]
reslist <- list()
suslist <- list()
temp <- DensRaster*F
gene=1
PerHet <- ((2/FreqList)-2)/(((2/FreqList)-2)+1)    # percent heterozygotes for dominant factors in resistant pool
name = sprintf("gene%s",gene)
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
reslist[[name]] <- reclassify(FreqList[[name]],rcl=c(-Inf,Inf,0))
if(sum(UserParams$Genetics$DOMINANCE[gene,])==2){   # if fully dominant
reslist[[name]] <- reslist[[name]] + (2*ResistRaster) * (1-PerHet[[name]])  +
ResistRaster*PerHet[[name]]
suslist[[name]] <- suslist[[name]] - reslist[[name]]  # number of resistance alleles remaining in the susceptible population
}else{
reslist[[name]] <- reslist[[name]] + (2*ResistRaster) * UserParams$Genetics$DOMINANCE[gene,1] +
(ResistRaster) * UserParams$Genetics$DOMINANCE[gene,2]
suslist[[name]] <- suslist[[name]] - reslist[[name]]  # number of resistance alleles remaining in the susceptible population
}
reslist[[name]] <- reslist[[name]]/(2*ResistRaster)  # allele frequency in res pop
reslist[[name]]
suslist[[name]] <- suslist[[name]]/(2*(DensRaster-ResistRaster))  # freq in sus pop
suslist[[name]]
library("raster")
library("secr")
library("igraph")
KEVIN_LAPTOP <- TRUE # FALSE #
KEVIN_OFFICEPC <- FALSE # TRUE #
KEVIN_LAPTOP <- TRUE # FALSE #
KEVIN_OFFICEPC <- FALSE # TRUE #
if(KEVIN_LAPTOP) BASE_DIR <- "C:\\Users\\Kevin\\Dropbox\\PlagueModeling\\ResistanceEvolution"
if(KEVIN_OFFICEPC) BASE_DIR <- "E:\\Dropbox\\PlagueModeling\\ResistanceEvolution"
if(KEVIN_LAPTOP) GIT_DIR <- "C:\\Users\\Kevin\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_OFFICEPC) GIT_DIR <- "E:\\GIT\\Plague_Resistance_Evolution"
############
## SET UP WORKSPACE (define global variables)
############
# RSCRIPT_DIR <- sprintf("%s\\Rscripts",GIT_DIR)
DATA_DIR <- sprintf("%s\\Data",BASE_DIR)
FIGS_DIR <- sprintf("%s\\RawFigs",BASE_DIR)
setwd(DATA_DIR)
#####################
# LOAD FUNCTIONS
#####################
setwd(GIT_DIR)
InitFreqList <- list()
UserParams$Genetics$INITFREQ
i=1
for(i in 1:UserParams$Genetics$NGENES){
name <- sprintf("gene%s",i)
temp <- rnorm(nPatches,UserParams$Genetics$INITFREQ[1],UserParams$Genetics$INITFREQ_SD[1])
temp <- ifelse(temp<0,0.01,temp)
InitFreqList[[name]] <- reclassify(patchIDRaster,rcl=cbind(c(1:nPatches),temp))
}
plot(InitFreqList[["gene1"]])
InitFreqList <- stack(InitFreqList)
plot(InitFreqList)
plot(InitFreqList)
Gene2Factor <- function(UserParams, FreqList = InitFreqList){
newlist <- list()
gene=1
for(gene in 1:UserParams$Genetics$NGENES){
name = sprintf("gene%s",gene)
name2 = sprintf("factor%s",gene)
newlist[[name2]] =  FreqList[[name]]^2 * UserParams$Genetics$DOMINANCE[gene,1] +
(2*FreqList[[name]]*(1-FreqList[[name]])) * UserParams$Genetics$DOMINANCE[gene,2]
}
newlist <- stack(newlist)
return(newlist)
}
UserParams
DensRaster=InitDensRaster
ResistRaster=ResistRaster
FactorList
FreqList = InitFreqList
reslist <- list()
suslist <- list()
gene=1
PerHet <- ((2/FreqList)-2)/(((2/FreqList)-2)+1)    # percent heterozygotes for dominant factors in resistant pool
gene
name = sprintf("gene%s",gene)
name
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
reslist[[name]] <- reclassify(FreqList[[name]],rcl=c(-Inf,Inf,0))
sum(UserParams$Genetics$DOMINANCE[gene,])==2
reslist[[name]] <- reslist[[name]] + (2*ResistRaster) * (1-PerHet[[name]])  +
ResistRaster*PerHet[[name]]
reslist[[name]]
suslist[[name]] <- suslist[[name]] - reslist[[name]]  # number of resistance alleles remaining in the susceptible population
reslist[[name]] <- reslist[[name]]/(2*ResistRaster)  # allele frequency in res pop
suslist[[name]] <- suslist[[name]]/(2*(DensRaster-ResistRaster))  # freq in sus pop
?assign
Gene2Factor <- function(UserParams, FreqList = InitFreqList){
newlist <- list()
gene=1
for(gene in 1:UserParams$Genetics$NGENES){
name = sprintf("gene%s",gene)
name2 = sprintf("factor%s",gene)
newlist[[name2]] =  FreqList[[name]]^2 * UserParams$Genetics$DOMINANCE[gene,1] +
(2*FreqList[[name]]*(1-FreqList[[name]])) * UserParams$Genetics$DOMINANCE[gene,2]
}
newlist <- stack(newlist)
return(newlist)
}
# this function takes gene frequencies and abundances and converts to resistant freqs and susceptible freqs...
StrFreqFunc <- function(UserParams,DensRaster=InitDensRaster,ResistRaster=ResistRaster,FreqList = InitFreqList){
reslist <- list()
suslist <- list()
#  temp <- DensRaster*F
gene=1
PerHet <- ((2/FreqList)-2)/(((2/FreqList)-2)+1)    # percent heterozygotes for dominant factors in resistant pool
for(gene in 1:UserParams$Genetics$NGENES){
name = sprintf("gene%s",gene)
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
reslist[[name]] <- reclassify(FreqList[[name]],rcl=c(-Inf,Inf,0))
# number of resistance alleles in the resistant pool for each gene
if(sum(UserParams$Genetics$DOMINANCE[gene,])==2){   # if fully dominant
reslist[[name]] <- reslist[[name]] + (2*ResistRaster) * (1-PerHet[[name]])  +
ResistRaster*PerHet[[name]]
suslist[[name]] <- suslist[[name]] - reslist[[name]]  # number of resistance alleles remaining in the susceptible population
}else{
reslist[[name]] <- reslist[[name]] + (2*ResistRaster) * UserParams$Genetics$DOMINANCE[gene,1] +
(ResistRaster) * UserParams$Genetics$DOMINANCE[gene,2]
suslist[[name]] <- suslist[[name]] - reslist[[name]]  # number of resistance alleles remaining in the susceptible population
}
reslist[[name]] <- reslist[[name]]/(2*ResistRaster)  # allele frequency in res pop
suslist[[name]] <- suslist[[name]]/(2*(DensRaster-ResistRaster))  # freq in sus pop
}
reslist <- stack(reslist)
suslist <- stack(suslist)
assign(x="reslist",value=reslist, envir = .GlobalEnv)   # assign the variable to the global environment
assign(x="suslist",value=suslist, envir = .GlobalEnv)   # assign the variable to the global environment
}
resistfunc <- function(ngenes=UserParams$Genetics$NGENES){      # this function assumes that all factors are needed for resistance
nargs <- ngenes
arguments <- paste("X",c(1:nargs),sep="")
arguments2 <- paste(arguments, collapse=",")
arguments3 <- paste(arguments, collapse="*")
expression <- sprintf("function(%s) %s ",arguments2,arguments3)
eval(parse(text=expression))
}
UserParams$Genetics$RESISTANCE_SCENARIOS
UserParams$Genetics$RESISTANCE_SCENARIOS[[1]]
IsResistant <- function(DensRaster=InitDensRaster,FreqList=InitFreqList,fungen=resistfunc){
FactorList <- Gene2Factor(UserParams,FreqList)
temp <- overlay(FactorList,fun=fungen(UserParams$Genetics$NGENES)) #round(InitDensRaster*InitFreq[["gene1"]])   # freq of resist for each grid cell
ResistRaster <- overlay(DensRaster,temp,fun=function(x,y) x*y)      # numbers of resistant individuals in each grid cell
StrFreqRaster <- overlay(DensRaster,FreqList,fun=StrFreqFunc)
return(ResistRaster)
}
FCfunc <- function(ngenes){   # assume that fitness costs are simply additive
nargs <- ngenes
arguments <- paste("X",c(1:nargs),sep="")
arguments2 <- paste(arguments, collapse=",")
arguments3 <- paste(paste("FITNESS_COST[",c(1:ngenes),"]*",arguments,sep=""),collapse="+")
#FITNESS_COST[1]*X1 + FITNESS_COST[2]*X2
expression <- sprintf("function(%s) %s ",arguments2,arguments3)
eval(parse(text=expression))
}
FitnessCost <- function(FreqList=InitFreqList){
FCraster <- overlay(FreqList,fun=FCfunc(NGENES))  # degree of fitness cost
return(FCraster)
}
InitDensRaster2 <- reclassify(patchIDRaster,rcl=c(-Inf,Inf,0))    # for testing
ndx <- sample(which(!is.na(InitDensRaster2@data@values)),size=3)
InitDensRaster2[ndx] <- 1000   # initialize population in random locations
InitDensRaster <- InitDensRaster2
# use information on frequencies of resistance factors to struture population into resistance categories
GetStructuredPop <- function(DensRaster=InitDensRaster,FreqList=InitFreqList){
Pop <- list()
Pop[["resistant"]] <- IsResistant(DensRaster,FreqList)      # structure by susceptible and resistant.
Pop[["susceptible"]] <- DensRaster - Pop[["resistant"]]
Pop <- stack(Pop)
return(Pop)
}
PopArray <- GetStructuredPop(InitDensRaster)
InitDensRaster
InitFreqList
IsResistant
fungen=resistfunc
FactorList <- Gene2Factor(UserParams,FreqList)
temp <- overlay(FactorList,fun=fungen(UserParams$Genetics$NGENES)) #round(InitDensRaster*InitFreq[["gene1"]])   # freq of resist for each grid cell
ResistRaster <- overlay(DensRaster,temp,fun=function(x,y) x*y)      # numbers of resistant individuals in each grid cell
StrFreqRaster <- overlay(DensRaster,FreqList,fun=StrFreqFunc)
StrFreqFunc
StrFreqFunc(UserParams,DensRaster,ResistRaster,FreqList)
IsResistant <- function(DensRaster=InitDensRaster,FreqList=InitFreqList,fungen=resistfunc){
FactorList <- Gene2Factor(UserParams,FreqList)
temp <- overlay(FactorList,fun=fungen(UserParams$Genetics$NGENES)) #round(InitDensRaster*InitFreq[["gene1"]])   # freq of resist for each grid cell
ResistRaster <- overlay(DensRaster,temp,fun=function(x,y) x*y)      # numbers of resistant individuals in each grid cell
StrFreqFunc(UserParams,DensRaster,ResistRaster,FreqList) # returns "suslist" and "reslist"
return(ResistRaster)
}
InitDensRaster2 <- reclassify(patchIDRaster,rcl=c(-Inf,Inf,0))    # for testing
ndx <- sample(which(!is.na(InitDensRaster2@data@values)),size=3)
InitDensRaster2[ndx] <- 1000   # initialize population in random locations
InitDensRaster <- InitDensRaster2
PopArray <- GetStructuredPop(InitDensRaster)
plot(PopArray)
PlagueRaster_template <- reclassify(patchIDRaster,rcl=c(-Inf,Inf,0))
PlagueRaster <- doPlague(PlagueRaster=PlagueRaster_template, PopArray=reclassify(patchIDRaster,rcl=c(-Inf,Inf,0)))
doPlague <- function(UserParams,PlagueRaster=PlagueRaster,PopArray=PopArray){
nPlagueNeighbors <- focal(PlagueRaster, w=matrix(1, nc=UserParams$Dispersal$MAXDISPERSAL_CELLS, nr=UserParams$Dispersal$MAXDISPERSAL_CELLS),na.rm=T)
# plot(PlagueRaster)
# plot(nPlagueNeighbors)
newdf <- data.frame(
dens = PopArray@data@values,
plaguepops = nPlagueNeighbors@data@values
)
# newdf <- data.frame(
#   dens=0,
#   plaguepops=0
# )
prob <- plogis(as.numeric(predict(PlagueModel,newdata=newdf)))
ProbRaster <- setValues(PlagueRaster,values=prob)
ndx <- !is.na(prob)
prediction <- prob
prediction[ndx] <- rbinom(length(which(ndx)),1,prediction[ndx])
PlagueRaster <- setValues(PlagueRaster,values=prediction)   # set the plagueraster according to the statistical model
return(PlagueRaster)
}
PlagueRaster_template <- reclassify(patchIDRaster,rcl=c(-Inf,Inf,0))
PlagueRaster <- doPlague(UserParams,PlagueRaster=PlagueRaster_template, PopArray=reclassify(patchIDRaster,rcl=c(-Inf,Inf,0)))
plot(PlagueRaster)
plot(PlagueRaster)
PlagueRaster
plot(PlagueRaster)
graphics.off()
plot(PlagueRaster)
meansurv <- matrix(0,nrow=2,ncol=2)    # survival matrix (mean)
rownames(meansurv) <- c("resistant","susceptible")
colnames(meansurv) <- c("plague","noPlague")
meansurv["resistant","noPlague"] <- getSurvival("resistant","noPlague")
