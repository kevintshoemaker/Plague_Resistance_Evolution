NROWS <- 50
NCOLS <- 50
CELLAREA <- 1     # in hectares
CELLAREA_M2 <- CELLAREA*10000   # in square meters
CELLWIDTH <- sqrt(CELLAREA_M2)    # in meters
HALFCELLWIDTH <- CELLWIDTH/2
# define the clustering (degree to which species prefers to establish residence near members of its own kind)
# 1 is complete tendency to cluster in space. 0 is agnostic to members of its own kind. -1 is tendency to avoid members of its own kind
SNUGGLE <- 0.75
# define the percent of the landscape that is suitable
PER_SUITABLE <- 0.4
# define the maximum per-cell number of individuals
MAXDENS <- 100
MAXABUND <- MAXDENS * CELLAREA
# define the minimum per-cell number of individuals (provide a simple hard Allee effect)
MINDENS <- 15
MINABUND <- MINDENS*CELLAREA
# maximum survival under plague (limit to resistance)
RESISTANCE_LIMIT <- 0.75
# survival in a non_plague year (baseline survival for a naive population under no plague)
BASELINE_MEANSURV <- 0.6
# Variation in survival among years, expressed as CV
CV_SURVIVAL <- 0.2
# fecundity in a non-plague year (baseline, number of offspring per adult, not sex structured)
BASELINE_MEANFEC <- 3.2
# temporal variation in fecundity, expressed as a CV
CV_FECUNDITY <- 0.5
# minimum survival under plague (completely naive population)
BASELINE_PLAGUESURV <- 0.05
# mean change in the ability to withstand plague among the survivor population. (accounts for limited heritability)
SURVCHANGE_NEXTPLAGUE <- 0.05
# variation in the ability to survival plague among survivors, expressed as a SD [variation in standing genetic propensity to evolve resistance]
SD_SURVCHANGE_NEXTPLAGUE <- 0.05
# plague survival rate as a function of the resistance factors?? [TODO]
# change in the ability to survive in a non-plague year, as a percentage of the fitness benefit in a plague year (fitness costs to resistance)
FITNESS_COST <- 0.1
# maximum annual dispersal distance (m)
MAXDISPERSAL <- 500
# number of colony foci to establish (within the dispersal range) after colonies get below the low-density threshold
NFOCI <- 1
# rate of transmission (per-disperser probability of initiating an outbreak in recipient population) (under optimal plague conditions?)
PROB_TRANSMISSION <- 0
# dispersal rate (independent of density)
BASELINE_DISPERSAL <- 0.05
# dispersal distance (m) for plagued-out populations
MAXDISPERSAL_PLAGUE <- 1000   # individuals from plagued-out populations might move farther than normal population
# dispersal rate for plagued-out populations
PLAGUE_DISPERSAL <- 0.95     # individuals from plagued-out populations might have a higher tendency to move than normal populations- this can affect the spread of plague and the spread of plague resistance genes...
# minimum survival for non-plague populations
SURVMIN_NOPLAGUE <- 0.1
# maximum survival for non-plague populations
SURVMAX_NOPLAGUE <- 0.9
# minimum survival for plague populations
SURVMIN_PLAGUE <- 0.01
# maximum survival for plague populations
SURVMAX_PLAGUE <- 0.75
############
## SIMULATION CONTROLS
############
NYEARS <- 20
############
## SET BASE DIRECTORY
############
KEVIN_LAPTOP <- FALSE #   TRUE #
KEVIN_OFFICEPC <- TRUE # FALSE #
if(KEVIN_LAPTOP) BASE_DIR <- "C:\\Users\\Kevin\\Dropbox\\PlagueModeling\\ResistanceEvolution"
if(KEVIN_OFFICEPC) BASE_DIR <- "E:\\Dropbox\\PlagueModeling\\ResistanceEvolution"
############
## SET UP WORKSPACE (define global variables)
############
RSCRIPT_DIR <- sprintf("%s\\Rscripts",BASE_DIR)
DATA_DIR <- sprintf("%s\\Data",BASE_DIR)
FIGS_DIR <- sprintf("%s\\RawFigs",BASE_DIR)
setwd(DATA_DIR)
#####################
# LOAD FUNCTIONS
#####################
setwd(RSCRIPT_DIR)
source("PlagueResistanceEvolution_FUNCTIONS.R")
#####################
# INITIALIZE DISPERSAL   (for both plague and no plague... )
#####################
InitializeDispersal()
# plot(tempmask)
# ?make.grid
# ?make.mask
# ?randomHabitat
#
# plot(temppatches)
# attributes(temppatches)
# class(temppatches)
# names(temppatches)
# covariates(temppatches)$habitat
########################
# INITIALIZE LANDSCAPE
########################
InitializeLandscape(solid=F)   # generate patchmaps etc.
plot(patchRaster)
plot(patchIDRaster)
PlagueModel <- GetPlagueModel()    # for now, use fake plague model- will be a statistical model
InitDensRaster <- KRaster    # initialize abundance at carrying capacity
plot(InitDensRaster)
NextPlagueSurvRaster <- patchRaster*BASELINE_PLAGUESURV
plot(NextPlagueSurvRaster)
NextNormalSurvRaster <- patchRaster*BASELINE_MEANSURV
plot(NextNormalSurvRaster)
temp <- rnorm(nPatches,SURVCHANGE_NEXTPLAGUE,SD_SURVCHANGE_NEXTPLAGUE)
temp <- ifelse(temp<0,0.01,temp)
PlagueResistancePotentialRaster <- reclassify(patchIDRaster,rcl=cbind(c(1:nPatches),temp))    # deprecate? change to initial frequency?
plot(PlagueResistancePotentialRaster)
InitFreq <- list()
InitFreq[["gene1"]] <- PlagueResistancePotentialRaster
InitFreq <- stack(InitFreq)
IsResistant <- function(InitDensRaster,InitFreq){
ResistRaster <- round(InitDensRaster*InitFreq[["gene1"]])  # for now, a single gene model. Will be more complicated
return(ResistRaster)
}
InitDensRaster2 <- reclassify(patchIDRaster,rcl=c(-Inf,Inf,0))    # for testing
ndx <- sample(which(!is.na(InitDensRaster2@data@values)),size=3)
InitDensRaster2[ndx] <- 1000   # initialize population in random locations
InitDensRaster <- InitDensRaster2
PopArray <- list()
PopArray[["resistant"]] <- IsResistant(InitDensRaster,InitFreq)      # structure by susceptible and resistant.
PopArray[["susceptible"]] <- InitDensRaster - PopArray[["resistant"]]
PopArray <- stack(PopArray)
PlagueRaster_template <- reclassify(patchIDRaster,rcl=c(-Inf,Inf,0))
PlagueRaster <- doPlague(PlagueRaster=PlagueRaster_template, PopArray=reclassify(PatchIDRaster,rcl=c(-Inf,Inf,0)))
PlagueRaster <- doPlague(PlagueRaster=PlagueRaster_template, PopArray=reclassify(patchIDRaster,rcl=c(-Inf,Inf,0)))
plot(PlagueRaster)
rasterNames  <- c("PopArray","NextPlagueSurvRaster","NextNormalSurvRaster","PlagueResistancePotentialRaster")
t=0
t=t+1
deviate <- rnorm(1)   #determine if this is a good year or a bad year (for now, survival and fecundity are perfectly correlated)
cv=CV_SURVIVAL   # set up for using the getYearVariate function
names(PopArray)
surv <- numeric(2)
surv
names(surv) <- c("resistant","susceptible")
surv
surv$resistant
surv["resistant"]
cv
surv <- matrix(0,nrow=2,ncol=2)    # survival matrix
rownames(surv) <- c("resistant","susceptible")
colnames(surv) <- c("plague","noPlague")
surv
surv["resistant","noPlague"] <- SURVMAX_NOPLAGUE + deviate*(SURVMAX_NOPLAGUE*cv)
surv
SURVMAX_PLAGUE
BASELINE_MEANSURV
BASELINE_MEANSURV*SURVMAX_PLAGUE
SURVMIN_PLAGUE
BASELINE_MEANSURV
FITNESS_COST*(BASELINE_MEANSURV*SURVMAX_PLAGUE-SURVMIN_PLAGUE)
BASELINE_MEANSURV*SURVMAX_PLAGUE-SURVMIN_PLAGUE
getSurvival <- function(plagueStatus="plague",resistanceStatus="susceptible"){
if((plagueStatus=="noPlague")&(resistanceStatus=="susceptible")) survival = BASELINE_MEANSURV
if((plagueStatus=="noPlague")&(resistanceStatus=="resistant")) survival = BASELINE_MEANSURV - FITNESS_COST*(BASELINE_MEANSURV*SURVMAX_PLAGUE-SURVMIN_PLAGUE)
if((plagueStatus=="Plague")&(resistanceStatus=="susceptible")) survival = SURVMIN_PLAGUE
if((plagueStatus=="Plague")&(resistanceStatus=="resistant")) survival = BASELINE_MEANSURV*SURVMAX_PLAGUE
return(survival)
}
surv <- matrix(0,nrow=2,ncol=2)    # survival matrix (mean)
rownames(surv) <- c("resistant","susceptible")
colnames(surv) <- c("plague","noPlague")
getSurvival <- function(resistanceStatus="susceptible",plagueStatus="plague"){
if((plagueStatus=="noPlague")&(resistanceStatus=="susceptible")) survival = BASELINE_MEANSURV
if((plagueStatus=="noPlague")&(resistanceStatus=="resistant")) survival = BASELINE_MEANSURV - FITNESS_COST*(BASELINE_MEANSURV*SURVMAX_PLAGUE-SURVMIN_PLAGUE)
if((plagueStatus=="Plague")&(resistanceStatus=="susceptible")) survival = SURVMIN_PLAGUE
if((plagueStatus=="Plague")&(resistanceStatus=="resistant")) survival = BASELINE_MEANSURV*SURVMAX_PLAGUE
return(survival)
}
surv["resistant","noPlague"] <- getSurvival()
getSurvival("resistant","noPlague")
surv <- matrix(0,nrow=2,ncol=2)    # survival matrix (mean)
rownames(surv) <- c("resistant","susceptible")
colnames(surv) <- c("plague","noPlague")
surv["resistant","noPlague"] <- getSurvival("resistant","noPlague")
surv["resistant","Plague"] <-   getSurvival("resistant","Plague")
surv["susceptible","Plague"] <- getSurvival("susceptible","Plague")
surv["resistant","noPlague"] <- getSurvival("resistant","noPlague")
surv["resistant","noPlague"] <- getSurvival("resistant","noPlague")
surv["resistant","Plague"] <-   getSurvival("resistant","plague")
getSurvival <- function(resistanceStatus="susceptible",plagueStatus="plague"){
if((plagueStatus=="noPlague")&(resistanceStatus=="susceptible")) survival = BASELINE_MEANSURV
if((plagueStatus=="noPlague")&(resistanceStatus=="resistant")) survival = BASELINE_MEANSURV - FITNESS_COST*(BASELINE_MEANSURV*SURVMAX_PLAGUE-SURVMIN_PLAGUE)
if((plagueStatus=="plague")&(resistanceStatus=="susceptible")) survival = SURVMIN_PLAGUE
if((plagueStatus=="plague")&(resistanceStatus=="resistant")) survival = BASELINE_MEANSURV*SURVMAX_PLAGUE
return(survival)
}
rownames(surv) <- c("resistant","susceptible")
colnames(surv) <- c("plague","noPlague")
surv["resistant","noPlague"] <- getSurvival("resistant","noPlague")
surv["resistant","Plague"] <-   getSurvival("resistant","plague")
surv["susceptible","Plague"] <- getSurvival("susceptible","plague")
surv["susceptible","noPlague"] <- getSurvival("susceptible","noPlague")
surv["resistant","noPlague"] <- getSurvival("resistant","noPlague")
surv["resistant","plague"] <-   getSurvival("resistant","plague")
surv["susceptible","plague"] <- getSurvival("susceptible","plague")
surv["susceptible","noPlague"] <- getSurvival("susceptible","noPlague")
surv
meansurv <- matrix(0,nrow=2,ncol=2)    # survival matrix (mean)
rownames(meansurv) <- c("resistant","susceptible")
colnames(meansurv) <- c("plague","noPlague")
meansurv["resistant","noPlague"] <- getSurvival("resistant","noPlague")
meansurv["resistant","plague"] <-   getSurvival("resistant","plague")
meansurv["susceptible","plague"] <- getSurvival("susceptible","plague")
meansurv["susceptible","noPlague"] <- getSurvival("susceptible","noPlague")
meansurv
surv <- meansurv + deviate*(surv*cv)
surv
cv
deviate
BASELINE_PLAGUESURV_RESIST <- 0.5
getSurvival <- function(resistanceStatus="susceptible",plagueStatus="plague"){
if((plagueStatus=="noPlague")&(resistanceStatus=="susceptible")) survival = BASELINE_MEANSURV
if((plagueStatus=="noPlague")&(resistanceStatus=="resistant")) survival = BASELINE_MEANSURV - FITNESS_COST*(BASELINE_MEANSURV*BASELINE_PLAGUESURV_RESIST-SURVMIN_PLAGUE)
if((plagueStatus=="plague")&(resistanceStatus=="susceptible")) survival = BASELINE_PLAGUESURV
if((plagueStatus=="plague")&(resistanceStatus=="resistant")) survival = BASELINE_MEANSURV*BASELINE_PLAGUESURV_RESIST
return(survival)
}
meansurv <- matrix(0,nrow=2,ncol=2)    # survival matrix (mean)
rownames(meansurv) <- c("resistant","susceptible")
colnames(meansurv) <- c("plague","noPlague")
meansurv["resistant","noPlague"] <- getSurvival("resistant","noPlague")
meansurv["resistant","plague"] <-   getSurvival("resistant","plague")
meansurv["susceptible","plague"] <- getSurvival("susceptible","plague")
meansurv["susceptible","noPlague"] <- getSurvival("susceptible","noPlague")
meansurv
surv <- meansurv + deviate*(surv*cv)
surv
surv["resistant","plague"]
surv <- meansurv + deviate*(surv*cv)
SURVMAX_PLAGUE
surv["resistant","plague"]
min(SURVMAX_PLAGUE,surv["resistant","plague"])
SURVMIN_PLAGUE
SURVMAX_NOPLAGUE
SURVMIN_NOPLAGUE
surv[,"noPlague"] <- min(SURVMAX_NOPLAGUE,max(SURVMIN_NOPLAGUE,surv["resistant","plague"]))
getSurvival_thisYear <- function(meansurv=meansurv,deviate=deviate,cv=cv){
surv <- meansurv + deviate*(surv*cv)
surv[,"plague"] <- min(SURVMAX_PLAGUE,max(SURVMIN_PLAGUE,surv["resistant","plague"]))
surv[,"noPlague"] <- min(SURVMAX_NOPLAGUE,max(SURVMIN_NOPLAGUE,surv["resistant","plague"]))
return(surv)
}
thisPop <- PopArray
surv <- getSurvival_thisYear(meansurv,deviate,cv)
getSurvival <- function(resistanceStatus="susceptible",plagueStatus="plague"){
if((plagueStatus=="noPlague")&(resistanceStatus=="susceptible")) survival = BASELINE_MEANSURV
if((plagueStatus=="noPlague")&(resistanceStatus=="resistant")) survival = BASELINE_MEANSURV - FITNESS_COST*(BASELINE_MEANSURV*BASELINE_PLAGUESURV_RESIST-SURVMIN_PLAGUE)
if((plagueStatus=="plague")&(resistanceStatus=="susceptible")) survival = BASELINE_PLAGUESURV
if((plagueStatus=="plague")&(resistanceStatus=="resistant")) survival = BASELINE_MEANSURV*BASELINE_PLAGUESURV_RESIST
return(survival)
}
getSurvival_thisYear <- function(meansurv=meansurv,deviate=deviate,cv=cv){
surv <- meansurv + deviate*(surv*cv)
surv[,"plague"] <- min(SURVMAX_PLAGUE,max(SURVMIN_PLAGUE,surv["resistant","plague"]))
surv[,"noPlague"] <- min(SURVMAX_NOPLAGUE,max(SURVMIN_NOPLAGUE,surv["resistant","plague"]))
return(surv)
}
doSurvival <- function(PopArray=PopArray,PlagueRaster=PlagueRaster){
#thisPop <- getValues(PopArray)
thisPop <- PopArray
surv <- getSurvival_thisYear(meansurv,deviate,cv)
for(status in c("resistant","susceptible")){
thisPop[[status]][PlagueRaster==1] <- thisPop[[status]]*surv[status,"plague"]
thisPop[[status]][PlagueRaster==0] <- thisPop[[status]]*surv[status,"noPlague"]
}
# thisSurvRaster <- calc(NextNormalSurvRaster,fun=getYearVariate)     # first compute "normal" survival
# thisSurvRaster[PlagueRaster==1] <- NextPlagueSurvRaster[PlagueRaster==1]     #account for plague mortality
#
# #plot(PopArray)
# #plot(thisSurvRaster)
# # plot(NextNormalSurvRaster)
# #if(plagueyear[t]){
#
# thisPop <- thisPop*thisSurvRaster    # account for survival this year
# # plot(thisSurvRaster)
# # plot(thisPop)
# ###################
# # accout for change in fitness due to selection
#    #NextPlagueSurvRaster <- NextPlagueSurvRaster * thisPop
# NextPlagueSurvRaster[(PlagueRaster==1)&(thisPop>0)] <- NextPlagueSurvRaster[(PlagueRaster==1)&(thisPop>0)] +
#   PlagueResistancePotentialRaster[(PlagueRaster==1)&(thisPop>0)]              # account for development of plague resistance during plague
# NextPlagueSurvRaster[NextPlagueSurvRaster>SURVMAX_PLAGUE] <- SURVMAX_PLAGUE
#
# #  plot(NextPlagueSurvRaster)
#
# ###################
# # account for fitness costs due to selection
# NextNormalSurvRaster[(PlagueRaster==1)&(thisPop>0)] <- NextNormalSurvRaster[(PlagueRaster==1)&(thisPop>0)] -
#   PlagueResistancePotentialRaster[(PlagueRaster==1)&(thisPop>0)] * FITNESS_COST     # account for fitness cost during plague
# NextNormalSurvRaster[NextNormalSurvRaster<SURVMIN_NOPLAGUE] <- SURVMIN_NOPLAGUE
#
# #  plot(NextNormalSurvRaster)
#
# NextPlagueSurvRaster[(PlagueRaster==0)&(thisPop>0)] <- NextPlagueSurvRaster[(PlagueRaster==0)&(thisPop>0)] -
#   PlagueResistancePotentialRaster[(PlagueRaster==0)&(thisPop>0)] * FITNESS_COST   # account for fitness cost during no plague
# NextPlagueSurvRaster[NextPlagueSurvRaster<SURVMIN_PLAGUE] <- SURVMIN_PLAGUE
#
# #  plot(NextPlagueSurvRaster)
# # account for fitness costs due to selection
# NextNormalSurvRaster[(PlagueRaster==0)&(thisPop>0)] <- NextNormalSurvRaster[(PlagueRaster==0)&(thisPop>0)] +
#   PlagueResistancePotentialRaster[(PlagueRaster==0)&(thisPop>0)] * FITNESS_COST     # account for loss of resistance during no plague
# NextNormalSurvRaster[NextNormalSurvRaster>SURVMAX_NOPLAGUE] <- SURVMAX_NOPLAGUE
#
#
# #plot(NextNormalSurvRaster)
# # }else{
# #   thisPop <- thisPop*thisSurvRaster   # no demographic stochasticity here...
# #   #plot(thisPop)
# # }
#
# i=rasterNames[2]
# for(i in rasterNames){
#   if(i!="PopArray")
#   assign(i,eval(parse(text=i)),envir = .GlobalEnv)
# }
#
return(thisPop)
}
meansurv <- matrix(0,nrow=2,ncol=2)    # survival matrix (mean)
rownames(meansurv) <- c("resistant","susceptible")
colnames(meansurv) <- c("plague","noPlague")
meansurv["resistant","noPlague"] <- getSurvival("resistant","noPlague")
meansurv["resistant","plague"] <-   getSurvival("resistant","plague")
meansurv["susceptible","plague"] <- getSurvival("susceptible","plague")
meansurv["susceptible","noPlague"] <- getSurvival("susceptible","noPlague")
meansurv
rasterNames  <- c("PopArray","NextPlagueSurvRaster","NextNormalSurvRaster","PlagueResistancePotentialRaster")   # Deprecate?
deviate <- rnorm(1)   #determine if this is a good year or a bad year (for now, survival and fecundity are perfectly correlated)
cv=CV_SURVIVAL   # set up for using the getYearVariate function
PopArray <- doSurvival(PopArray=PopArray,PlagueRaster=PlagueRaster)
PopArray
PlagueRaster
thisPop <- PopArray
surv <- getSurvival_thisYear(meansurv,deviate,cv)
for(status in c("resistant","susceptible")){
thisPop[[status]][PlagueRaster==1] <- thisPop[[status]]*surv[status,"plague"]
thisPop[[status]][PlagueRaster==0] <- thisPop[[status]]*surv[status,"noPlague"]
}
doSurvival <- function(PopArray=PopArray,PlagueRaster=PlagueRaster){
#thisPop <- getValues(PopArray)
thisPop <- PopArray
surv <- getSurvival_thisYear(meansurv,deviate,cv)
for(status in c("resistant","susceptible")){
thisPop[[status]][PlagueRaster==1] <- thisPop[[status]][PlagueRaster==1]*surv[status,"plague"]
thisPop[[status]][PlagueRaster==0] <- thisPop[[status]][PlagueRaster==0]*surv[status,"noPlague"]
}
# thisSurvRaster <- calc(NextNormalSurvRaster,fun=getYearVariate)     # first compute "normal" survival
# thisSurvRaster[PlagueRaster==1] <- NextPlagueSurvRaster[PlagueRaster==1]     #account for plague mortality
#
# #plot(PopArray)
# #plot(thisSurvRaster)
# # plot(NextNormalSurvRaster)
# #if(plagueyear[t]){
#
# thisPop <- thisPop*thisSurvRaster    # account for survival this year
# # plot(thisSurvRaster)
# # plot(thisPop)
# ###################
# # accout for change in fitness due to selection
#    #NextPlagueSurvRaster <- NextPlagueSurvRaster * thisPop
# NextPlagueSurvRaster[(PlagueRaster==1)&(thisPop>0)] <- NextPlagueSurvRaster[(PlagueRaster==1)&(thisPop>0)] +
#   PlagueResistancePotentialRaster[(PlagueRaster==1)&(thisPop>0)]              # account for development of plague resistance during plague
# NextPlagueSurvRaster[NextPlagueSurvRaster>SURVMAX_PLAGUE] <- SURVMAX_PLAGUE
#
# #  plot(NextPlagueSurvRaster)
#
# ###################
# # account for fitness costs due to selection
# NextNormalSurvRaster[(PlagueRaster==1)&(thisPop>0)] <- NextNormalSurvRaster[(PlagueRaster==1)&(thisPop>0)] -
#   PlagueResistancePotentialRaster[(PlagueRaster==1)&(thisPop>0)] * FITNESS_COST     # account for fitness cost during plague
# NextNormalSurvRaster[NextNormalSurvRaster<SURVMIN_NOPLAGUE] <- SURVMIN_NOPLAGUE
#
# #  plot(NextNormalSurvRaster)
#
# NextPlagueSurvRaster[(PlagueRaster==0)&(thisPop>0)] <- NextPlagueSurvRaster[(PlagueRaster==0)&(thisPop>0)] -
#   PlagueResistancePotentialRaster[(PlagueRaster==0)&(thisPop>0)] * FITNESS_COST   # account for fitness cost during no plague
# NextPlagueSurvRaster[NextPlagueSurvRaster<SURVMIN_PLAGUE] <- SURVMIN_PLAGUE
#
# #  plot(NextPlagueSurvRaster)
# # account for fitness costs due to selection
# NextNormalSurvRaster[(PlagueRaster==0)&(thisPop>0)] <- NextNormalSurvRaster[(PlagueRaster==0)&(thisPop>0)] +
#   PlagueResistancePotentialRaster[(PlagueRaster==0)&(thisPop>0)] * FITNESS_COST     # account for loss of resistance during no plague
# NextNormalSurvRaster[NextNormalSurvRaster>SURVMAX_NOPLAGUE] <- SURVMAX_NOPLAGUE
#
#
# #plot(NextNormalSurvRaster)
# # }else{
# #   thisPop <- thisPop*thisSurvRaster   # no demographic stochasticity here...
# #   #plot(thisPop)
# # }
#
# i=rasterNames[2]
# for(i in rasterNames){
#   if(i!="PopArray")
#   assign(i,eval(parse(text=i)),envir = .GlobalEnv)
# }
#
return(thisPop)
}
InitDensRaster <- KRaster    # initialize abundance at carrying capacity
plot(InitDensRaster)
#######################
# INITIALIZE RESISTANCE FACTORS
#######################
# NFACTORS = 1
#
# ResistanceFactors <- list()
#
# for(i in 1:NFACTORS){
#   temp <- rnorm(nPatches,SURVCHANGE_NEXTPLAGUE,SD_SURVCHANGE_NEXTPLAGUE)
#   temp <- ifelse(temp<0,0,temp)
#   PlagueResistancePotentialRaster <- reclassify(patchIDRaster,rcl=cbind(c(1:nPatches),temp))
#   # plot(PlagueResistancePotentialRaster)
#   ResistanceFactors[[i]] <- PlagueResistancePotentialRaster   # now this represents something like allele frequency
# }
#
# ResistanceFactors <- stack(ResistanceFactors)
#######################
# INITIALIZE PLAGUE SURVIVAL
#######################
NextPlagueSurvRaster <- patchRaster*BASELINE_PLAGUESURV
plot(NextPlagueSurvRaster)
#######################
# INITIALIZE NORMAL SURVIVAL
#######################
NextNormalSurvRaster <- patchRaster*BASELINE_MEANSURV
plot(NextNormalSurvRaster)
#######################
# INITIALIZE PLAGUE RESISTANCE POTENTIAL
#######################
# NOTE: Some regions are more likely to evolve faster because they have greater percentages of those genes that can confer resistance.
temp <- rnorm(nPatches,SURVCHANGE_NEXTPLAGUE,SD_SURVCHANGE_NEXTPLAGUE)
temp <- ifelse(temp<0,0.01,temp)
PlagueResistancePotentialRaster <- reclassify(patchIDRaster,rcl=cbind(c(1:nPatches),temp))    # deprecate? change to initial frequency?
plot(PlagueResistancePotentialRaster)
InitFreq <- list()
InitFreq[["gene1"]] <- PlagueResistancePotentialRaster
InitFreq <- stack(InitFreq)
#####################
# FUNCTION FOR DETERMINING RESISTANCE STATUS FROM GENOTYPE
#####################
# ultimately this will be a function of underlying binary genotypes.
# e.g., if factor A is present in 20% of the pop and factor B is present in 5% of the pop and
# both factors are necessary for resistance, then 1% of the population will be resistant. This function could be complex.
#  i.e., either factors (A and B) OR (C and D) lead to resistance.
# this can be simple as long as we don't assume linkage or some such thing!
IsResistant <- function(InitDensRaster,InitFreq){
ResistRaster <- round(InitDensRaster*InitFreq[["gene1"]])  # for now, a single gene model. Will be more complicated
return(ResistRaster)
}
#####################
# INITIALIZE POPULATION
#####################
### Code block for pop starting from small loci
InitDensRaster2 <- reclassify(patchIDRaster,rcl=c(-Inf,Inf,0))    # for testing
ndx <- sample(which(!is.na(InitDensRaster2@data@values)),size=3)
InitDensRaster2[ndx] <- 1000   # initialize population in random locations
InitDensRaster <- InitDensRaster2
#PopArray2 <- InitDensRaster   # copy, for dispersal algorithm...
PopArray <- list()
PopArray[["resistant"]] <- IsResistant(InitDensRaster,InitFreq)      # structure by susceptible and resistant.
PopArray[["susceptible"]] <- InitDensRaster - PopArray[["resistant"]]
PopArray <- stack(PopArray)
plot(PopArray)
######################
# INITIALIZE PLAGUE PROCESS   [KTS: moving away from this and towards a statistical model]
######################
#  for now, assume that plague hits at the patch level, and is a random process.
# PROB_PLAGUE_YEAR <- 0.5 # probability that a plague event hits (landscape level?)   # for now, plague only hits one patch in a plague year
#
# plagueyear = as.logical(rbinom(NYEARS,1,PROB_PLAGUE_YEAR))
#
# plagueNow = floor(runif(NYEARS,1,nPatches+1)) * as.numeric(plagueyear)    ## which patch plagues out?
PlagueRaster_template <- reclassify(patchIDRaster,rcl=c(-Inf,Inf,0))
PlagueRaster <- doPlague(PlagueRaster=PlagueRaster_template, PopArray=reclassify(patchIDRaster,rcl=c(-Inf,Inf,0)))
plot(PlagueRaster)
####################
# INITIALIZE SURVIVAL
####################
meansurv <- matrix(0,nrow=2,ncol=2)    # survival matrix (mean)
rownames(meansurv) <- c("resistant","susceptible")
colnames(meansurv) <- c("plague","noPlague")
meansurv["resistant","noPlague"] <- getSurvival("resistant","noPlague")
meansurv["resistant","plague"] <-   getSurvival("resistant","plague")
meansurv["susceptible","plague"] <- getSurvival("susceptible","plague")
meansurv["susceptible","noPlague"] <- getSurvival("susceptible","noPlague")
meansurv
####################
# START LOOP THROUGH YEARS
####################
# names of important raster maps to save to file etc...
rasterNames  <- c("PopArray","NextPlagueSurvRaster","NextNormalSurvRaster","PlagueResistancePotentialRaster")   # Deprecate?
# t=which(plagueyear)[1]
t=0
t=t+1
deviate <- rnorm(1)   #determine if this is a good year or a bad year (for now, survival and fecundity are perfectly correlated)
cv=CV_SURVIVAL   # set up for using the getYearVariate function
PopArray <- doSurvival(PopArray=PopArray,PlagueRaster=PlagueRaster)
plot(PopArray)
plot(NextPlagueSurvRaster)
PlagueRaster = PlagueRaster
doDDSurvival <- function(){
thisPop <- PopArray
for(status in c("resistant","susceptible")){
thisPop[[status]][PopArray>(MAXABUND*1.15)] <- MAXABUND*1.15  # kill off all individuals in populations above the threshold
}
return(thisPop)
}
