slope.cost.plague <- stack(slope.cost.plague, slope.cost)
}
names(slope.cost.plague) <- paste("slopecost", years[3:length(years)], sep="")
slope.trans <- transition(ENV_COVARS$slope.c, mean, 8)
slope.cost.plague <- stack(r)
dist.noplague <- Pawn[[1]]
values(dist.noplague) <- 50000    # 500000? #Need a raster for distance if there's no plague in the area (put distance at 500km)
for (i in 2:(nlayers(Pawn)-1)){
#If there's no plague, give a really high cost-distance value (same as dist.noplague)
temp <- plagued[[i-1]]
values(temp) <- ifelse(values(temp)==0, NA, values(temp))
if(any(!is.na(values(temp))))
{plague.pts <- rasterToPoints(plagued[[i-1]], fun=function(x){x==1})[,1:2]  ##Need plagued areas as points
slope.cost <- accCost(slope.trans, plague.pts)
slope.cost <- resample(slope.cost, Pawn[[1]])} else {slope.cost <- dist.noplague}
slope.cost.plague <- stack(slope.cost.plague, slope.cost)
}
names(slope.cost.plague) <- paste("slopecost", years[3:length(years)], sep="")
plot(slope.cost.plague)
slope.trans <- transition(ENV_COVARS$slope.c, mean, 8)
slope.cost.plague <- stack(r)
dist.noplague <- Pawn[[1]]
values(dist.noplague) <- 50000    # 500000? #Need a raster for distance if there's no plague in the area (put distance at 500km)
for (i in 2:(nlayers(Pawn)-1)){
#If there's no plague, give a really high cost-distance value (same as dist.noplague)
temp <- plagued[[i-1]]
values(temp) <- ifelse(values(temp)==0, NA, values(temp))
if(any(!is.na(values(temp))))
{plague.pts <- rasterToPoints(plagued[[i-1]], fun=function(x){x==1})[,1:2]  ##Need plagued areas as points
slope.cost <- accCost(slope.trans, plague.pts)
slope.cost <- resample(slope.cost, Pawn[[1]])} else {slope.cost <- dist.noplague}
slope.cost.plague <- stack(slope.cost.plague, slope.cost)
}
names(slope.cost.plague) <- paste("slopecost", years[3:length(years)], sep="")
plot(slope.trans)
slope.trans <- transition(ENV_COVARS$slope.c, mean, 8)
slope.trans
slope.trans <- transition(ENV_COVARS$slope.c, mean, 8)   #
slope.cost.plague <- stack(r)
dist.noplague <- Pawn[[1]]
values(dist.noplague) <- 50000    # 500000? #Need a raster for distance if there's no plague in the area (put distance at 500km)
?accCost
plot(slope.cost.plague)
slope.trans <- transition(ENV_COVARS$slope.c, mean, 8)   #
slope.cost.plague <- stack(r)
dist.noplague <- Pawn[[1]]
values(dist.noplague) <- 50000    # 500000? #Need a raster for distance if there's no plague in the area (put distance at 500km)
for (i in 2:(nlayers(Pawn)-1)){
#If there's no plague, give a really high cost-distance value (same as dist.noplague)
temp <- plagued[[i-1]]
values(temp) <- ifelse(values(temp)==0, NA, values(temp))
if(any(!is.na(values(temp))))
{plague.pts <- rasterToPoints(plagued[[i-1]], fun=function(x){x==1})[,1:2]  ##Need plagued areas as points
slope.cost <- accCost(slope.trans, plague.pts)
slope.cost <- resample(slope.cost, Pawn[[1]])} else {slope.cost <- dist.noplague}
slope.cost.plague <- stack(slope.cost.plague, slope.cost)
}
names(slope.cost.plague) <- paste("slopecost", years[3:length(years)], sep="")
plot(slope.cost.plague)
prcp.WinSpr
ENV_COVARS$prcp.WinSpr
rfp1
rm(list=ls())
NYEARS <- 50
library(rgeos)
library(rgdal)
library(raster)
library(gdistance)
library(stringr)
KEVIN_LAPTOP <- FALSE #
KEVIN_OFFICEPC <- FALSE #
KEVIN_LAPTOP2 <- TRUE #
if(KEVIN_LAPTOP) GIT_DIR <- "C:\\Users\\Kevin\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_OFFICEPC) GIT_DIR <- "E:\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_LAPTOP2) GIT_DIR <- "C:\\Users\\KevinT_Kevin\\Documents\\GitHub\\Plague_Resistance_Evolution"
setwd(GIT_DIR)
source("PlagueResistanceEvolution_FUNCTIONS.R")
dirs <- SetUpDirectories()
rm(GIT_DIR)
setwd(dirs$plaguemod$DataDir)
load("randomForestModel_2017-05-12.RData")    # load rfp1    # DONE
setwd(dirs$plaguemod$CovDir)
load("EnvCov_smallPawnee.RData")
plot=F
setwd(dirs$plaguemod$DataDir)
load("PawneeColonies.RData")
plot=F
setwd(dirs$plaguemod$DataDir)
load("PawneeColonies.RData")
plot=F
if(plot){
plot(ENV_COVARS$NED.c)
plot(master.colony.Pawne,add=T)
}
site.years <- as.numeric(substr(names(master.colony.Pawne@data)[grep("y",names(master.colony.Pawne@data))],2,5))
r <- raster()   # template to create all other rasters for landscape of interest
extent(r) <- extent(ENV_COVARS$lat.c) #Using smaller extent from covariates (snippet of Pawnee)
res(r) <- c(100,100)
r <- raster::raster()   # template to create all other rasters for landscape of interest
extent(r) <- raster::extent(ENV_COVARS$lat.c) #Using smaller extent from covariates (snippet of Pawnee)
raster::res(r) <- c(100,100)
r
r <- raster::raster()   # template to create all other rasters for landscape of interest
extent(r) <- raster::extent(ENV_COVARS$lat.c) #Using smaller extent from covariates (snippet of Pawnee)
raster::res(r) <- c(100,100)
setwd(dirs$plaguemod$DataDir)
?crop
plot(master.colony.Pawne)
?crop
mcP <- raster::crop(master.colony.Pawne, raster::extent(r))
plot(mcP)
mcP@data
(ncol(mcP@data)
)
?rasterize
patchRaster <- raster::rasterize(mcP, r, background=NA, field=1)
plot(patchRaster)
mcP@data[,]
mcP@data[,1]
res(ENV_COVARS$lat.c)
rm(list=ls())
NYEARS <- 25
KEVIN_LAPTOP <- TRUE #  FALSE #
KEVIN_OFFICEPC <- FALSE # TRUE #
if(KEVIN_LAPTOP) GIT_DIR <- "C:\\Users\\Kevin\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_OFFICEPC) GIT_DIR <- "E:\\GIT\\Plague_Resistance_Evolution"
setwd(GIT_DIR)
rm(list=ls())
NYEARS <- 25
KEVIN_LAPTOP <- TRUE #  FALSE #
KEVIN_OFFICEPC <- FALSE # TRUE #
KEVIN_LAPTOP2 <- TRUE #
if(KEVIN_LAPTOP) GIT_DIR <- "C:\\Users\\Kevin\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_OFFICEPC) GIT_DIR <- "E:\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_LAPTOP2) GIT_DIR <- "C:\\Users\\KevinT_Kevin\\Documents\\GitHub\\Plague_Resistance_Evolution"
setwd(GIT_DIR)
source("PlagueResistanceEvolution_FUNCTIONS.R")
dirs <- SetUpDirectories()
num_cores <- detectCores() - 1   # for setting up cluster... leave one core free for windows background processes?
dmat <- list()
dmat[[1]] <- matrix(c(1,0,0, 1,0,0), nrow=2,ncol=3,byrow = T)  # dominant
dmat[[2]] <- matrix(c(1,1,0, 1,0,0), nrow=2,ncol=3,byrow = T)  # gene 1 dominant
dmat[[3]] <- matrix(c(1,0,0, 1,1,0), nrow=2,ncol=3,byrow = T)  # gene 2 dominant
dmat[[4]] <- matrix(c(1,1,0, 1,1,0), nrow=2,ncol=3,byrow = T)  # recessive
N_LHS_SAMPLES <- 20
masterDF <- MakeLHSSamples(nicheBreadthDir=dir,NicheBreadth)
dir
rm(list=ls())
NYEARS <- 50
KEVIN_LAPTOP <- FALSE #
KEVIN_OFFICEPC <- FALSE #
KEVIN_LAPTOP2 <- TRUE #
if(KEVIN_LAPTOP) GIT_DIR <- "C:\\Users\\Kevin\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_OFFICEPC) GIT_DIR <- "E:\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_LAPTOP2) GIT_DIR <- "C:\\Users\\KevinT_Kevin\\Documents\\GitHub\\Plague_Resistance_Evolution"
setwd(GIT_DIR)
source("PlagueResistanceEvolution_FUNCTIONS.R")
dirs <- SetUpDirectories()
num_cores <- parallel::detectCores() - 2   # for setting up cluster... leave one core free for windows background processes?
N_LHS_SAMPLES <- 4  # 200
masterDF <- MakeLHSSamples(add=FALSE)
masterDF
library(parallel)
library(doParallel)
rep=1
dmat <- list()
dmat[[1]] <- matrix(c(1,0,0, 1,0,0), nrow=2,ncol=3,byrow = T)  # dominant
dmat[[2]] <- matrix(c(1,1,0, 1,0,0), nrow=2,ncol=3,byrow = T)  # gene 1 dominant
dmat[[3]] <- matrix(c(1,0,0, 1,1,0), nrow=2,ncol=3,byrow = T)  # gene 2 dominant
dmat[[4]] <- matrix(c(1,1,0, 1,1,0), nrow=2,ncol=3,byrow = T)  # recessive
UserParams <- DefineUserParams(PER_SUITABLE=masterDF$PER_SUITABLE[rep],SNUGGLE=masterDF$SNUGGLE[rep],NFOCI=1,MAXDISPERSAL=500,BASELINE_DISPERSAL=0.05,
MAXDISPERSAL_PLAGUE = 1000,PLAGUE_DISPERSAL=masterDF$PLAGUE_DISPERSAL[rep], MAXDENS = masterDF$MAXDENS[rep],
MINDENS = 15, BASELINE_MEANSURV = 0.6, BASELINE_PLAGUESURV=masterDF$BASELINE_PLAGUESURV[rep],
BASELINE_PLAGUESURV_RESIST=0.5,BASELINE_MEANFEC=masterDF$BASELINE_MEANFEC[rep],
FITNESS_COST=rep(masterDF$FITNESS_COST[rep],2),INITFREQ=rep(masterDF$INITFREQ[rep],2),DOMINANCE=dmat[[masterDF$DOMINANCE[rep]]])
temp <- InitializeDispersal(UserParams)   # env
UserParams <- temp$UserParams    #get("UserParams",envir=env)
UserParams
raster::nrow(templateRaster)
100*100/10000
rm(list=ls())
NYEARS <- 50
KEVIN_LAPTOP <- FALSE #
KEVIN_OFFICEPC <- FALSE #
KEVIN_LAPTOP2 <- TRUE #
if(KEVIN_LAPTOP) GIT_DIR <- "C:\\Users\\Kevin\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_OFFICEPC) GIT_DIR <- "E:\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_LAPTOP2) GIT_DIR <- "C:\\Users\\KevinT_Kevin\\Documents\\GitHub\\Plague_Resistance_Evolution"
setwd(GIT_DIR)
source("PlagueResistanceEvolution_FUNCTIONS.R")
dirs <- SetUpDirectories()
num_cores <- parallel::detectCores() - 2   # for setting up cluster... leave one core free for windows background processes?
N_LHS_SAMPLES <- 4  # 200
masterDF <- MakeLHSSamples(add=FALSE)
dmat <- list()
dmat[[1]] <- matrix(c(1,0,0, 1,0,0), nrow=2,ncol=3,byrow = T)  # dominant
dmat[[2]] <- matrix(c(1,1,0, 1,0,0), nrow=2,ncol=3,byrow = T)  # gene 1 dominant
dmat[[3]] <- matrix(c(1,0,0, 1,1,0), nrow=2,ncol=3,byrow = T)  # gene 2 dominant
dmat[[4]] <- matrix(c(1,1,0, 1,1,0), nrow=2,ncol=3,byrow = T)  # recessive
UserParams <- DefineUserParams(PER_SUITABLE=masterDF$PER_SUITABLE[rep],SNUGGLE=masterDF$SNUGGLE[rep],NFOCI=1,MAXDISPERSAL=500,BASELINE_DISPERSAL=0.05,
MAXDISPERSAL_PLAGUE = 1000,PLAGUE_DISPERSAL=masterDF$PLAGUE_DISPERSAL[rep], MAXDENS = masterDF$MAXDENS[rep],
MINDENS = 15, BASELINE_MEANSURV = 0.6, BASELINE_PLAGUESURV=masterDF$BASELINE_PLAGUESURV[rep],
BASELINE_PLAGUESURV_RESIST=0.5,BASELINE_MEANFEC=masterDF$BASELINE_MEANFEC[rep],
FITNESS_COST=rep(masterDF$FITNESS_COST[rep],2),INITFREQ=rep(masterDF$INITFREQ[rep],2),DOMINANCE=dmat[[masterDF$DOMINANCE[rep]]])
rep=1
dmat <- list()
dmat[[1]] <- matrix(c(1,0,0, 1,0,0), nrow=2,ncol=3,byrow = T)  # dominant
dmat[[2]] <- matrix(c(1,1,0, 1,0,0), nrow=2,ncol=3,byrow = T)  # gene 1 dominant
dmat[[3]] <- matrix(c(1,0,0, 1,1,0), nrow=2,ncol=3,byrow = T)  # gene 2 dominant
dmat[[4]] <- matrix(c(1,1,0, 1,1,0), nrow=2,ncol=3,byrow = T)  # recessive
UserParams <- DefineUserParams(PER_SUITABLE=masterDF$PER_SUITABLE[rep],SNUGGLE=masterDF$SNUGGLE[rep],NFOCI=1,MAXDISPERSAL=500,BASELINE_DISPERSAL=0.05,
MAXDISPERSAL_PLAGUE = 1000,PLAGUE_DISPERSAL=masterDF$PLAGUE_DISPERSAL[rep], MAXDENS = masterDF$MAXDENS[rep],
MINDENS = 15, BASELINE_MEANSURV = 0.6, BASELINE_PLAGUESURV=masterDF$BASELINE_PLAGUESURV[rep],
BASELINE_PLAGUESURV_RESIST=0.5,BASELINE_MEANFEC=masterDF$BASELINE_MEANFEC[rep],
FITNESS_COST=rep(masterDF$FITNESS_COST[rep],2),INITFREQ=rep(masterDF$INITFREQ[rep],2),DOMINANCE=dmat[[masterDF$DOMINANCE[rep]]])
InitList <- DoInitialization(UserParams)  #BaseLandscape
rm(list=ls())
############
## SIMULATION CONTROLS
############
NYEARS <- 50
############
## SET GLOBAL VARS
############
KEVIN_LAPTOP <- FALSE #
KEVIN_OFFICEPC <- FALSE #
KEVIN_LAPTOP2 <- TRUE #
if(KEVIN_LAPTOP) GIT_DIR <- "C:\\Users\\Kevin\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_OFFICEPC) GIT_DIR <- "E:\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_LAPTOP2) GIT_DIR <- "C:\\Users\\KevinT_Kevin\\Documents\\GitHub\\Plague_Resistance_Evolution"
#####################
# LOAD FUNCTIONS
#####################
setwd(GIT_DIR)
source("PlagueResistanceEvolution_FUNCTIONS.R")
############
## SET UP WORKSPACE AND LOAD PACKAGES
############
dirs <- SetUpDirectories()
num_cores <- parallel::detectCores() - 2   # for setting up cluster... leave one core free for windows background processes?
############
## SAMPLE FROM LATIN HYPERCUBE
############
N_LHS_SAMPLES <- 4  # 200
masterDF <- MakeLHSSamples(add=FALSE)
rep=1
dmat <- list()
dmat[[1]] <- matrix(c(1,0,0, 1,0,0), nrow=2,ncol=3,byrow = T)  # dominant
dmat[[2]] <- matrix(c(1,1,0, 1,0,0), nrow=2,ncol=3,byrow = T)  # gene 1 dominant
dmat[[3]] <- matrix(c(1,0,0, 1,1,0), nrow=2,ncol=3,byrow = T)  # gene 2 dominant
dmat[[4]] <- matrix(c(1,1,0, 1,1,0), nrow=2,ncol=3,byrow = T)  # recessive
UserParams <- DefineUserParams(PER_SUITABLE=masterDF$PER_SUITABLE[rep],SNUGGLE=masterDF$SNUGGLE[rep],NFOCI=1,MAXDISPERSAL=500,BASELINE_DISPERSAL=0.05,
MAXDISPERSAL_PLAGUE = 1000,PLAGUE_DISPERSAL=masterDF$PLAGUE_DISPERSAL[rep], MAXDENS = masterDF$MAXDENS[rep],
MINDENS = 15, BASELINE_MEANSURV = 0.6, BASELINE_PLAGUESURV=masterDF$BASELINE_PLAGUESURV[rep],
BASELINE_PLAGUESURV_RESIST=0.5,BASELINE_MEANFEC=masterDF$BASELINE_MEANFEC[rep],
FITNESS_COST=rep(masterDF$FITNESS_COST[rep],2),INITFREQ=rep(masterDF$INITFREQ[rep],2),DOMINANCE=dmat[[masterDF$DOMINANCE[rep]]])
InitList <- DoInitialization(UserParams)  #BaseLandscape
rm(list=ls())
############
## SIMULATION CONTROLS
############
NYEARS <- 50
############
## SET GLOBAL VARS
############
KEVIN_LAPTOP <- FALSE #
KEVIN_OFFICEPC <- FALSE #
KEVIN_LAPTOP2 <- TRUE #
if(KEVIN_LAPTOP) GIT_DIR <- "C:\\Users\\Kevin\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_OFFICEPC) GIT_DIR <- "E:\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_LAPTOP2) GIT_DIR <- "C:\\Users\\KevinT_Kevin\\Documents\\GitHub\\Plague_Resistance_Evolution"
#####################
# LOAD FUNCTIONS
#####################
setwd(GIT_DIR)
source("PlagueResistanceEvolution_FUNCTIONS.R")
############
## SET UP WORKSPACE AND LOAD PACKAGES
############
dirs <- SetUpDirectories()
num_cores <- parallel::detectCores() - 2   # for setting up cluster... leave one core free for windows background processes?
############
## SAMPLE FROM LATIN HYPERCUBE
############
N_LHS_SAMPLES <- 4  # 200
masterDF <- MakeLHSSamples(add=FALSE)
rep=1
dmat <- list()
dmat[[1]] <- matrix(c(1,0,0, 1,0,0), nrow=2,ncol=3,byrow = T)  # dominant
dmat[[2]] <- matrix(c(1,1,0, 1,0,0), nrow=2,ncol=3,byrow = T)  # gene 1 dominant
dmat[[3]] <- matrix(c(1,0,0, 1,1,0), nrow=2,ncol=3,byrow = T)  # gene 2 dominant
dmat[[4]] <- matrix(c(1,1,0, 1,1,0), nrow=2,ncol=3,byrow = T)  # recessive
UserParams <- DefineUserParams(PER_SUITABLE=masterDF$PER_SUITABLE[rep],SNUGGLE=masterDF$SNUGGLE[rep],NFOCI=1,MAXDISPERSAL=500,BASELINE_DISPERSAL=0.05,
MAXDISPERSAL_PLAGUE = 1000,PLAGUE_DISPERSAL=masterDF$PLAGUE_DISPERSAL[rep], MAXDENS = masterDF$MAXDENS[rep],
MINDENS = 15, BASELINE_MEANSURV = 0.6, BASELINE_PLAGUESURV=masterDF$BASELINE_PLAGUESURV[rep],
BASELINE_PLAGUESURV_RESIST=0.5,BASELINE_MEANFEC=masterDF$BASELINE_MEANFEC[rep],
FITNESS_COST=rep(masterDF$FITNESS_COST[rep],2),INITFREQ=rep(masterDF$INITFREQ[rep],2),DOMINANCE=dmat[[masterDF$DOMINANCE[rep]]])
InitList <- DoInitialization(UserParams)  #BaseLandscape
InitList
PlagueRaster <- InitList$PlagueRaster
plot(PlagueRaster)
fake=FALSE
temp <- InitializeDispersal(UserParams)   # env
UserParams <- temp$UserParams    #get("UserParams",envir=env)
DispList <- temp$DispList
temp <- InitializeLandscape(solid=F,fake=fake,UserParams)   # generate patchmaps etc.  # env
UserParams <- temp$UserParams   #get("UserParams",envir=env)
BaseLandscape <- temp$BaseLandscape
EnvCovs <- temp$EnvCovs
suppressWarnings(  PlagueModel <- GetPlagueModel(fake=fake)  )  # for now, use fake plague model- will be a statistical model
setwd(dirs$plaguemod$DataDir)
load("randomForestModel_2017-05-12.RData")    # load pre-constructed plague model (random forest!)
GetPlagueModel <- function(fake=TRUE){
if(fake){
BETADENS <- 0.02  # 0.005
BETAPLAGUE <- 0.01  # 0.9
INTERACTION <- 0.05  # 0.03
INTERCEPT <- -6  # -6
faken <- 1000
fakedens <- seq(0,200,length=faken)   # fakedens <- rep(seq(0,200,by=50),each=10)
fakeplaguepops <- sample(c(0:5),faken,replace=T)   # fakeplaguepops <- rep(c(0:9),times = 5)
fakeplagueprob <- plogis(INTERCEPT + BETADENS*fakedens + BETAPLAGUE*fakeplaguepops + INTERACTION*fakeplaguepops*fakedens)
# matrix(fakeplagueprob,ncol=10,byrow=T)
# raster::plot(fakeplagueprob~fakeplaguepops)
#raster::plot(fakeplagueprob~fakedens)
fakeplague <- rbinom(faken,1,fakeplagueprob)
dataFrame <- data.frame(plague=fakeplague,dens=fakedens,plaguepops=fakeplaguepops)
plaguemodel <- glm(plague~1+plaguepops*dens,data=dataFrame,family="binomial")
#plogis(predict(plaguemodel,newdata=data.frame(dens=c(10:10),plaguepops=c(1:10))))
#summary(plaguemodel)
}else{   # otherwise use real plague model!
setwd(dirs$plaguemod$DataDir)
load("randomForestModel_2017-05-12.RData")    # load pre-constructed plague model (random forest!)
plaguemodel <- rfp1
}
return(plaguemodel)
}
suppressWarnings(  PlagueModel <- GetPlagueModel(fake=fake)  )  # for now, use fake plague model- will be a statistical model
InitDensRaster <- BaseLandscape$KRaster    # initialize abundance at carrying capacity
InitFreqList <- GetInitFreqs(UserParams,BaseLandscape)
InitDensRaster2 <- raster::reclassify(BaseLandscape$patchIDRaster,rcl=c(-Inf,Inf,0))    # for testing
ndx <- sample(which(!is.na(InitDensRaster2@data@values)),size=3)
InitDensRaster2[ndx] <- 1000   # initialize population in random locations
InitDensRaster <- InitDensRaster2
PlagueRaster_template <- raster::reclassify(BaseLandscape$patchIDRaster,rcl=c(-Inf,Inf,0))
plot(InitDensRaster)
PlagueRaster_template <- raster::reclassify(BaseLandscape$patchIDRaster,rcl=c(-Inf,Inf,0))
PlagueRaster=PlagueRaster_template
DensRaster=raster::reclassify(BaseLandscape$patchIDRaster,rcl=c(-Inf,Inf,0))
PlagueModel
EnvCovs
fake
timestep=0
temp.patch <- clump(DensRaster, directions=8, gaps=FALSE)
temp.patch
?clump
cells.patch <- raster::freq(temp.patch)     # number of patches in clump
cells.patch
DensRaster
BaseLandscape$patchIDRaster
DensRaster=raster::reclassify(BaseLandscape$patchIDRaster,rcl=c(-Inf,Inf,1))
temp.patch <- raster::clump(DensRaster, directions=8, gaps=FALSE)   # find occupied patches
cells.patch <- raster::freq(temp.patch)     # number of patches in clump
cells.patch
cells.patch <- as.data.frame(cells.patch[1:(nrow(cells.patch)-1),,drop=F])
temp.patch <- raster::clump(DensRaster, directions=8, gaps=FALSE)   # find occupied patches
cells.patch <- raster::freq(temp.patch)     # number of patches in clump
cells.patch <- as.data.frame(cells.patch[1:(nrow(cells.patch)-1),,drop=F])  # if no patches, this will have zero rows
PATCHSIZE <- raster::subs(temp.patch, cells.patch, by=1, which=2)  # number of cells in patch, for each pixel
plot(PATCHSIZE)
?focal
temp.reset <- PlagueRaster
plot(PlagueRaster)
YearsSincePlague = raster::reclassify(BaseLandscape$patchIDRaster,rcl=c(-Inf,Inf,10))
?overlay
YearsSincePlague <- YearsSincePlague + 1
plot(YearsSincePlague)
YearsSincePlague[PlagueRaster==1]
PlagueRaster_template <- raster::reclassify(BaseLandscape$patchIDRaster,rcl=c(-Inf,Inf,1))
YearsSincePlague[PlagueRaster==1]
plot(PlagueRaster)
plot(PlagueRaster_template)
PlagueRaster=PlagueRaster_template
YearsSincePlague[PlagueRaster==1]
YearsSincePlague[PlagueRaster==1] <- 0
plot(YearsSincePlague)
PlagueRaster=PlagueRaster_template
plot(PlagueRaster_template)
YearsSincePlague <- raster::reclassify(BaseLandscape$patchIDRaster,rcl=c(-Inf,Inf,10))
slope.trans <- gdistance::transition(ENV_COVARS$slope.c, mean, 8)   # cost to move to neighboring cells
?accCost
?resample
rm(list=ls())
############
## SIMULATION CONTROLS
############
NYEARS <- 50
############
## SET GLOBAL VARS
############
KEVIN_LAPTOP <- FALSE #
KEVIN_OFFICEPC <- FALSE #
KEVIN_LAPTOP2 <- TRUE #
if(KEVIN_LAPTOP) GIT_DIR <- "C:\\Users\\Kevin\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_OFFICEPC) GIT_DIR <- "E:\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_LAPTOP2) GIT_DIR <- "C:\\Users\\KevinT_Kevin\\Documents\\GitHub\\Plague_Resistance_Evolution"
#####################
# LOAD FUNCTIONS
#####################
setwd(GIT_DIR)
source("PlagueResistanceEvolution_FUNCTIONS.R")
############
## SET UP WORKSPACE AND LOAD PACKAGES
############
dirs <- SetUpDirectories()
num_cores <- parallel::detectCores() - 2   # for setting up cluster... leave one core free for windows background processes?
############
## SAMPLE FROM LATIN HYPERCUBE
############
N_LHS_SAMPLES <- 4  # 200
masterDF <- MakeLHSSamples(add=FALSE)
rep=1
dmat <- list()
dmat[[1]] <- matrix(c(1,0,0, 1,0,0), nrow=2,ncol=3,byrow = T)  # dominant
dmat[[2]] <- matrix(c(1,1,0, 1,0,0), nrow=2,ncol=3,byrow = T)  # gene 1 dominant
dmat[[3]] <- matrix(c(1,0,0, 1,1,0), nrow=2,ncol=3,byrow = T)  # gene 2 dominant
dmat[[4]] <- matrix(c(1,1,0, 1,1,0), nrow=2,ncol=3,byrow = T)  # recessive
UserParams <- DefineUserParams(PER_SUITABLE=masterDF$PER_SUITABLE[rep],SNUGGLE=masterDF$SNUGGLE[rep],NFOCI=1,MAXDISPERSAL=500,BASELINE_DISPERSAL=0.05,
MAXDISPERSAL_PLAGUE = 1000,PLAGUE_DISPERSAL=masterDF$PLAGUE_DISPERSAL[rep], MAXDENS = masterDF$MAXDENS[rep],
MINDENS = 15, BASELINE_MEANSURV = 0.6, BASELINE_PLAGUESURV=masterDF$BASELINE_PLAGUESURV[rep],
BASELINE_PLAGUESURV_RESIST=0.5,BASELINE_MEANFEC=masterDF$BASELINE_MEANFEC[rep],
FITNESS_COST=rep(masterDF$FITNESS_COST[rep],2),INITFREQ=rep(masterDF$INITFREQ[rep],2),DOMINANCE=dmat[[masterDF$DOMINANCE[rep]]])
fake=FALSE
temp <- InitializeDispersal(UserParams)   # env
UserParams <- temp$UserParams    #get("UserParams",envir=env)
DispList <- temp$DispList
temp <- InitializeLandscape(solid=F,fake=fake,UserParams)   # generate patchmaps etc.  # env
UserParams <- temp$UserParams   #get("UserParams",envir=env)
BaseLandscape <- temp$BaseLandscape
EnvCovs <- temp$EnvCovs
suppressWarnings(  PlagueModel <- GetPlagueModel(fake=fake)  )  # for now, use fake plague model- will be a statistical model
suppressWarnings(  PlagueModel <- GetPlagueModel(fake=fake)  )  # for now, use fake plague model- will be a statistical model
InitDensRaster <- BaseLandscape$KRaster    # initialize abundance at carrying capacity
InitFreqList <- GetInitFreqs(UserParams,BaseLandscape)
InitDensRaster2 <- raster::reclassify(BaseLandscape$patchIDRaster,rcl=c(-Inf,Inf,0))    # for testing
ndx <- sample(which(!is.na(InitDensRaster2@data@values)),size=3)
InitDensRaster2[ndx] <- 1000   # initialize population in random locations
plot(InitDensRaster)
PlagueRaster_template <- raster::reclassify(BaseLandscape$patchIDRaster,rcl=c(-Inf,Inf,0))
YearsSincePlague <- raster::reclassify(BaseLandscape$patchIDRaster,rcl=c(-Inf,Inf,10))
PlagueRaster=PlagueRaster_template
YearsSincePlague = YearsSincePlague
DensRaster=raster::reclassify(BaseLandscape$patchIDRaster,rcl=c(-Inf,Inf,1))
timestep=0
temp.patch <- raster::clump(DensRaster, directions=8, gaps=FALSE)   # find occupied patches
cells.patch <- raster::freq(temp.patch)     # number of patches in clump
cells.patch <- as.data.frame(cells.patch[1:(nrow(cells.patch)-1),,drop=F])  # if no patches, this will have zero rows
if(nrow(cells.patch)>0){
PATCHSIZE <- raster::subs(temp.patch, cells.patch, by=1, which=2)  # number of cells in patch, for each pixel
} else{
PATCHSIZE <- raster::reclassify(DensRaster,rcl=c(-Inf,Inf,0))
}
PATCHSIZE
slope.trans <- gdistance::transition(ENV_COVARS$slope.c, mean, 8)   # cost to move to neighboring cells (move to initialization?)
slope.trans <- gdistance::transition(EnvCovs$slope.c, mean, 8)   # cost to move to neighboring cells (move to initialization?)
dist.noplague <- DensRaster   # set up a baseline "dist to plague" raster
raster::values(dist.noplague) <- 50000    # 500000? #Need a raster for distance if there's no plague in the area (put distance at 500km)
temp <- PlagueRaster
raster::values(temp) <- ifelse(raster::values(temp)==0, NA, raster::values(temp))
any(!is.na(raster::values(temp)))
slope.cost <- dist.noplague    # if all no plague, then dist to plague is maximized for all cells
plaguemodel
PlagueModel
raster::values(slope.cost)
raster::values(EnvCovs$prcp.WinSpr[[min(1,(timestep-2))]])
EnvCovs$prcp.WinSpr[[min(1,(timestep-2))]]
EnvCovs$prcp.WinSpr
EnvCovs$prcp.WinSpr[[1]]
min(1,(timestep-2))
raster::values(EnvCovs$prcp.WinSpr[[max(1,(timestep-2))]])
raster::values(EnvCovs$prcp.WinSpr[[max(1,(timestep-1))]])
raster::values(EnvCovs$prcp.WinSpr[[timestep]])
timestep
raster::values(EnvCovs$prcp.WinSpr[[max(1,timestep)]])
raster::values(EnvCovs$prcp.SumFal[[max(1,(timestep-2))]])
raster::values(EnvCovs$prcp.SumFal[[max(1,timestep)]])
raster::values(EnvCovs$prcp.year[[max(1,timestep)]])
raster::values(EnvCovs$sand0.c)
plot(EnvCovs$sand0.c)
raster::values(EnvCovs$tmax[[max(1,timestep)]])
raster::values(YearsSincePlague)
raster::values(YearsSincePlague)
plot(YearsSincePlague)
plot(DensRaster)
newdf <- data.frame(
psize = raster::values(PATCHSIZE),
slope.cost.plague = raster::values(slope.cost),
winspr.prcp.2prev = raster::values(EnvCovs$prcp.WinSpr[[max(1,(timestep-2))]]),
winspr.prcp.prev = raster::values(EnvCovs$prcp.WinSpr[[max(1,(timestep-1))]]),
winspr.prcp = raster::values(EnvCovs$prcp.WinSpr[[max(1,timestep)]]),
sumfal.prcp.2prev = raster::values(EnvCovs$prcp.SumFal[[max(1,(timestep-2))]]),
sumfal.prcp.prev =  raster::values(EnvCovs$prcp.SumFal[[max(1,(timestep-1))]]),
sumfal.prcp = raster::values(EnvCovs$prcp.SumFal[[max(1,timestep)]]),
year.prcp = raster::values(EnvCovs$prcp.year[[max(1,timestep)]]),
sand0 = raster::values(EnvCovs$sand0.c),
tmax.prev = raster::values(EnvCovs$tmax[[max(1,(timestep-1))]]),
tmax = raster::values(EnvCovs$tmax[[max(1,timestep)]]),
elev = raster::values(EnvCovs$NED.c),
lat = raster::values(EnvCovs$lat.c),
long = raster::values(EnvCovs$long.c),
years.plague = raster::values(YearsSincePlague)
)
