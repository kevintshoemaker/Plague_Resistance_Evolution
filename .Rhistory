solid
solid=F
solid
?secr::make.grid
# use utility function from secr package to initialize landscape...
tempgrid <- secr::make.grid(nx = UserParams$Landscape$NCOLS, ny = UserParams$Landscape$NROWS, spacing = UserParams$Landscape$CELLWIDTH_M,
detector = "single", originxy = c(0,0), hollow = F,
ID = "alphay")
?secr::randomHabitat
temppatches <- secr::randomHabitat(mask=tempmask, p = 0.4, A = UserParams$Landscape$PER_SUITABLE, directions = 4, minpatch = 20,
drop = FALSE, covname = "habitat", plt = FALSE)
# use utility function from secr package to initialize landscape...
tempgrid <- secr::make.grid(nx = UserParams$Landscape$NCOLS, ny = UserParams$Landscape$NROWS, spacing = UserParams$Landscape$CELLWIDTH_M,
detector = "single", originxy = c(0,0), hollow = F,
ID = "alphay")
tempmask <- secr::make.mask(traps=tempgrid, buffer = UserParams$Landscape$HALFCELLWIDTH_M, spacing = UserParams$Landscape$CELLWIDTH_M,
nx = UserParams$Landscape$NCOLS, ny = UserParams$Landscape$NROWS, type =
c("traprect"))
temppatches <- secr::randomHabitat(mask=tempmask, p = 0.4, A = UserParams$Landscape$PER_SUITABLE, directions = 4, minpatch = 20,
drop = FALSE, covname = "habitat", plt = FALSE)
#BaseLandscape$patchRaster <- templateRaster
#patchvals <- as.vector(t(as.matrix(covariates(temppatches)$habitat)))
patchRaster <- raster::setValues(templateRaster,values=secr::covariates(temppatches)$habitat)
patchRaster <- raster::reclassify(patchRaster,rcl=c(-Inf,0.5,NA, 0.6,Inf,1))   # raster of habitat patches
GENETICS_DF
PER_SUITABLE
UserParams$Landscape$NPOPS
temppatches <- secr::randomHabitat(mask=tempmask, p = 0.4, A = UserParams$Landscape$PER_SUITABLE, directions = 4, minpatch = 20,
drop = FALSE, covname = "habitat", plt = FALSE)
raster::clump(patchRaster,directions=4,gaps=F)
max(raster::clump(patchRaster,directions=4,gaps=F))
cellStats(raster::clump(patchRaster,directions=4,gaps=F),max)
npatches <- cellStats(raster::clump(patchRaster,directions=4,gaps=F),max)   # determine unique ID for each patch...
npatches
npatches <- 0
while(npatches!=nrow(UserParams$Landscape$NPOPS)){
temppatches <- secr::randomHabitat(mask=tempmask, p = 0.4, A = UserParams$Landscape$PER_SUITABLE, directions = 4, minpatch = 20,
drop = FALSE, covname = "habitat", plt = FALSE)
npatches <- cellStats(raster::clump(patchRaster,directions=4,gaps=F),max)   # determine unique ID for each patch...
}
npatches <- 0
temppatches <- secr::randomHabitat(mask=tempmask, p = 0.4, A = UserParams$Landscape$PER_SUITABLE, directions = 4, minpatch = 20,
drop = FALSE, covname = "habitat", plt = FALSE)
npatches <- cellStats(raster::clump(patchRaster,directions=4,gaps=F),max)   # determine unique ID for each patch...
npatches
temppatches <- secr::randomHabitat(mask=tempmask, p = 0.4, A = UserParams$Landscape$PER_SUITABLE, directions = 4, minpatch = 20,
drop = FALSE, covname = "habitat", plt = FALSE)
npatches <- cellStats(raster::clump(patchRaster,directions=4,gaps=F),max)   # determine unique ID for each patch...
npatches
temppatches <- secr::randomHabitat(mask=tempmask, p = 0.4, A = UserParams$Landscape$PER_SUITABLE, directions = 4, minpatch = 20,
drop = FALSE, covname = "habitat", plt = FALSE)
npatches
tempmask
temppatches <- secr::randomHabitat(mask=tempmask, p = 0.2, A = UserParams$Landscape$PER_SUITABLE, directions = 4, minpatch = 20,
drop = FALSE, covname = "habitat", plt = FALSE)
cellStats(raster::clump(patchRaster,directions=4,gaps=F),max)
temppatches <- secr::randomHabitat(mask=tempmask, p = 0.1, A = UserParams$Landscape$PER_SUITABLE, directions = 4, minpatch = 20,
drop = FALSE, covname = "habitat", plt = FALSE)
cellStats(raster::clump(patchRaster,directions=4,gaps=F),max)
plot(temppatches)
plot(temppatches)
temppatches <- secr::randomHabitat(mask=tempmask, p = 0.1, A = UserParams$Landscape$PER_SUITABLE, directions = 4, minpatch = 20,
drop = FALSE, covname = "habitat", plt = FALSE)
patchRaster <- raster::setValues(templateRaster,values=secr::covariates(temppatches)$habitat)
patchRaster <- raster::reclassify(patchRaster,rcl=c(-Inf,0.5,NA, 0.6,Inf,1))   # raster of habitat patches
npatches <- cellStats(raster::clump(patchRaster,directions=4,gaps=F),max)   # determine unique ID for each patch...
npatches
plot(patchRaster)
UserParams$Landscape$PER_SUITABLE
temppatches <- secr::randomHabitat(mask=tempmask, p = 0.5, A = UserParams$Landscape$PER_SUITABLE, directions = 4, minpatch = 20,
drop = FALSE, covname = "habitat", plt = FALSE)
patchRaster <- raster::setValues(templateRaster,values=secr::covariates(temppatches)$habitat)
patchRaster <- raster::reclassify(patchRaster,rcl=c(-Inf,0.5,NA, 0.6,Inf,1))   # raster of habitat patches
npatches <- cellStats(raster::clump(patchRaster,directions=4,gaps=F),max)   # determine unique ID for each patch...
npatches
temppatches <- secr::randomHabitat(mask=tempmask, p = 0.7, A = UserParams$Landscape$PER_SUITABLE, directions = 4, minpatch = 20,
drop = FALSE, covname = "habitat", plt = FALSE)
patchRaster <- raster::setValues(templateRaster,values=secr::covariates(temppatches)$habitat)
patchRaster <- raster::reclassify(patchRaster,rcl=c(-Inf,0.5,NA, 0.6,Inf,1))   # raster of habitat patches
npatches <- cellStats(raster::clump(patchRaster,directions=4,gaps=F),max)   # determine unique ID for each patch...
plot(patchRaster)
temppatches <- secr::randomHabitat(mask=tempmask, p = 0.4, A = UserParams$Landscape$PER_SUITABLE, directions = 4, minpatch = 20,
drop = FALSE, covname = "habitat", plt = FALSE)
patchRaster <- raster::setValues(templateRaster,values=secr::covariates(temppatches)$habitat)
patchRaster <- raster::reclassify(patchRaster,rcl=c(-Inf,0.5,NA, 0.6,Inf,1))   # raster of habitat patches
npatches <- cellStats(raster::clump(patchRaster,directions=4,gaps=F),max)   # determine unique ID for each patch...
plot(patchRaster)
npatches <- 0
while(npatches!=nrow(UserParams$Landscape$NPOPS)){
temppatches <- secr::randomHabitat(mask=tempmask, p = 0.4, A = UserParams$Landscape$PER_SUITABLE, directions = 4, minpatch = 20,
drop = FALSE, covname = "habitat", plt = FALSE)
patchRaster <- raster::setValues(templateRaster,values=secr::covariates(temppatches)$habitat)
patchRaster <- raster::reclassify(patchRaster,rcl=c(-Inf,0.5,NA, 0.6,Inf,1))   # raster of habitat patches
npatches <- cellStats(raster::clump(patchRaster,directions=4,gaps=F),max)   # determine unique ID for each patch...
}
npatches <- 0
while(npatches!=UserParams$Landscape$NPOPS){
temppatches <- secr::randomHabitat(mask=tempmask, p = 0.4, A = UserParams$Landscape$PER_SUITABLE, directions = 4, minpatch = 20,
drop = FALSE, covname = "habitat", plt = FALSE)
patchRaster <- raster::setValues(templateRaster,values=secr::covariates(temppatches)$habitat)
patchRaster <- raster::reclassify(patchRaster,rcl=c(-Inf,0.5,NA, 0.6,Inf,1))   # raster of habitat patches
npatches <- cellStats(raster::clump(patchRaster,directions=4,gaps=F),max)   # determine unique ID for each patch...
}
plot(patchRaster)
#BaseLandscape$patchRaster <- templateRaster
#patchvals <- as.vector(t(as.matrix(covariates(temppatches)$habitat)))
patchRaster <- raster::setValues(templateRaster,values=secr::covariates(temppatches)$habitat)
patchRaster <- raster::reclassify(patchRaster,rcl=c(-Inf,0.5,NA, 0.6,Inf,1))   # raster of habitat patches
plot(patchRaster)
ENV_COVARS <- NULL
patchRaster
# extend patch raster to go outside the landscape bounds to the max dispersal distance...
maxdisp <- max(UserParams$Dispersal$MAXDISPERSAL_CELLS,UserParams$Dispersal$MAXDISPERSAL_CELLS_PLAGUE)
patchRaster <- raster::extend(patchRaster,maxdisp,value=NA)
KRaster <- patchRaster * UserParams$Popbio$MAXDENS_HA     # matrix of carrying capacity
patchIDRaster <- raster::clump(patchRaster,directions=4,gaps=F)   # determine unique ID for each patch...
nPatches <- raster::cellStats(patchIDRaster,"max")   # number of patches in the landscape
nCells <- raster::ncell(patchRaster)
# extent- in terms of cell centroids... (used for dispersal)
UserParams$Landscape$MINX <- patchRaster@extent@xmin+UserParams$Landscape$HALFCELLWIDTH_M
UserParams$Landscape$MAXX <- patchRaster@extent@xmax-UserParams$Landscape$HALFCELLWIDTH_M
UserParams$Landscape$MINY <- patchRaster@extent@ymin+UserParams$Landscape$HALFCELLWIDTH_M
UserParams$Landscape$MAXY <- patchRaster@extent@ymax-UserParams$Landscape$HALFCELLWIDTH_M
UserParams$Landscape$FULLEXTENT <- raster::extent(UserParams$Landscape$MINX,UserParams$Landscape$MAXX,UserParams$Landscape$MINY,UserParams$Landscape$MAXY)
BaseLandscape <- list(patchRaster = patchRaster,
KRaster = KRaster,
patchIDRaster = patchIDRaster,
nPatches = nPatches,
nCells = nCells
)
returnlist <- list()
returnlist$BaseLandscape <- BaseLandscape
returnlist$UserParams <- UserParams
returnlist$EnvCovs <- ENV_COVARS
InitializeLandscape <- function(solid=F,fake=F,UserParams){   #env
maxdisp <- max(UserParams$Dispersal$MAXDISPERSAL_CELLS,UserParams$Dispersal$MAXDISPERSAL_CELLS_PLAGUE)  # for extending the landscape to accommodate dispersal
if(fake){
templateRaster <- raster::raster(nrows=UserParams$Landscape$NROWS, ncols=UserParams$Landscape$NCOLS, xmn=0,
xmx=UserParams$Landscape$CELLWIDTH_M*UserParams$Landscape$NROWS,ymn=0,
ymx=UserParams$Landscape$CELLWIDTH_M*UserParams$Landscape$NCOLS,vals=NA)    # template raster
# raster::plot(templateRaster)
if(solid){
patchRaster <- raster::setValues(templateRaster,1)
}else{
# use utility function from secr package to initialize landscape...
tempgrid <- secr::make.grid(nx = UserParams$Landscape$NCOLS, ny = UserParams$Landscape$NROWS, spacing = UserParams$Landscape$CELLWIDTH_M,
detector = "single", originxy = c(0,0), hollow = F,
ID = "alphay")
# secr::plot(tempgrid)
tempmask <- secr::make.mask(traps=tempgrid, buffer = UserParams$Landscape$HALFCELLWIDTH_M, spacing = UserParams$Landscape$CELLWIDTH_M,
nx = UserParams$Landscape$NCOLS, ny = UserParams$Landscape$NROWS, type =
c("traprect"))
# plot(tempmask)
npatches <- 0
while(npatches!=UserParams$Landscape$NPOPS){
temppatches <- secr::randomHabitat(mask=tempmask, p = 0.4, A = UserParams$Landscape$PER_SUITABLE, directions = 4, minpatch = 20,
drop = FALSE, covname = "habitat", plt = FALSE)
patchRaster <- raster::setValues(templateRaster,values=secr::covariates(temppatches)$habitat)
patchRaster <- raster::reclassify(patchRaster,rcl=c(-Inf,0.5,NA, 0.6,Inf,1))   # raster of habitat patches
npatches <- cellStats(raster::clump(patchRaster,directions=4,gaps=F),max)   # determine unique ID for each patch...
}
#BaseLandscape$patchRaster <- templateRaster
#patchvals <- as.vector(t(as.matrix(covariates(temppatches)$habitat)))
patchRaster <- raster::setValues(templateRaster,values=secr::covariates(temppatches)$habitat)
patchRaster <- raster::reclassify(patchRaster,rcl=c(-Inf,0.5,NA, 0.6,Inf,1))   # raster of habitat patches
# plot(patchRaster)
}
ENV_COVARS <- NULL
}else{   # read in real landscape: patches and covariates.
##########
# LOAD ENVIRONMENTAL COVARIATES  (these do not change!)
##########
setwd(dirs$plaguemod$CovDir)
load("EnvCov_smallPawnee.RData")
##### DEFINE ENV COVARIATES
## note that env covariates have the right projection and resolution.
plot=F
if(plot){
raster::plot(ENV_COVARS$lat.c)
raster::plot(ENV_COVARS$long.c)
raster::plot(ENV_COVARS$NED.c)     ## elevation
raster::plot(ENV_COVARS$prcp.SumFal)   # time series of maps
raster::plot(ENV_COVARS$prcp.WinSpr)   # time series
raster::plot(ENV_COVARS$prcp.year)     # ts
raster::plot(ENV_COVARS$sand0.c)     #??
raster::plot(ENV_COVARS$sand2.c)
raster::plot(ENV_COVARS$slope.c)
raster::plot(ENV_COVARS$tmax)   # ts
}
##################
# IF NEEDED ASSEMBLE THE COVARIATES
##################
convert=F
if(convert){
setwd(dirs$plaguemod$CovDir)
load("EnvCov_stacks_smallPawnee_FUTURE.RData")
load("EnvCov_stacks_smallPawnee_PAST.RData")
load("EnvCov_stacks_smallPawnee.RData")
ENV_COVARS <- list()
ENV_COVARS$lat.c <- lat.c
ENV_COVARS$long.c <- long.c
ENV_COVARS$NED.c <- NED.c      # elevation
ENV_COVARS$prcp.SumFal <- raster::brick(c(prcp.SumFal.past,prcp.SumFal,prcp.SumFal.f.r))
allyears <- as.numeric(unlist(regmatches(names(ENV_COVARS$prcp.SumFal), gregexpr("[[:digit:]]+", names(ENV_COVARS$prcp.SumFal)))))
names(ENV_COVARS$prcp.SumFal) <- allyears
ENV_COVARS$prcp.WinSpr <- raster::brick(c(prcp.WinSpr.past,prcp.WinSpr,prcp.WinSpr.f.r))
names(ENV_COVARS$prcp.WinSpr) <- allyears
ENV_COVARS$prcp.year <- raster::brick(c(prcp.year.past,prcp.year,prcp.year.f.r))
names(ENV_COVARS$prcp.year) <- allyears
ENV_COVARS$sand0.c <- sand0.c
ENV_COVARS$sand2.c <- sand2.c
ENV_COVARS$slope.c <- slope.c
ENV_COVARS$tmax <- raster::brick(c(tmax.past,tmax,tmax.f.r))
names(ENV_COVARS$tmax) <- allyears
setwd(dirs$plaguemod$CovDir)
save(ENV_COVARS, file="EnvCov_smallPawnee.RData")   # was EnvCov_stacks_smallPawnee.RData
rm(lat.c,long.c,NED.c,
prcp.SumFal.past,prcp.SumFal,prcp.SumFal.f.r,
prcp.WinSpr.past,prcp.WinSpr,prcp.WinSpr.f.r,
prcp.year.past,prcp.year,prcp.year.f.r,
sand0.c,sand2.c,slope.c,
tmax.past,tmax,tmax.f.r)
}
###############
# SET UP TEMPLATE RASTER
###############
## create template
templateRaster <- raster::raster()   # template to create all other rasters for landscape of interest
raster::extent(templateRaster) <- raster::extent(ENV_COVARS$lat.c) #Using smaller extent from covariates (snippet of Pawnee)
raster::res(templateRaster) <- raster::res(ENV_COVARS$lat.c)   # set the correct resolution
###################
# EXTEND THE ENVIRONMENTAL COVARIATES
ENV_COVARS$lat.c <- raster::extend(ENV_COVARS$lat.c,maxdisp,value=NA)     #  raster::extend(patchRaster,maxdisp,value=NA)
ENV_COVARS$long.c <- raster::extend(ENV_COVARS$long.c,maxdisp,value=NA)
ENV_COVARS$NED.c <- raster::extend(ENV_COVARS$NED.c,maxdisp,value=NA)
ENV_COVARS$prcp.SumFal <- raster::extend(ENV_COVARS$prcp.SumFal,maxdisp,value=NA)
ENV_COVARS$prcp.WinSpr <- raster::extend(ENV_COVARS$prcp.WinSpr,maxdisp,value=NA)
ENV_COVARS$prcp.year <- raster::extend(ENV_COVARS$prcp.year,maxdisp,value=NA)
ENV_COVARS$sand0.c <- raster::extend(ENV_COVARS$sand0.c,maxdisp,value=NA)
ENV_COVARS$sand2.c <- raster::extend(ENV_COVARS$sand2.c,maxdisp,value=NA)
ENV_COVARS$slope.c <- raster::extend(ENV_COVARS$slope.c,maxdisp,value=NA)
ENV_COVARS$tmax <- raster::extend(ENV_COVARS$tmax,maxdisp,value=NA)
##############
# SET UP PATCH RASTER
##############
setwd(dirs$plaguemod$DataDir)
#Read in the "master colony" shapefile
load("PawneeColonies.RData")
#load("MasterColonies_2017-05-09.RData")    # elizabeth's version had way too much stuff in it!
#save(master.colony.Pawne,file="PawneeColonies.RData")
plot=F
if(plot){
plot(ENV_COVARS$NED.c)
plot(master.colony.Pawne,add=T)
}
#Crop master colony polygon to working extent
mcP <- raster::crop(master.colony.Pawne, raster::extent(templateRaster))   # do I need this?
patchRaster <- raster::rasterize(mcP, templateRaster, background=NA, field=1)
#############
# UPDATE USER PARAMS
#############
UserParams$Landscape$NROWS <- raster::nrow(templateRaster)
UserParams$Landscape$NCOLS <- raster::ncol(templateRaster)
UserParams$Landscape$CELLAREA_HA <- prod(raster::res(templateRaster))/10000
UserParams$Landscape$CELLAREA_M2 <- prod(raster::res(templateRaster))
UserParams$Landscape$CELLWIDTH_M <- raster::res(templateRaster)[1]
UserParams$Landscape$HALFCELLWIDTH_M <- UserParams$Landscape$CELLWIDTH_M / 2
UserParams$Landscape$PER_SUITABLE <- length(which(raster::values(patchRaster)==1))/raster::ncell(templateRaster)    # overwrite the percent suitable if a real landscape is used (this is constant!)
}
# extend patch raster to go outside the landscape bounds to the max dispersal distance...
maxdisp <- max(UserParams$Dispersal$MAXDISPERSAL_CELLS,UserParams$Dispersal$MAXDISPERSAL_CELLS_PLAGUE)
patchRaster <- raster::extend(patchRaster,maxdisp,value=NA)
#patchMatrix <- as.matrix(newraster)    # matrix of habitat patches
KRaster <- patchRaster * UserParams$Popbio$MAXDENS_HA     # matrix of carrying capacity
# plot(KRaster)
patchIDRaster <- raster::clump(patchRaster,directions=4,gaps=F)   # determine unique ID for each patch...
# plot(patchIDRaster)
nPatches <- raster::cellStats(patchIDRaster,"max")   # number of patches in the landscape
nCells <- raster::ncell(patchRaster)
# Data frame of coordinates for all non-na cells
# focalCells <- which(!is.na(patchRaster@data@values))
# xy_df <- data.frame(
#   raster::xyFromCell(patchRaster,focalCells)
# )
#
# head(xy_df)
# extent- in terms of cell centroids... (used for dispersal)
UserParams$Landscape$MINX <- patchRaster@extent@xmin+UserParams$Landscape$HALFCELLWIDTH_M
UserParams$Landscape$MAXX <- patchRaster@extent@xmax-UserParams$Landscape$HALFCELLWIDTH_M
UserParams$Landscape$MINY <- patchRaster@extent@ymin+UserParams$Landscape$HALFCELLWIDTH_M
UserParams$Landscape$MAXY <- patchRaster@extent@ymax-UserParams$Landscape$HALFCELLWIDTH_M
UserParams$Landscape$FULLEXTENT <- raster::extent(UserParams$Landscape$MINX,UserParams$Landscape$MAXX,UserParams$Landscape$MINY,UserParams$Landscape$MAXY)
#UserParams <- UserParams  # save to global env
BaseLandscape <- list(patchRaster = patchRaster,
KRaster = KRaster,
patchIDRaster = patchIDRaster,
nPatches = nPatches,
nCells = nCells
)
returnlist <- list()
returnlist$BaseLandscape <- BaseLandscape
returnlist$UserParams <- UserParams
returnlist$EnvCovs <- ENV_COVARS
# assign(x="patchRaster",value=patchRaster, envir = env)
# assign(x="KRaster",value=KRaster, envir = env)
# assign(x="patchIDRaster",value=patchIDRaster, envir = env)
# assign(x="nPatches",value=nPatches, envir = env)
# assign(x="nCells",value=nCells, envir = env)
# assign("BaseLandscape",value=BaseLandscape, envir=env)
# assign(x="UserParams",value=UserParams, envir = env)
return(returnlist)
}
temp <- InitializeDispersal(UserParams)   # env
UserParams <- temp$UserParams    #get("UserParams",envir=env)
DispList <- temp$DispList
temp <- InitializeLandscape(solid=F,fake=fake,UserParams)   # generate patchmaps etc.  # env
UserParams <- temp$UserParams   #get("UserParams",envir=env)
BaseLandscape <- temp$BaseLandscape
EnvCovs <- temp$EnvCovs
suppressWarnings(  PlagueModel <- GetPlagueModel(fake=fake)  )  # for now, use fake plague model- will be a statistical model
fake
InitDensRaster <- BaseLandscape$KRaster    # initialize abundance at carrying capacity
UserParams
InitFreqList <- list()
UserParams$Genetics$NGENES
BaseLandscape$nPatches
UserParams$Genetics$INITFREQ[1]
UserParams$Genetics$INITFREQ_SD[1]
UserParams$Genetics$INITFREQ[1]
i=1
name <- sprintf("gene%s",i)
temp <- rnorm(BaseLandscape$nPatches,UserParams$Genetics$INITFREQ[1],UserParams$Genetics$INITFREQ_SD[1])
BaseLandscape$nPatches
UserParams$Genetics$INITFREQ[1]
as.vector(UserParams$Genetics$INITFREQ[1]
)
serParams$Genetics$INITFREQ[1]
UserParams$Genetics$INITFREQ[1]
as.numeric(UserParams$Genetics$INITFREQ[1])
UserParams$Genetics$INITFREQ[,1]
temp <- rnorm(BaseLandscape$nPatches,UserParams$Genetics$INITFREQ[,1],UserParams$Genetics$INITFREQ_SD[1])
temp
temp <- ifelse(temp<=0,0.01,temp)
temp <- ifelse(temp>=1,0.99,temp)
temp
name <- sprintf("gene%s",i)
name <- sprintf("gene%s",i)
temp <- rnorm(BaseLandscape$nPatches,UserParams$Genetics$INITFREQ[,1],UserParams$Genetics$INITFREQ_SD[1])
temp <- ifelse(temp<=0,0.01,temp)
temp <- ifelse(temp>=1,0.99,temp)
InitFreqList[[name]] <- raster::reclassify(BaseLandscape$patchIDRaster,rcl=cbind(c(1:BaseLandscape$nPatches),temp))
#plot(InitFreqList[["marker10"]])
InitFreqList <- raster::stack(InitFreqList)
plot(InitFreqList[["marker10"]])
BaseLandscape$patchIDRaster
i=1
for(i in 1:UserParams$Genetics$NGENES){
name <- sprintf("gene%s",i)
temp <- rnorm(BaseLandscape$nPatches,UserParams$Genetics$INITFREQ[,1],UserParams$Genetics$INITFREQ_SD[1])
temp <- ifelse(temp<=0,0.01,temp)
temp <- ifelse(temp>=1,0.99,temp)
InitFreqList[[name]] <- raster::reclassify(BaseLandscape$patchIDRaster,rcl=cbind(c(1:BaseLandscape$nPatches),temp))
}
plot(InitFreqList[["marker10"]])
names(InitFreqList)
plot(InitFreqList[["gene10"]])
GetInitFreqs <- function(UserParams,BaseLandscape){
InitFreqList <- list()
#UserParams$Genetics$INITFREQ
i=1
for(i in 1:UserParams$Genetics$NGENES){
name <- sprintf("gene%s",i)
temp <- rnorm(BaseLandscape$nPatches,UserParams$Genetics$INITFREQ[,1],UserParams$Genetics$INITFREQ_SD[1])
temp <- ifelse(temp<=0,0.01,temp)
temp <- ifelse(temp>=1,0.99,temp)
InitFreqList[[name]] <- raster::reclassify(BaseLandscape$patchIDRaster,rcl=cbind(c(1:BaseLandscape$nPatches),temp))
}
#plot(InitFreqList[["marker10"]])
InitFreqList <- raster::stack(InitFreqList)
#plot(InitFreqList)
return(InitFreqList)
}
InitFreqList <- GetInitFreqs(UserParams,BaseLandscape)
PlagueRaster_template <- raster::reclassify(BaseLandscape$patchIDRaster,rcl=c(-Inf,Inf,0))
YearsSincePlague <- raster::reclassify(BaseLandscape$patchIDRaster,rcl=c(-Inf,Inf,10))
#PlagueModel <- get("PlagueModel",envir=env)
PlagueRaster <- doPlague(PlagueRaster=PlagueRaster_template, YearsSincePlague = YearsSincePlague,
DensRaster=InitDensRaster,UserParams,PlagueModel,EnvCovs,fake,timestep=0)
YearsSincePlague[PlagueRaster==1] <- 0
init.list <- list()
init.list$PlagueRaster <- PlagueRaster
init.list$YearsSincePlague <- YearsSincePlague
#init.list$PopArray <- PopArray
init.list$InitFreqList <- InitFreqList
init.list$InitDensRaster <- InitDensRaster
init.list$PlagueModel <- PlagueModel
init.list$DispList <- DispList
init.list$UserParams <- UserParams
init.list$BaseLandscape <- BaseLandscape
init.list$EnvCovs <- EnvCovs
DoInitialization <- function(UserParams,fake=FALSE){  # BaseLandscape
#####################
# INITIALIZE DISPERSAL   (for both plague and no plague... )
#####################
temp <- InitializeDispersal(UserParams)   # env
UserParams <- temp$UserParams    #get("UserParams",envir=env)
DispList <- temp$DispList
########################
# INITIALIZE LANDSCAPE
########################
temp <- InitializeLandscape(solid=F,fake=fake,UserParams)   # generate patchmaps etc.  # env
UserParams <- temp$UserParams   #get("UserParams",envir=env)
BaseLandscape <- temp$BaseLandscape
EnvCovs <- temp$EnvCovs
########################
# GET PLAGUE MODEL
########################
suppressWarnings(  PlagueModel <- GetPlagueModel(fake=fake)  )  # for now, use fake plague model- will be a statistical model
#assign(x="PlagueModel",value=PlagueModel, envir = env)
########################
# INITIALIZE POPULATION
########################
InitDensRaster <- BaseLandscape$KRaster    # initialize abundance at carrying capacity
# raster::plot(InitDensRaster)
#######################
# INITIALIZE ALLELE FREQUENCIES / RESISTANCE FACTORS [keep for now- will be multiple genes in the model somehow]
#######################
# NOTE: Some regions are more likely to evolve faster because they have greater percentages of those genes that can confer resistance.
InitFreqList <- GetInitFreqs(UserParams,BaseLandscape)
#assign(x="InitFreqList",value=InitFreqList, envir = env)
#####################
# INITIALIZE POPULATION
#####################
### Code block for pop starting from small loci
# InitDensRaster2 <- raster::reclassify(BaseLandscape$patchIDRaster,rcl=c(-Inf,Inf,0))    # for testing
# ndx <- sample(which(!is.na(InitDensRaster2@data@values)),size=3)
# InitDensRaster2[ndx] <- 1000   # initialize population in random locations
# InitDensRaster <- InitDensRaster2
#PopArray2 <- InitDensRaster   # copy, for dispersal algorithm...
#assign(x="InitDensRaster",value=InitDensRaster, envir = env)
# PopArray <- GetStructuredPop(InitDensRaster,InitFreqList,UserParams,env)
# assign(x="PopArray",value=PopArray, envir = env)
#raster::plot(PopArray)
######################
# INITIALIZE PLAGUE PROCESS   [KTS: moving away from this and towards a purely statistical model]
######################
#  for now, assume that plague hits at the patch level, and is a random process.
# PROB_PLAGUE_YEAR <- 0.5 # probability that a plague event hits (landscape level?)   # for now, plague only hits one patch in a plague year
#
# plagueyear = as.logical(rbinom(NYEARS,1,PROB_PLAGUE_YEAR))
#
# plagueNow = floor(runif(NYEARS,1,BaseLandscape$nPatches+1)) * as.numeric(plagueyear)    ## which patch plagues out?
PlagueRaster_template <- raster::reclassify(BaseLandscape$patchIDRaster,rcl=c(-Inf,Inf,0))
YearsSincePlague <- raster::reclassify(BaseLandscape$patchIDRaster,rcl=c(-Inf,Inf,10))
#PlagueModel <- get("PlagueModel",envir=env)
PlagueRaster <- doPlague(PlagueRaster=PlagueRaster_template, YearsSincePlague = YearsSincePlague,
DensRaster=InitDensRaster,UserParams,PlagueModel,EnvCovs,fake,timestep=0)
#raster::plot(PlagueRaster)
YearsSincePlague[PlagueRaster==1] <- 0
#assign(x="PlagueRaster",value=PlagueRaster, envir = env)
init.list <- list()
init.list$PlagueRaster <- PlagueRaster
init.list$YearsSincePlague <- YearsSincePlague
#init.list$PopArray <- PopArray
init.list$InitFreqList <- InitFreqList
init.list$InitDensRaster <- InitDensRaster
init.list$PlagueModel <- PlagueModel
init.list$DispList <- DispList
init.list$UserParams <- UserParams
init.list$BaseLandscape <- BaseLandscape
init.list$EnvCovs <- EnvCovs
return(init.list)
###########
# SAVE VARS TO GLOBAL ENVIRONMENT
###########
# raster::plot(InitFreqList)
# raster::plot(BaseLandscape$patchRaster)
# raster::plot(BaseLandscape$patchIDRaster)
}
UserParams <- DefineUserParams(PER_SUITABLE=masterDF$PER_SUITABLE[rep],
SNUGGLE=masterDF$SNUGGLE[rep],
NFOCI=1,
MAXDISPERSAL=500,
BASELINE_DISPERSAL=0.05,
MAXDISPERSAL_PLAGUE = 1000,
PLAGUE_DISPERSAL=masterDF$PLAGUE_DISPERSAL[rep],
MAXDENS = masterDF$MAXDENS[rep],
MINDENS = 15,
BASELINE_MEANSURV = 0.6,
BASELINE_PLAGUESURV=masterDF$BASELINE_PLAGUESURV[rep],
BASELINE_PLAGUESURV_RESIST=0.5,
BASELINE_MEANFEC=masterDF$BASELINE_MEANFEC[rep],
FITNESS_COST=rnorm(ncol(resistance_fingerprint),masterDF$FITNESS_COST[rep],0.01),
INITFREQ=rep(masterDF$INITFREQ[rep],2),
DOMINANCE=dmat,    #  dmat[[masterDF$DOMINANCE[rep]]],
GENETICS_DF=resistance_fingerprint,
RES_RULES=rules_for_resistance)
InitList <- DoInitialization(UserParams,fake=fake)  #BaseLandscape
PlagueRaster <- InitList$PlagueRaster
YearsSincePlague <- InitList$YearsSincePlague
#PopArray <- InitList$PopArray
InitFreqList <- InitList$InitFreqList
InitDensRaster <- InitList$InitDensRaster
PlagueModel <- InitList$PlagueModel
DispList <- InitList$DispList
UserParams <- InitList$UserParams
BaseLandscape <- InitList$BaseLandscape
EnvCovs <- InitList$EnvCovs
ResultsList <- SetUpResults(NYEARS,UserParams)
# t=which(plagueyear)[1]
t<-0
t<-t+1
