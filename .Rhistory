plot(reclassify(DensRaster,rcl=c(-Inf,5,NA)),add=T,legend=T)
#plot(reclassify(PlagueRaster,rcl=c(-Inf,0.01,NA)),col=rgb(1,0,0),add=T,alpha=0.5,legend=F)
#plot(reclassify(NextPlagueSurvRaster,rcl=c(-Inf,0.001,NA)),col=heat.colors(10),add=T,legend=T)
dev.off()
# evolution figure 1
setwd(FIGS_DIR)
file = sprintf("Gene1FreqFig_year%s.tif",t)
tiff(file, width=width,height=height)
plot(patchRaster,col=gray(0.7),legend=F)
#col = colorRampPalette(c("red","red"))(1)
col = rgb(0,seq(0,maxValue(FreqList[["gene1"]]),length=10),0)
plot(reclassify(FreqList[["gene1"]],rcl=c(-Inf,0.001,NA)),add=T,col=col,legend=T)
#plot(reclassify(PlagueRaster,rcl=c(-Inf,0.01,NA)),col=rgb(1,0,0),add=T,alpha=0.5,legend=F)
#plot(reclassify(NextPlagueSurvRaster,rcl=c(-Inf,0.001,NA)),col=heat.colors(10),add=T,legend=T)
dev.off()
# evolution figure 1
setwd(FIGS_DIR)
file = sprintf("Gene2FreqFig_year%s.tif",t)
tiff(file, width=width,height=height)
plot(patchRaster,col=gray(0.7),legend=F)
#col = colorRampPalette(c("red","red"))(1)
col = rgb(0,seq(0,maxValue(FreqList[["gene2"]]),length=10),0)
plot(reclassify(FreqList[["gene2"]],rcl=c(-Inf,0.001,NA)),add=T,col=col,legend=T)
#plot(reclassify(PlagueRaster,rcl=c(-Inf,0.01,NA)),col=rgb(1,0,0),add=T,alpha=0.5,legend=F)
#plot(reclassify(NextPlagueSurvRaster,rcl=c(-Inf,0.001,NA)),col=heat.colors(10),add=T,legend=T)
dev.off()
# plague figure
setwd(FIGS_DIR)
file = sprintf("PlagueFig_year%s.tif",t)
tiff(file, width=width,height=height)
plot(patchRaster,col=gray(0.7),legend=F)
#col = colorRampPalette(c("red","red"))(1)
col = rgb(seq(0,maxValue(PlagueRaster),length=10),0,0)
plot(reclassify(PlagueRaster,rcl=c(-Inf,0.01,NA)),add=T,col=col,legend=T)
#plot(reclassify(PlagueRaster,rcl=c(-Inf,0.01,NA)),col=rgb(1,0,0),add=T,alpha=0.5,legend=F)
#plot(reclassify(NextPlagueSurvRaster,rcl=c(-Inf,0.001,NA)),col=heat.colors(10),add=T,legend=T)
dev.off()
#gray.colors(10)
# setwd(FIGS_DIR)
# date <- Sys.Date()
# for(i in rasterNames){
#   filename = sprintf("%s_time%s_%s.tif",i,t,date)
#   thisRaster <- eval(parse(text=i))
#   writeRaster(thisRaster,filename=filename,format='GTiff',overwrite=T)
# }
# test <- raster(filename)
# plot(test)
}
plot(patchRaster,col=gray(0.7),legend=F)
col = rgb(0,seq(0,1,length=10),0)
plot(reclassify(DensRaster,rcl=c(-Inf,5,NA)),add=T,legend=T)
FIGS_DIR
par(mfrow=c(1,2))
plot(patchRaster,col=gray(0.7),legend=F)
#col = colorRampPalette(c("red","red"))(1)
col = rgb(0,seq(0,maxValue(FreqList[["gene2"]]),length=10),0)
plot(reclassify(FreqList[["gene1"]],rcl=c(-Inf,0.001,NA)),add=T,col=col,legend=T)
plot(patchRaster,col=gray(0.7),legend=F)
#col = colorRampPalette(c("red","red"))(1)
col = rgb(0,seq(0,maxValue(FreqList[["gene2"]]),length=10),0)
plot(reclassify(FreqList[["gene2"]],rcl=c(-Inf,0.001,NA)),add=T,col=col,legend=T)
graphics.off()
plot(patchRaster,col=gray(0.7),legend=F)
#col = colorRampPalette(c("red","red"))(1)
col = rgb(0,seq(0,maxValue(FreqList[["gene2"]]),length=10),0)
plot(reclassify(FreqList[["gene1"]],rcl=c(-Inf,0.001,NA)),add=T,col=col,legend=T)
############
## CLEAR WORKSPACE
############
rm(list=ls())
############
## LOAD PACKAGES
############
library("raster")
library("secr")
library("igraph")
############
## SIMULATION CONTROLS
############
NYEARS <- 20
############
## SET BASE DIRECTORY
############
KEVIN_LAPTOP <- FALSE #  TRUE #
KEVIN_OFFICEPC <- TRUE # FALSE #
if(KEVIN_LAPTOP) BASE_DIR <- "C:\\Users\\Kevin\\Dropbox\\PlagueModeling\\ResistanceEvolution"
if(KEVIN_OFFICEPC) BASE_DIR <- "E:\\Dropbox\\PlagueModeling\\ResistanceEvolution"
if(KEVIN_LAPTOP) GIT_DIR <- "C:\\Users\\Kevin\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_OFFICEPC) GIT_DIR <- "E:\\GIT\\Plague_Resistance_Evolution"
############
## SET UP WORKSPACE (define global variables)
############
# RSCRIPT_DIR <- sprintf("%s\\Rscripts",GIT_DIR)
DATA_DIR <- sprintf("%s\\Data",BASE_DIR)
FIGS_DIR <- sprintf("%s\\RawFigs",BASE_DIR)
setwd(DATA_DIR)
#####################
# LOAD FUNCTIONS
#####################
setwd(GIT_DIR)
source("PlagueResistanceEvolution_FUNCTIONS.R")
############
## USER-DEFINED VARIABLES
############
UserParams <- DefineUserParams()
#####################
# INITIALIZE DISPERSAL   (for both plague and no plague... )
#####################
InitializeDispersal(UserParams)
########################
# INITIALIZE LANDSCAPE
########################
InitializeLandscape(solid=F)   # generate patchmaps etc.
plot(patchRaster)
plot(patchIDRaster)
########################
# GET PLAGUE MODEL
########################
PlagueModel <- GetPlagueModel()    # for now, use fake plague model- will be a statistical model
######################################
#########################
######  INITIALIZE THE SYSTEM!
#########################
########################
# INITIALIZE POPULATION
########################
InitDensRaster <- KRaster    # initialize abundance at carrying capacity
plot(InitDensRaster)
#######################
# INITIALIZE ALLELE FREQUENCIES / RESISTANCE FACTORS [keep for now- will be multiple genes in the model somehow]
#######################
# NOTE: Some regions are more likely to evolve faster because they have greater percentages of those genes that can confer resistance.
InitFreqList <- GetInitFreqs(UserParams)
plot(InitFreqList)
#####################
# INITIALIZE POPULATION
#####################
### Code block for pop starting from small loci
InitDensRaster2 <- reclassify(patchIDRaster,rcl=c(-Inf,Inf,0))    # for testing
ndx <- sample(which(!is.na(InitDensRaster2@data@values)),size=3)
InitDensRaster2[ndx] <- 1000   # initialize population in random locations
InitDensRaster <- InitDensRaster2
#PopArray2 <- InitDensRaster   # copy, for dispersal algorithm...
PopArray <- GetStructuredPop(InitDensRaster)
plot(PopArray)
######################
# INITIALIZE PLAGUE PROCESS   [KTS: moving away from this and towards a purely statistical model]
######################
#  for now, assume that plague hits at the patch level, and is a random process.
# PROB_PLAGUE_YEAR <- 0.5 # probability that a plague event hits (landscape level?)   # for now, plague only hits one patch in a plague year
#
# plagueyear = as.logical(rbinom(NYEARS,1,PROB_PLAGUE_YEAR))
#
# plagueNow = floor(runif(NYEARS,1,nPatches+1)) * as.numeric(plagueyear)    ## which patch plagues out?
PlagueRaster_template <- reclassify(patchIDRaster,rcl=c(-Inf,Inf,0))
PlagueRaster <- doPlague(UserParams,PlagueRaster=PlagueRaster_template, DensRaster=reclassify(patchIDRaster,rcl=c(-Inf,Inf,0)))
plot(PlagueRaster)
####################
# START LOOP THROUGH YEARS
####################
# names of important raster maps to save to file etc...
#rasterNames  <- c("PopArray","NextPlagueSurvRaster","NextNormalSurvRaster","PlagueResistancePotentialRaster")   # Deprecate?
# t=which(plagueyear)[1]
t=0
t=t+1
for(t in 1:(NYEARS)){
deviate <- rnorm(1)   #determine if this is a good year or a bad year (for now, survival and fecundity are perfectly correlated)
cv=UserParams$Popbio$CV_SURVIVAL   # set up for using the getYearVariate function
if(t==1){ FreqList=InitFreqList; DensRaster=InitDensRaster; newFociRaster <- reclassify(DensRaster,rcl=c(-Inf,Inf,0)) }    # initial conditions
##################
# DENSITY INDEPENDENT SURVIVAL (including plague survival)
##################
#PopArray <- GetStructuredPop(DensRaster)
DensRaster <- doSurvival(UserParams,DensRaster,PlagueRaster,FreqList)
# plot(DensRaster)
# plot(FreqList[["gene1"]])
################
# REPRODUCTION
################
DensRaster <- doReproduce(UserParams,DensRaster,PlagueRaster)    # TODO: make specific to each resistance type...?
# plot(DensRaster)
# plot(FreqList[["gene1"]])
###############
# DISPERSAL: Move individuals around the landscape (this takes a while!)
###############
DensRaster <- doDispersal(UserParams,PlagueRaster)
# plot(DensRaster)    # good in t=1, not so much in t=2
# plot(FreqList[["gene2"]])
###############
# ALLEE EFFECT: REMOVE POPULATIONS BELOW A MINIMUM ABUNDANCE THRESHOLD
###############
#PopArray <- doAllee()
#if(MINABUND>0) PopArray <- doAllee()   # don't need this! all low-dens individuals move out anyway...
# $
###############
# CLEAR excess individuals from cells (DD)
DensRaster <- doDDSurvival(UserParams,DensRaster)
# plot(DensRaster)
# plot(FreqList[["gene1"]])
##################
# PLAGUE PRESSURE
##################
PlagueRaster <- doPlague(UserParams,PlagueRaster=PlagueRaster,DensRaster=DensRaster)
# plot(PlagueRaster)
# # plot(PopArray)
#
#   plot(PopArray)    # okay
#   plot(reclassify(NextNormalSurvRaster,rcl=c(NA,NA,0)))   # okay in t=1,2
#   plot(NextNormalSurvRaster)
#   plot(reclassify(NextPlagueSurvRaster,rcl=c(NA,NA,0)))    # okay t=1,2
#
#   plot(newFociRaster)   # okay t=1
#
#   plot(PlagueRaster)
################
# MAKE PLOTS
width = 500
height= 500
# abundance figure
setwd(FIGS_DIR)
file = sprintf("AbundanceFig_year%s.tif",t)
tiff(file, width=width,height=height)
plot(patchRaster,col=gray(0.7),legend=F)
#col = colorRampPalette(c("red","red"))(1)
col = rgb(0,seq(0,1,length=10),0)
plot(reclassify(DensRaster,rcl=c(-Inf,5,NA)),add=T,legend=T)
#plot(reclassify(PlagueRaster,rcl=c(-Inf,0.01,NA)),col=rgb(1,0,0),add=T,alpha=0.5,legend=F)
#plot(reclassify(NextPlagueSurvRaster,rcl=c(-Inf,0.001,NA)),col=heat.colors(10),add=T,legend=T)
dev.off()
# evolution figure 1
setwd(FIGS_DIR)
file = sprintf("Gene1FreqFig_year%s.tif",t)
tiff(file, width=width,height=height)
plot(patchRaster,col=gray(0.7),legend=F)
#col = colorRampPalette(c("red","red"))(1)
col = rgb(0,seq(0,maxValue(FreqList[["gene1"]]),length=10),0)
plot(reclassify(FreqList[["gene1"]],rcl=c(-Inf,0.001,NA)),add=T,col=col,legend=T)
#plot(reclassify(PlagueRaster,rcl=c(-Inf,0.01,NA)),col=rgb(1,0,0),add=T,alpha=0.5,legend=F)
#plot(reclassify(NextPlagueSurvRaster,rcl=c(-Inf,0.001,NA)),col=heat.colors(10),add=T,legend=T)
dev.off()
# evolution figure 1
setwd(FIGS_DIR)
file = sprintf("Gene2FreqFig_year%s.tif",t)
tiff(file, width=width*1.5,height=height)
par(mfrow=c(1,2))
plot(patchRaster,col=gray(0.7),legend=F)
#col = colorRampPalette(c("red","red"))(1)
col = rgb(0,seq(0,maxValue(FreqList[["gene2"]]),length=10),0)
plot(reclassify(FreqList[["gene1"]],rcl=c(-Inf,0.001,NA)),add=T,col=col,legend=T)
plot(patchRaster,col=gray(0.7),legend=F)
#col = colorRampPalette(c("red","red"))(1)
col = rgb(0,seq(0,maxValue(FreqList[["gene2"]]),length=10),0)
plot(reclassify(FreqList[["gene2"]],rcl=c(-Inf,0.001,NA)),add=T,col=col,legend=T)
#plot(reclassify(PlagueRaster,rcl=c(-Inf,0.01,NA)),col=rgb(1,0,0),add=T,alpha=0.5,legend=F)
#plot(reclassify(NextPlagueSurvRaster,rcl=c(-Inf,0.001,NA)),col=heat.colors(10),add=T,legend=T)
dev.off()
# allgenes evolution figure
setwd(FIGS_DIR)
file = sprintf("AllGenesFreqFig_year%s.tif",t)
tiff(file, width=width,height=height)
plot(patchRaster,col=gray(0.7),legend=F)
#col = colorRampPalette(c("red","red"))(1)
col = rgb(0,seq(0,maxValue(FreqList[["gene2"]]),length=10),0)
plot(reclassify(FreqList[["gene2"]],rcl=c(-Inf,0.001,NA)),add=T,col=col,legend=T)
#plot(reclassify(PlagueRaster,rcl=c(-Inf,0.01,NA)),col=rgb(1,0,0),add=T,alpha=0.5,legend=F)
#plot(reclassify(NextPlagueSurvRaster,rcl=c(-Inf,0.001,NA)),col=heat.colors(10),add=T,legend=T)
dev.off()
# plague figure
setwd(FIGS_DIR)
file = sprintf("PlagueFig_year%s.tif",t)
tiff(file, width=width,height=height)
plot(patchRaster,col=gray(0.7),legend=F)
#col = colorRampPalette(c("red","red"))(1)
col = rgb(seq(0,maxValue(PlagueRaster),length=10),0,0)
plot(reclassify(PlagueRaster,rcl=c(-Inf,0.01,NA)),add=T,col=col,legend=T)
#plot(reclassify(PlagueRaster,rcl=c(-Inf,0.01,NA)),col=rgb(1,0,0),add=T,alpha=0.5,legend=F)
#plot(reclassify(NextPlagueSurvRaster,rcl=c(-Inf,0.001,NA)),col=heat.colors(10),add=T,legend=T)
dev.off()
#gray.colors(10)
# setwd(FIGS_DIR)
# date <- Sys.Date()
# for(i in rasterNames){
#   filename = sprintf("%s_time%s_%s.tif",i,t,date)
#   thisRaster <- eval(parse(text=i))
#   writeRaster(thisRaster,filename=filename,format='GTiff',overwrite=T)
# }
# test <- raster(filename)
# plot(test)
}
############
## CLEAR WORKSPACE
############
rm(list=ls())
############
## LOAD PACKAGES
############
library("raster")
library("secr")
library("igraph")
############
## SIMULATION CONTROLS
############
NYEARS <- 20
############
## SET BASE DIRECTORY
############
KEVIN_LAPTOP <- FALSE #  TRUE #
KEVIN_OFFICEPC <- TRUE # FALSE #
if(KEVIN_LAPTOP) BASE_DIR <- "C:\\Users\\Kevin\\Dropbox\\PlagueModeling\\ResistanceEvolution"
if(KEVIN_OFFICEPC) BASE_DIR <- "E:\\Dropbox\\PlagueModeling\\ResistanceEvolution"
if(KEVIN_LAPTOP) GIT_DIR <- "C:\\Users\\Kevin\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_OFFICEPC) GIT_DIR <- "E:\\GIT\\Plague_Resistance_Evolution"
############
## SET UP WORKSPACE (define global variables)
############
# RSCRIPT_DIR <- sprintf("%s\\Rscripts",GIT_DIR)
DATA_DIR <- sprintf("%s\\Data",BASE_DIR)
FIGS_DIR <- sprintf("%s\\RawFigs",BASE_DIR)
setwd(DATA_DIR)
#####################
# LOAD FUNCTIONS
#####################
setwd(GIT_DIR)
source("PlagueResistanceEvolution_FUNCTIONS.R")
############
## USER-DEFINED VARIABLES
############
UserParams <- DefineUserParams()
#####################
# INITIALIZE DISPERSAL   (for both plague and no plague... )
#####################
InitializeDispersal(UserParams)
########################
# INITIALIZE LANDSCAPE
########################
InitializeLandscape(solid=F)   # generate patchmaps etc.
plot(patchRaster)
plot(patchIDRaster)
########################
# GET PLAGUE MODEL
########################
PlagueModel <- GetPlagueModel()    # for now, use fake plague model- will be a statistical model
######################################
#########################
######  INITIALIZE THE SYSTEM!
#########################
########################
# INITIALIZE POPULATION
########################
InitDensRaster <- KRaster    # initialize abundance at carrying capacity
plot(InitDensRaster)
#######################
# INITIALIZE ALLELE FREQUENCIES / RESISTANCE FACTORS [keep for now- will be multiple genes in the model somehow]
#######################
# NOTE: Some regions are more likely to evolve faster because they have greater percentages of those genes that can confer resistance.
InitFreqList <- GetInitFreqs(UserParams)
plot(InitFreqList)
#####################
# INITIALIZE POPULATION
#####################
### Code block for pop starting from small loci
InitDensRaster2 <- reclassify(patchIDRaster,rcl=c(-Inf,Inf,0))    # for testing
ndx <- sample(which(!is.na(InitDensRaster2@data@values)),size=3)
InitDensRaster2[ndx] <- 1000   # initialize population in random locations
InitDensRaster <- InitDensRaster2
#PopArray2 <- InitDensRaster   # copy, for dispersal algorithm...
PopArray <- GetStructuredPop(InitDensRaster)
plot(PopArray)
######################
# INITIALIZE PLAGUE PROCESS   [KTS: moving away from this and towards a purely statistical model]
######################
#  for now, assume that plague hits at the patch level, and is a random process.
# PROB_PLAGUE_YEAR <- 0.5 # probability that a plague event hits (landscape level?)   # for now, plague only hits one patch in a plague year
#
# plagueyear = as.logical(rbinom(NYEARS,1,PROB_PLAGUE_YEAR))
#
# plagueNow = floor(runif(NYEARS,1,nPatches+1)) * as.numeric(plagueyear)    ## which patch plagues out?
PlagueRaster_template <- reclassify(patchIDRaster,rcl=c(-Inf,Inf,0))
PlagueRaster <- doPlague(UserParams,PlagueRaster=PlagueRaster_template, DensRaster=reclassify(patchIDRaster,rcl=c(-Inf,Inf,0)))
plot(PlagueRaster)
####################
# START LOOP THROUGH YEARS
####################
# names of important raster maps to save to file etc...
#rasterNames  <- c("PopArray","NextPlagueSurvRaster","NextNormalSurvRaster","PlagueResistancePotentialRaster")   # Deprecate?
# t=which(plagueyear)[1]
t=0
t=t+1
for(t in 1:(NYEARS)){
deviate <- rnorm(1)   #determine if this is a good year or a bad year (for now, survival and fecundity are perfectly correlated)
cv=UserParams$Popbio$CV_SURVIVAL   # set up for using the getYearVariate function
if(t==1){ FreqList=InitFreqList; DensRaster=InitDensRaster; newFociRaster <- reclassify(DensRaster,rcl=c(-Inf,Inf,0)) }    # initial conditions
##################
# DENSITY INDEPENDENT SURVIVAL (including plague survival)
##################
#PopArray <- GetStructuredPop(DensRaster)
DensRaster <- doSurvival(UserParams,DensRaster,PlagueRaster,FreqList)
# plot(DensRaster)
# plot(FreqList[["gene1"]])
################
# REPRODUCTION
################
DensRaster <- doReproduce(UserParams,DensRaster,PlagueRaster)    # TODO: make specific to each resistance type...?
# plot(DensRaster)
# plot(FreqList[["gene1"]])
###############
# DISPERSAL: Move individuals around the landscape (this takes a while!)
###############
DensRaster <- doDispersal(UserParams,PlagueRaster)
# plot(DensRaster)    # good in t=1, not so much in t=2
# plot(FreqList[["gene2"]])
###############
# ALLEE EFFECT: REMOVE POPULATIONS BELOW A MINIMUM ABUNDANCE THRESHOLD
###############
#PopArray <- doAllee()
#if(MINABUND>0) PopArray <- doAllee()   # don't need this! all low-dens individuals move out anyway...
# $
###############
# CLEAR excess individuals from cells (DD)
DensRaster <- doDDSurvival(UserParams,DensRaster)
# plot(DensRaster)
# plot(FreqList[["gene1"]])
##################
# PLAGUE PRESSURE
##################
PlagueRaster <- doPlague(UserParams,PlagueRaster=PlagueRaster,DensRaster=DensRaster)
# plot(PlagueRaster)
# # plot(PopArray)
#
#   plot(PopArray)    # okay
#   plot(reclassify(NextNormalSurvRaster,rcl=c(NA,NA,0)))   # okay in t=1,2
#   plot(NextNormalSurvRaster)
#   plot(reclassify(NextPlagueSurvRaster,rcl=c(NA,NA,0)))    # okay t=1,2
#
#   plot(newFociRaster)   # okay t=1
#
#   plot(PlagueRaster)
################
# MAKE PLOTS
width = 500
height= 500
# abundance figure
setwd(FIGS_DIR)
file = sprintf("AbundanceFig_year%s.tif",t)
tiff(file, width=width,height=height)
plot(patchRaster,col=gray(0.7),legend=F)
#col = colorRampPalette(c("red","red"))(1)
col = rgb(0,seq(0,1,length=10),0)
plot(reclassify(DensRaster,rcl=c(-Inf,5,NA)),add=T,legend=T)
#plot(reclassify(PlagueRaster,rcl=c(-Inf,0.01,NA)),col=rgb(1,0,0),add=T,alpha=0.5,legend=F)
#plot(reclassify(NextPlagueSurvRaster,rcl=c(-Inf,0.001,NA)),col=heat.colors(10),add=T,legend=T)
dev.off()
# evolution figure 1
setwd(FIGS_DIR)
file = sprintf("Gene1FreqFig_year%s.tif",t)
tiff(file, width=width,height=height)
plot(patchRaster,col=gray(0.7),legend=F)
#col = colorRampPalette(c("red","red"))(1)
col = rgb(0,seq(0,maxValue(FreqList[["gene1"]]),length=10),0)
plot(reclassify(FreqList[["gene1"]],rcl=c(-Inf,0.001,NA)),add=T,col=col,legend=T)
#plot(reclassify(PlagueRaster,rcl=c(-Inf,0.01,NA)),col=rgb(1,0,0),add=T,alpha=0.5,legend=F)
#plot(reclassify(NextPlagueSurvRaster,rcl=c(-Inf,0.001,NA)),col=heat.colors(10),add=T,legend=T)
dev.off()
# evolution figure 1
setwd(FIGS_DIR)
file = sprintf("AllGenesFreqFig_year%s.tif",t)
tiff(file, width=width*1.5,height=height)
par(mfrow=c(1,2))
plot(patchRaster,col=gray(0.7),legend=F,main="Gene 1")
#col = colorRampPalette(c("red","red"))(1)
col = rgb(0,seq(0,maxValue(FreqList[["gene1"]]),length=10),0)
plot(reclassify(FreqList[["gene1"]],rcl=c(-Inf,0.001,NA)),add=T,col=col,legend=T)
plot(patchRaster,col=gray(0.7),legend=F,main="Gene 2")
#col = colorRampPalette(c("red","red"))(1)
col = rgb(0,seq(0,maxValue(FreqList[["gene2"]]),length=10),0)
plot(reclassify(FreqList[["gene2"]],rcl=c(-Inf,0.001,NA)),add=T,col=col,legend=T)
#plot(reclassify(PlagueRaster,rcl=c(-Inf,0.01,NA)),col=rgb(1,0,0),add=T,alpha=0.5,legend=F)
#plot(reclassify(NextPlagueSurvRaster,rcl=c(-Inf,0.001,NA)),col=heat.colors(10),add=T,legend=T)
dev.off()
# allgenes evolution figure
setwd(FIGS_DIR)
file = sprintf("Gene2FreqFig_year%s.tif",t)
tiff(file, width=width,height=height)
plot(patchRaster,col=gray(0.7),legend=F)
#col = colorRampPalette(c("red","red"))(1)
col = rgb(0,seq(0,maxValue(FreqList[["gene2"]]),length=10),0)
plot(reclassify(FreqList[["gene2"]],rcl=c(-Inf,0.001,NA)),add=T,col=col,legend=T)
#plot(reclassify(PlagueRaster,rcl=c(-Inf,0.01,NA)),col=rgb(1,0,0),add=T,alpha=0.5,legend=F)
#plot(reclassify(NextPlagueSurvRaster,rcl=c(-Inf,0.001,NA)),col=heat.colors(10),add=T,legend=T)
dev.off()
# plague figure
setwd(FIGS_DIR)
file = sprintf("PlagueFig_year%s.tif",t)
tiff(file, width=width,height=height)
plot(patchRaster,col=gray(0.7),legend=F)
#col = colorRampPalette(c("red","red"))(1)
col = rgb(seq(0,maxValue(PlagueRaster),length=10),0,0)
plot(reclassify(PlagueRaster,rcl=c(-Inf,0.01,NA)),add=T,col=col,legend=T)
#plot(reclassify(PlagueRaster,rcl=c(-Inf,0.01,NA)),col=rgb(1,0,0),add=T,alpha=0.5,legend=F)
#plot(reclassify(NextPlagueSurvRaster,rcl=c(-Inf,0.001,NA)),col=heat.colors(10),add=T,legend=T)
dev.off()
#gray.colors(10)
# setwd(FIGS_DIR)
# date <- Sys.Date()
# for(i in rasterNames){
#   filename = sprintf("%s_time%s_%s.tif",i,t,date)
#   thisRaster <- eval(parse(text=i))
#   writeRaster(thisRaster,filename=filename,format='GTiff',overwrite=T)
# }
# test <- raster(filename)
# plot(test)
}
