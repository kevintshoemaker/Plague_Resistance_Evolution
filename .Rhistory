FactorList <- Gene2Factor(UserParams,FreqList)
temp <- overlay(FactorList,fun=fungen(UserParams$Genetics$NGENES)) #round(InitDensRaster*InitFreq[["gene1"]])   # freq of resist for each grid cell
ResistRaster <- overlay(DensRaster,temp,fun=function(x,y) x*y)      # numbers of resistant individuals in each grid cell
StrFreqRaster <- overlay(DensRaster,FreqList,fun=StrFreqFunc)
return(ResistRaster)
}
FCfunc <- function(ngenes){   # assume that fitness costs are simply additive
nargs <- ngenes
arguments <- paste("X",c(1:nargs),sep="")
arguments2 <- paste(arguments, collapse=",")
arguments3 <- paste(paste("FITNESS_COST[",c(1:ngenes),"]*",arguments,sep=""),collapse="+")
#FITNESS_COST[1]*X1 + FITNESS_COST[2]*X2
expression <- sprintf("function(%s) %s ",arguments2,arguments3)
eval(parse(text=expression))
}
FitnessCost <- function(FreqList=InitFreqList){
FCraster <- overlay(FreqList,fun=FCfunc(NGENES))  # degree of fitness cost
return(FCraster)
}
InitDensRaster2 <- reclassify(patchIDRaster,rcl=c(-Inf,Inf,0))    # for testing
ndx <- sample(which(!is.na(InitDensRaster2@data@values)),size=3)
InitDensRaster2[ndx] <- 1000   # initialize population in random locations
InitDensRaster <- InitDensRaster2
# use information on frequencies of resistance factors to struture population into resistance categories
GetStructuredPop <- function(DensRaster=InitDensRaster,FreqList=InitFreqList){
Pop <- list()
Pop[["resistant"]] <- IsResistant(DensRaster,FreqList)      # structure by susceptible and resistant.
Pop[["susceptible"]] <- DensRaster - Pop[["resistant"]]
Pop <- stack(Pop)
return(Pop)
}
PopArray <- GetStructuredPop(InitDensRaster)
InitDensRaster
InitFreqList
IsResistant
fungen=resistfunc
FactorList <- Gene2Factor(UserParams,FreqList)
temp <- overlay(FactorList,fun=fungen(UserParams$Genetics$NGENES)) #round(InitDensRaster*InitFreq[["gene1"]])   # freq of resist for each grid cell
ResistRaster <- overlay(DensRaster,temp,fun=function(x,y) x*y)      # numbers of resistant individuals in each grid cell
StrFreqRaster <- overlay(DensRaster,FreqList,fun=StrFreqFunc)
StrFreqFunc
StrFreqFunc(UserParams,DensRaster,ResistRaster,FreqList)
IsResistant <- function(DensRaster=InitDensRaster,FreqList=InitFreqList,fungen=resistfunc){
FactorList <- Gene2Factor(UserParams,FreqList)
temp <- overlay(FactorList,fun=fungen(UserParams$Genetics$NGENES)) #round(InitDensRaster*InitFreq[["gene1"]])   # freq of resist for each grid cell
ResistRaster <- overlay(DensRaster,temp,fun=function(x,y) x*y)      # numbers of resistant individuals in each grid cell
StrFreqFunc(UserParams,DensRaster,ResistRaster,FreqList) # returns "suslist" and "reslist"
return(ResistRaster)
}
InitDensRaster2 <- reclassify(patchIDRaster,rcl=c(-Inf,Inf,0))    # for testing
ndx <- sample(which(!is.na(InitDensRaster2@data@values)),size=3)
InitDensRaster2[ndx] <- 1000   # initialize population in random locations
InitDensRaster <- InitDensRaster2
PopArray <- GetStructuredPop(InitDensRaster)
plot(PopArray)
PlagueRaster_template <- reclassify(patchIDRaster,rcl=c(-Inf,Inf,0))
PlagueRaster <- doPlague(PlagueRaster=PlagueRaster_template, PopArray=reclassify(patchIDRaster,rcl=c(-Inf,Inf,0)))
doPlague <- function(UserParams,PlagueRaster=PlagueRaster,PopArray=PopArray){
nPlagueNeighbors <- focal(PlagueRaster, w=matrix(1, nc=UserParams$Dispersal$MAXDISPERSAL_CELLS, nr=UserParams$Dispersal$MAXDISPERSAL_CELLS),na.rm=T)
# plot(PlagueRaster)
# plot(nPlagueNeighbors)
newdf <- data.frame(
dens = PopArray@data@values,
plaguepops = nPlagueNeighbors@data@values
)
# newdf <- data.frame(
#   dens=0,
#   plaguepops=0
# )
prob <- plogis(as.numeric(predict(PlagueModel,newdata=newdf)))
ProbRaster <- setValues(PlagueRaster,values=prob)
ndx <- !is.na(prob)
prediction <- prob
prediction[ndx] <- rbinom(length(which(ndx)),1,prediction[ndx])
PlagueRaster <- setValues(PlagueRaster,values=prediction)   # set the plagueraster according to the statistical model
return(PlagueRaster)
}
PlagueRaster_template <- reclassify(patchIDRaster,rcl=c(-Inf,Inf,0))
PlagueRaster <- doPlague(UserParams,PlagueRaster=PlagueRaster_template, PopArray=reclassify(patchIDRaster,rcl=c(-Inf,Inf,0)))
plot(PlagueRaster)
plot(PlagueRaster)
PlagueRaster
plot(PlagueRaster)
graphics.off()
plot(PlagueRaster)
meansurv <- matrix(0,nrow=2,ncol=2)    # survival matrix (mean)
rownames(meansurv) <- c("resistant","susceptible")
colnames(meansurv) <- c("plague","noPlague")
meansurv["resistant","noPlague"] <- getSurvival("resistant","noPlague")
library("raster")
library("secr")
library("igraph")
KEVIN_LAPTOP <- FALSE #  TRUE #
KEVIN_OFFICEPC <- TRUE # FALSE #
if(KEVIN_LAPTOP) BASE_DIR <- "C:\\Users\\Kevin\\Dropbox\\PlagueModeling\\ResistanceEvolution"
if(KEVIN_OFFICEPC) BASE_DIR <- "E:\\Dropbox\\PlagueModeling\\ResistanceEvolution"
if(KEVIN_LAPTOP) GIT_DIR <- "C:\\Users\\Kevin\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_OFFICEPC) GIT_DIR <- "E:\\GIT\\Plague_Resistance_Evolution"
############
## SET UP WORKSPACE (define global variables)
############
# RSCRIPT_DIR <- sprintf("%s\\Rscripts",GIT_DIR)
DATA_DIR <- sprintf("%s\\Data",BASE_DIR)
FIGS_DIR <- sprintf("%s\\RawFigs",BASE_DIR)
setwd(DATA_DIR)
#####################
# LOAD FUNCTIONS
#####################
setwd(GIT_DIR)
plot(PlagueRaster)
t=0
t=t+1
deviate <- rnorm(1)   #determine if this is a good year or a bad year (for now, survival and fecundity are perfectly correlated)
cv=CV_SURVIVAL   # set up for using the getYearVariate function
cv
deviate <- rnorm(1)   #determine if this is a good year or a bad year (for now, survival and fecundity are perfectly correlated)
cv=CV_SURVIVAL   # set up for using the getYearVariate function
NYEARS
cv=UserParams$Popbio$CV_SURVIVAL   # set up for using the getYearVariate function
deviate <- rnorm(1)   #determine if this is a good year or a bad year (for now, survival and fecundity are perfectly correlated)
DensRaster <- InitDensRaster
DensRaster=InitDensRaster
PlagueRaster=PlagueRaster
FreqList
thisPop <- GetStructuredPop(DensRaster,FreqList)    # break out population into resistant and non-resistant
FitnessCost
FCRaster <- FitnessCost(FreqList=InitFreqList)      # compute fitness costs
FreqList
NGENES
FitnessCost <- function(FreqList=InitFreqList){
FCraster <- overlay(FreqList,fun=FCfunc(UserParams$Genetics$NGENES))  # degree of fitness cost
return(FCraster)
}
FCfunc <- function(ngenes){   # assume that fitness costs are simply additive
nargs <- ngenes
arguments <- paste("X",c(1:nargs),sep="")
arguments2 <- paste(arguments, collapse=",")
arguments3 <- paste(paste("FITNESS_COST[",c(1:ngenes),"]*",arguments,sep=""),collapse="+")
#FITNESS_COST[1]*X1 + FITNESS_COST[2]*X2
expression <- sprintf("function(%s) %s ",arguments2,arguments3)
eval(parse(text=expression))
}
FCRaster <- FitnessCost(FreqList=InitFreqList)      # compute fitness costs
ngenes=2
nargs <- ngenes
arguments <- paste("X",c(1:nargs),sep="")
arguments
arguments2
arguments3 <- paste(paste("FITNESS_COST[",c(1:ngenes),"]*",arguments,sep=""),collapse="+")
arguments3
arguments3 <- paste(paste("UserParams$Genetics$FITNESS_COST[",c(1:ngenes),"]*",arguments,sep=""),collapse="+")
arguments3
arguments3 <- paste(paste("UserParams$Genetics$FITNESS_COST[",c(1:ngenes),"]*",arguments,sep=""),collapse="+")
UserParams$Genetics$FITNESS_COST
arguments3 <- paste(paste("UserParams$Genetics$FITNESS_COST[",c(1:ngenes),"]*",arguments,sep=""),collapse="+")
arguments3
FCfunc <- function(ngenes){   # assume that fitness costs are simply additive
nargs <- ngenes
arguments <- paste("X",c(1:nargs),sep="")
arguments2 <- paste(arguments, collapse=",")
arguments3 <- paste(paste("UserParams$Genetics$FITNESS_COST[",c(1:ngenes),"]*",arguments,sep=""),collapse="+")
#FITNESS_COST[1]*X1 + FITNESS_COST[2]*X2
expression <- sprintf("function(%s) %s ",arguments2,arguments3)
eval(parse(text=expression))
}
FitnessCost <- function(FreqList=InitFreqList){
FCraster <- overlay(FreqList,fun=FCfunc(UserParams$Genetics$NGENES))  # degree of fitness cost
return(FCraster)
}
FCRaster <- FitnessCost(FreqList=InitFreqList)      # compute fitness costs
FCRaster
thisPop[[status]]
status="resistant"
thisPop[[status]]
PlagueRaster
survival=reclassify(patchRaster,rcl=c(-Inf,Inf,0))
list(2)
list(2,2)
UserParams$Popbio$BASELINE_PLAGUESURV_RESIST
UserParams$Popbio$BASELINE_MEANSURV
survival=reclassify(patchRaster,rcl=c(-Inf,Inf,0))
survival = reclassify(patchRaster,rcl=c(-Inf,Inf,UserParams$Popbio$BASELINE_MEANSURV))
survival
survival = UserParams$Popbio$BASELINE_MEANSURV - FCRaster*(UserParams$Popbio$BASELINE_MEANSURV*UserParams$Popbio$BASELINE_PLAGUESURV_RESIST-UserParams$Popbio$SURVMIN_PLAGUE)
survival
UserParams$Popbio$BASELINE_MEANSURV
getSurvival <- function(resistanceStatus="susceptible",plagueStatus="plague",FCRaster=FCRaster){
#survival=reclassify(patchRaster,rcl=c(-Inf,Inf,0))
if((plagueStatus=="noPlague")&(resistanceStatus=="susceptible")) survival = reclassify(patchRaster,rcl=c(-Inf,Inf,UserParams$Popbio$BASELINE_MEANSURV))
if((plagueStatus=="noPlague")&(resistanceStatus=="resistant")) survival = UserParams$Popbio$BASELINE_MEANSURV - FCRaster*(UserParams$Popbio$BASELINE_MEANSURV*UserParams$Popbio$BASELINE_PLAGUESURV_RESIST-UserParams$Popbio$SURVMIN_PLAGUE)
if((plagueStatus=="plague")&(resistanceStatus=="susceptible")) survival = survival=reclassify(patchRaster,rcl=c(-Inf,Inf,UserParams$Popbio$BASELINE_PLAGUESURV))
if((plagueStatus=="plague")&(resistanceStatus=="resistant")) survival = survival=reclassify(patchRaster,rcl=c(-Inf,Inf,UserParams$Popbio$BASELINE_MEANSURV*UserParams$Popbio$BASELINE_PLAGUESURV_RESIST))
return(survival)
}
surv <- list()
for(i in c("resistant","susceptible")){
surv[[i]] <-list()
for(j in c("plague","noPlague")){
surv[[i]][[j]] <- getSurvival(i,j)
}
}
i="resistant"
j="plague"
surv[[i]] <-list()
surv[[i]][[j]]
getSurvival(i,j)
surv[[i]][[j]] <- getSurvival(i,j)
i="susceptible"
surv[[i]] <-list()
surv[[i]][[j]] <- getSurvival(i,j)
j="noPlague"
surv[[i]][[j]] <- getSurvival(i,j)
i="resistant"
surv[[i]] <-list()
surv[[i]][[j]] <- getSurvival(i,j)
surv[[i]][[j]] <- getSurvival(i,j,FCRaster)
getSurvival <- function(resistanceStatus="susceptible",plagueStatus="plague",FCRaster=FCRaster){
#survival=reclassify(patchRaster,rcl=c(-Inf,Inf,0))
if((plagueStatus=="noPlague")&(resistanceStatus=="susceptible")) survival = reclassify(patchRaster,rcl=c(-Inf,Inf,UserParams$Popbio$BASELINE_MEANSURV))
if((plagueStatus=="noPlague")&(resistanceStatus=="resistant")) survival = UserParams$Popbio$BASELINE_MEANSURV - FCRaster*(UserParams$Popbio$BASELINE_MEANSURV*UserParams$Popbio$BASELINE_PLAGUESURV_RESIST-UserParams$Popbio$SURVMIN_PLAGUE)
if((plagueStatus=="plague")&(resistanceStatus=="susceptible")) survival = survival=reclassify(patchRaster,rcl=c(-Inf,Inf,UserParams$Popbio$BASELINE_PLAGUESURV))
if((plagueStatus=="plague")&(resistanceStatus=="resistant")) survival = survival=reclassify(patchRaster,rcl=c(-Inf,Inf,UserParams$Popbio$BASELINE_MEANSURV*UserParams$Popbio$BASELINE_PLAGUESURV_RESIST))
return(survival)
}
surv <- list()
for(i in c("resistant","susceptible")){
surv[[i]] <-list()
for(j in c("plague","noPlague")){
surv[[i]][[j]] <- getSurvival(i,j,FCRaster)
}
}
getSurvivalFunc <- function(resistanceStatus="susceptible",plagueStatus="plague",FCRaster=FCRaster){
#survival=reclassify(patchRaster,rcl=c(-Inf,Inf,0))
if((plagueStatus=="noPlague")&(resistanceStatus=="susceptible")) survival = reclassify(patchRaster,rcl=c(-Inf,Inf,UserParams$Popbio$BASELINE_MEANSURV))
if((plagueStatus=="noPlague")&(resistanceStatus=="resistant")) survival = UserParams$Popbio$BASELINE_MEANSURV - FCRaster*(UserParams$Popbio$BASELINE_MEANSURV*UserParams$Popbio$BASELINE_PLAGUESURV_RESIST-UserParams$Popbio$SURVMIN_PLAGUE)
if((plagueStatus=="plague")&(resistanceStatus=="susceptible")) survival = survival=reclassify(patchRaster,rcl=c(-Inf,Inf,UserParams$Popbio$BASELINE_PLAGUESURV))
if((plagueStatus=="plague")&(resistanceStatus=="resistant")) survival = survival=reclassify(patchRaster,rcl=c(-Inf,Inf,UserParams$Popbio$BASELINE_MEANSURV*UserParams$Popbio$BASELINE_PLAGUESURV_RESIST))
return(survival)
}
getMeanSurvival <- function(FCRaster=FCRaster){
meansurv <- list()
for(i in c("resistant","susceptible")){
meansurv[[i]] <-list()
for(j in c("plague","noPlague")){
meansurv[[i]][[j]] <- getSurvivalFunc(i,j,FCRaster)
}
}
return(meansurv)
}
meansurv <- getMeanSurvival(FCRaster)
meansurv
surv <- getMeanSurvival(FCRaster)
surv[["resistant"]],[["plague"]]
if(j=="noPlague")  surv[[i]][[j]] <- min(UserParams$Popbio$SURVMAX_NOPLAGUE,max(UserParams$Popbio$SURVMIN_NOPLAGUE,surv[[i]][[j]]))
surv[[i]][[j]]
surv[[i]][[j]] <- surv[[i]][[j]] + deviate*(surv[[i]][[j]]*cv)
min()
min(0.7,surv[[i]][[j]])
surv[[i]][[j]]
getSurvival <- function(deviate=deviate,cv=cv,FCRaster=FCRaster){
surv <- getMeanSurvival(FCRaster)
for(i in c("resistant","susceptible")){
for(j in c("plague","noPlague")){
surv[[i]][[j]] <- surv[[i]][[j]] + deviate*(surv[[i]][[j]]*cv)
if(j=="plague"){
surv[[i]][[j]][surv[[i]][[j]]>UserParams$Popbio$SURVMAX_PLAGUE] <- UserParams$Popbio$SURVMAX_PLAGUE
surv[[i]][[j]][surv[[i]][[j]]<UserParams$Popbio$SURVMIN_PLAGUE] <- UserParams$Popbio$SURVMIN_PLAGUE
}
if(j=="noPlague"){
surv[[i]][[j]][surv[[i]][[j]]>UserParams$Popbio$SURVMAX_NOPLAGUE] <- UserParams$Popbio$SURVMAX_NOPLAGUE
surv[[i]][[j]][surv[[i]][[j]]<UserParams$Popbio$SURVMIN_NOPLAGUE] <- UserParams$Popbio$SURVMIN_NOPLAGUE
}
}
}
return(surv)
}
thisPop <- GetStructuredPop(DensRaster,FreqList)    # break out population into resistant and non-resistant (and account for resistance factors)
FCRaster <- FitnessCost(FreqList=InitFreqList)      # compute fitness costs
surv <- getSurvival(deviate,cv,FCRaster)    # get survival for all possible combinations of resistance and plague
status="resistant"
status="resistant"
for(status in c("resistant","susceptible")){
thisPop[[status]][PlagueRaster==1] <- thisPop[[status]][PlagueRaster==1]*surv[[status]][["plague"]]
thisPop[[status]][PlagueRaster==0] <- thisPop[[status]][PlagueRaster==0]*surv[[status]][["noPlague"]]
}
surv[[status]][["plague"]]
surv[[status]][["noPlague"]]
status="resistant"
for(status in c("resistant","susceptible")){
thisPop[[status]][PlagueRaster==1] <- thisPop[[status]][PlagueRaster==1]*surv[[status]][["plague"]][PlagueRaster==1]
thisPop[[status]][PlagueRaster==0] <- thisPop[[status]][PlagueRaster==0]*surv[[status]][["noPlague"]][PlagueRaster==0]
}
for(status in c("resistant","susceptible")){
thisPop[[status]] <- calc(thisPop[[status]],fun=demographicStoch)
}
thisPop[[status]]
status
demographicStoch
thisPop <- GetStructuredPop(DensRaster,FreqList)    # break out population into resistant and non-resistant (and account for resistance factors)
FCRaster <- FitnessCost(FreqList=InitFreqList)      # compute fitness costs
surv <- getSurvival(deviate,cv,FCRaster)    # get survival for all possible combinations of resistance and plague
status="resistant"
for(status in c("resistant","susceptible")){
thisPop[[status]][PlagueRaster==1] <- thisPop[[status]][PlagueRaster==1]*surv[[status]][["plague"]][PlagueRaster==1]
thisPop[[status]][PlagueRaster==0] <- thisPop[[status]][PlagueRaster==0]*surv[[status]][["noPlague"]][PlagueRaster==0]
}
thisPop[[status]]
calc(thisPop[[status]],fun=demographicStoch)
thisPop[[status]] <- calc(thisPop[[status]],fun=demographicStoch)
thisPop[[status]]
thisPop[['resistant']]
for(status in c("resistant","susceptible")){
thisPop[[status]] <- calc(thisPop[[status]],fun=demographicStoch)
}
thisPop[['resistant']]
Dens <- reclassify(patchRaster,rcl=c(-Inf,Inf,0))
Dens <- overlay(PopArray,sum)
PopArray
?overlay
Dens <- overlay(PopArray,fun=sum)
Dens
names(FreqList)
name <- sprintf("gene%s",i)
suslist
PopArray
FreqList[[name]] <- suslist[[name]]*PopArray[["susceptible"]] + reslist[[name]]*PopArray[["resistant"]]
suslist[[name]]
name <- sprintf("gene%s",i)
name
i=1
name <- sprintf("gene%s",i)
name
FreqList[[name]] <- suslist[[name]]*PopArray[["susceptible"]] + reslist[[name]]*PopArray[["resistant"]]
for(i in 1:UserParams$Genetics$NGENES){
name <- sprintf("gene%s",i)
FreqList[[name]] <- suslist[[name]]*PopArray[["susceptible"]] + reslist[[name]]*PopArray[["resistant"]]
}
assign("FreqList",FreqList,envir=.GlobalEnv)
FreqList
Dens
Dens <- overlay(PopArray,fun=sum)    # get total population size
for(i in 1:UserParams$Genetics$NGENES){
name <- sprintf("gene%s",i)
FreqList[[name]] <- (suslist[[name]]*PopArray[["susceptible"]] + reslist[[name]]*PopArray[["resistant"]])/Dens
}
assign("FreqList",FreqList,envir=.GlobalEnv)
FreqList
GetUnstructuredPop <- function(PopArray=PopArray,FreqList=FreqList){
Dens <- overlay(PopArray,fun=sum)    # get total population size
for(i in 1:UserParams$Genetics$NGENES){
name <- sprintf("gene%s",i)
FreqList[[name]] <- (suslist[[name]]*PopArray[["susceptible"]] + reslist[[name]]*PopArray[["resistant"]])/Dens
}
assign("FreqList",FreqList,envir=.GlobalEnv)
return(Dens)
}
GetUnstructuredPop
DensRaster <- GetUnstructuredPop(thisPop)    # break out population into resistant and non-resistant (and account for genes/resistance factors)
DensRaster <- GetUnstructuredPop(thisPop,FreqList)    # break out population into resistant and non-resistant (and account for genes/resistance factors)
doSurvival <- function(UserParams, DensRaster=InitDensRaster,PlagueRaster=PlagueRaster,Freqlist=FreqList){   # PopArray=PopArray
#thisPop <- getValues(PopArray)
thisPop <- GetStructuredPop(DensRaster,FreqList)    # break out population into resistant and non-resistant (and account for resistance factors)
# structuredFreq <- GetStructuredFreqList(DensRaster,FreqList)  # break out resistance factors into resistant and non-resistant
FCRaster <- FitnessCost(FreqList=InitFreqList)      # compute fitness costs
surv <- getSurvival(deviate,cv,FCRaster)    # get survival for all possible combinations of resistance and plague
###########
#  PERFORM SURVIVAL
###########
status="resistant"
for(status in c("resistant","susceptible")){
thisPop[[status]][PlagueRaster==1] <- thisPop[[status]][PlagueRaster==1]*surv[[status]][["plague"]][PlagueRaster==1]
thisPop[[status]][PlagueRaster==0] <- thisPop[[status]][PlagueRaster==0]*surv[[status]][["noPlague"]][PlagueRaster==0]
}
##########
#  DEMOGRAPHIC STOCHASTICITY
##########
for(status in c("resistant","susceptible")){
thisPop[[status]] <- calc(thisPop[[status]],fun=demographicStoch)
}
##########
#  REVERT TO UNSTRUCTURED POPULATION
##########
DensRaster <- GetUnstructuredPop(thisPop,FreqList)    # break out population into resistant and non-resistant (and account for genes/resistance factors)
return(thisPop)
}
DensRaster <- InitDensRaster
t=0
t=t+1
deviate <- rnorm(1)   #determine if this is a good year or a bad year (for now, survival and fecundity are perfectly correlated)
cv=UserParams$Popbio$CV_SURVIVAL   # set up for using the getYearVariate function
PopArray <- GetStructuredPop(DensRaster)
PopArray <- doSurvival(UserParams,DensRaster,PlagueRaster=PlagueRaster,FreqList)
PopArray
DensRaster
DensRaster <- doSurvival(UserParams,DensRaster,PlagueRaster=PlagueRaster,FreqList)
DensRaster
doSurvival <- function(UserParams, DensRaster=InitDensRaster,PlagueRaster=PlagueRaster,Freqlist=FreqList){   # PopArray=PopArray
#thisPop <- getValues(PopArray)
thisPop <- GetStructuredPop(DensRaster,FreqList)    # break out population into resistant and non-resistant (and account for resistance factors)
# structuredFreq <- GetStructuredFreqList(DensRaster,FreqList)  # break out resistance factors into resistant and non-resistant
FCRaster <- FitnessCost(FreqList=InitFreqList)      # compute fitness costs
surv <- getSurvival(deviate,cv,FCRaster)    # get survival for all possible combinations of resistance and plague
###########
#  PERFORM SURVIVAL
###########
status="resistant"
for(status in c("resistant","susceptible")){
thisPop[[status]][PlagueRaster==1] <- thisPop[[status]][PlagueRaster==1]*surv[[status]][["plague"]][PlagueRaster==1]
thisPop[[status]][PlagueRaster==0] <- thisPop[[status]][PlagueRaster==0]*surv[[status]][["noPlague"]][PlagueRaster==0]
}
##########
#  DEMOGRAPHIC STOCHASTICITY
##########
for(status in c("resistant","susceptible")){
thisPop[[status]] <- calc(thisPop[[status]],fun=demographicStoch)
}
##########
#  REVERT TO UNSTRUCTURED POPULATION
##########
DensRaster <- GetUnstructuredPop(thisPop,FreqList)    # break out population into resistant and non-resistant (and account for genes/resistance factors)
return(DensRaster)
}
DensRaster <- doSurvival(UserParams,DensRaster,PlagueRaster=PlagueRaster,FreqList)
DensRaster <- InitDensRaster
t=0
t=t+1
deviate <- rnorm(1)   #determine if this is a good year or a bad year (for now, survival and fecundity are perfectly correlated)
cv=UserParams$Popbio$CV_SURVIVAL   # set up for using the getYearVariate function
UserParams
DensRaster
PlagueRaster
FreqList
thisPop <- GetStructuredPop(DensRaster,FreqList)    # break out population into resistant and non-resistant (and account for resistance factors)
FCRaster <- FitnessCost(FreqList=InitFreqList)      # compute fitness costs
surv <- getSurvival(deviate,cv,FCRaster)    # get survival for all possible combinations of resistance and plague
status="resistant"
for(status in c("resistant","susceptible")){
thisPop[[status]][PlagueRaster==1] <- thisPop[[status]][PlagueRaster==1]*surv[[status]][["plague"]][PlagueRaster==1]
thisPop[[status]][PlagueRaster==0] <- thisPop[[status]][PlagueRaster==0]*surv[[status]][["noPlague"]][PlagueRaster==0]
}
for(status in c("resistant","susceptible")){
thisPop[[status]] <- calc(thisPop[[status]],fun=demographicStoch)
}
DensRaster <- GetUnstructuredPop(thisPop,FreqList)    # break out population into resistant and non-resistant (and account for genes/resistance factors)
DensRaster
doSurvival <- function(UserParams, DensRaster=InitDensRaster,PlagueRaster=PlagueRaster,Freqlist=FreqList){   # PopArray=PopArray
#thisPop <- getValues(PopArray)
thisPop <- GetStructuredPop(DensRaster,FreqList)    # break out population into resistant and non-resistant (and account for resistance factors)
# structuredFreq <- GetStructuredFreqList(DensRaster,FreqList)  # break out resistance factors into resistant and non-resistant
FCRaster <- FitnessCost(FreqList=InitFreqList)      # compute fitness costs
surv <- getSurvival(deviate,cv,FCRaster)    # get survival for all possible combinations of resistance and plague
###########
#  PERFORM SURVIVAL
###########
status="resistant"
for(status in c("resistant","susceptible")){
thisPop[[status]][PlagueRaster==1] <- thisPop[[status]][PlagueRaster==1]*surv[[status]][["plague"]][PlagueRaster==1]
thisPop[[status]][PlagueRaster==0] <- thisPop[[status]][PlagueRaster==0]*surv[[status]][["noPlague"]][PlagueRaster==0]
}
##########
#  DEMOGRAPHIC STOCHASTICITY
##########
for(status in c("resistant","susceptible")){
thisPop[[status]] <- calc(thisPop[[status]],fun=demographicStoch)
}
##########
#  REVERT TO UNSTRUCTURED POPULATION
##########
NewDensRaster <- GetUnstructuredPop(thisPop,FreqList)    # break out population into resistant and non-resistant (and account for genes/resistance factors)
return(NewDensRaster)
}
DensRaster <- doSurvival(UserParams,DensRaster,PlagueRaster=PlagueRaster,FreqList)
plot(DensRaster)
thisFec <- UserParams$Popbio$BASELINE_MEANFEC + (UserParams$Popbio$CV_FECUNDITY*UserParams$Popbio$BASELINE_MEANFEC)*deviate
thisFec
deviate
thisFec <- max(0.1,thisFec)  # make sure fecundity is not zero
doReproduce <- function(UserParams,DensRaster,PlagueRaster=PlagueRaster){
thisPop <- DensRaster
#thisFec <- rnorm(1,BASELINE_MEANFEC,CV_FECUNDITY*BASELINE_MEANFEC)
thisFec <- UserParams$Popbio$BASELINE_MEANFEC + (UserParams$Popbio$CV_FECUNDITY*UserParams$Popbio$BASELINE_MEANFEC)*deviate
thisFec <- max(0.1,thisFec)  # make sure fecundity is not zero
#thisPop[(thisPop<MINABUND)] <- 0  # populations below the allee threshold cannot breed
thisPop[(PlagueRaster==0)&(thisPop>MINABUND)] <- thisPop[(PlagueRaster==0)&(thisPop>MINABUND)] + DensRaster[(PlagueRaster==0)&(thisPop>MINABUND)]*thisFec
thisPop[(PlagueRaster==1)&(thisPop>MINABUND)] <- thisPop[(PlagueRaster==1)&(thisPop>MINABUND)] + (DensRaster[(PlagueRaster==1)&(thisPop>MINABUND)]*thisFec)/2   # reduced fecundity under plague...
thisPop <- calc(thisPop,fun=demographicStoch)
# plot(thisPop)
return(thisPop)
}
PopArray <- doReproduce(UserParams,DensRaster,PlagueRaster = PlagueRaster)    # TODO: make specific to each resistance type...?
doReproduce <- function(UserParams,DensRaster,PlagueRaster=PlagueRaster){
thisPop <- DensRaster
#thisFec <- rnorm(1,BASELINE_MEANFEC,CV_FECUNDITY*BASELINE_MEANFEC)
thisFec <- UserParams$Popbio$BASELINE_MEANFEC + (UserParams$Popbio$CV_FECUNDITY*UserParams$Popbio$BASELINE_MEANFEC)*deviate
thisFec <- max(0.1,thisFec)  # make sure fecundity is not zero
#thisPop[(thisPop<MINABUND)] <- 0  # populations below the allee threshold cannot breed
thisPop[(PlagueRaster==0)&(thisPop>UserParams$Popbio$MINABUND)] <- thisPop[(PlagueRaster==0)&(thisPop>UserParams$Popbio$MINABUND)] + DensRaster[(PlagueRaster==0)&(thisPop>UserParams$Popbio$MINABUND)]*thisFec
thisPop[(PlagueRaster==1)&(thisPop>UserParams$Popbio$MINABUND)] <- thisPop[(PlagueRaster==1)&(thisPop>UserParams$Popbio$MINABUND)] + (DensRaster[(PlagueRaster==1)&(thisPop>UserParams$Popbio$MINABUND)]*thisFec)/2   # reduced fecundity under plague...
thisPop <- calc(thisPop,fun=demographicStoch)
# plot(thisPop)
return(thisPop)
}
PopArray <- doReproduce(UserParams,DensRaster,PlagueRaster = PlagueRaster)    # TODO: make specific to each resistance type...?
plot(PopArray)
DensRaster <- InitDensRaster
t=0
t=t+1
deviate <- rnorm(1)   #determine if this is a good year or a bad year (for now, survival and fecundity are perfectly correlated)
cv=UserParams$Popbio$CV_SURVIVAL   # set up for using the getYearVariate function
DensRaster <- doSurvival(UserParams,DensRaster,PlagueRaster=PlagueRaster,FreqList)
DensRaster <- doReproduce(UserParams,DensRaster,PlagueRaster = PlagueRaster)    # TODO: make specific to each resistance type...?
plot(DensRaster)
