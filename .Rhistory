# .packages = packagelist,
# .errorhandling=c("pass")
) %dopar% {
# #####################
# # LOAD FUNCTIONS
# #####################
#
# setwd(GIT_DIR)
# source("PlagueResistanceEvolution_FUNCTIONS.R")
#
############
## SET UP WORKSPACE AND LOAD PACKAGES
############
#SetUpWorkspace()
#num_cores <- detectCores() - 1   # for setting up cluster... leave one core free for windows background processes?
temp <- MakeWorker(NYEARS, masterDF, dirs)(i)  #DoSimulateResistance(rep=i)    # simulate for these params...
}     ## end parallel for loop
dirs
MakePlots(rep,t,BaseLandscape,DensRaster,PlagueRaster,FreqList)
tiff
rm(list=ls())
############
## SIMULATION CONTROLS
############
NYEARS <- 50    # 1980 to 2036
############
## SET GLOBAL VARS
############
KEVIN_LAPTOP <- FALSE #
KEVIN_OFFICEPC <- FALSE #  TRUE #
KEVIN_LAPTOP2 <- FALSE # TRUE #
MIRANDA <- TRUE
if(KEVIN_LAPTOP) GIT_DIR <- "C:\\Users\\Kevin\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_OFFICEPC) GIT_DIR <- "E:\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_LAPTOP2) GIT_DIR <- "C:\\Users\\KevinT_Kevin\\Documents\\GitHub\\Plague_Resistance_Evolution"
if(MIRANDA) GIT_DIR <- "C:\\Users\\kshoemaker\\Documents\\GitHub\\Plague_Resistance_Evolution"
#####################
# LOAD FUNCTIONS
#####################
setwd(GIT_DIR)
source("PlagueResistanceEvolution_FUNCTIONS.R")
############
## SET UP WORKSPACE AND LOAD PACKAGES
############
dirs <- SetUpDirectories()
rm(GIT_DIR)
num_cores <- parallel::detectCores() - 2   # for setting up cluster... leave one core free for windows background processes?
num_cores <- 6
############
## SAMPLE FROM LATIN HYPERCUBE
############
N_LHS_SAMPLES <- 300  # 200
masterDF <- MakeLHSSamples(add=FALSE)
rep=1
fake=T
dmat <- list()
dmat[[1]] <- matrix(c(1,0,0, 1,0,0), nrow=2,ncol=3,byrow = T)  # dominant
dmat[[2]] <- matrix(c(1,1,0, 1,0,0), nrow=2,ncol=3,byrow = T)  # gene 1 dominant
dmat[[3]] <- matrix(c(1,0,0, 1,1,0), nrow=2,ncol=3,byrow = T)  # gene 2 dominant
dmat[[4]] <- matrix(c(1,1,0, 1,1,0), nrow=2,ncol=3,byrow = T)  # recessive
UserParams <- DefineUserParams(PER_SUITABLE=masterDF$PER_SUITABLE[rep],SNUGGLE=masterDF$SNUGGLE[rep],NFOCI=1,MAXDISPERSAL=500,BASELINE_DISPERSAL=0.05,
MAXDISPERSAL_PLAGUE = 1000,PLAGUE_DISPERSAL=masterDF$PLAGUE_DISPERSAL[rep], MAXDENS = masterDF$MAXDENS[rep],
MINDENS = 15, BASELINE_MEANSURV = 0.6, BASELINE_PLAGUESURV=masterDF$BASELINE_PLAGUESURV[rep],
BASELINE_PLAGUESURV_RESIST=0.5,BASELINE_MEANFEC=masterDF$BASELINE_MEANFEC[rep],
FITNESS_COST=rep(masterDF$FITNESS_COST[rep],2),INITFREQ=rep(masterDF$INITFREQ[rep],2),DOMINANCE=dmat[[masterDF$DOMINANCE[rep]]])
InitList <- DoInitialization(UserParams,fake=fake)  #BaseLandscape
PlagueRaster <- InitList$PlagueRaster
YearsSincePlague <- InitList$YearsSincePlague
InitFreqList <- InitList$InitFreqList
InitDensRaster <- InitList$InitDensRaster
PlagueModel <- InitList$PlagueModel
DispList <- InitList$DispList
UserParams <- InitList$UserParams
BaseLandscape <- InitList$BaseLandscape
EnvCovs <- InitList$EnvCovs
ResultsList <- SetUpResults(NYEARS,UserParams)
t<-0
t<-t+1
deviate <- rnorm(1)   #determine if this is a good year or a bad year (for now, survival and fecundity are perfectly correlated)
cv=UserParams$Popbio$CV_SURVIVAL   # set up for using the getYearVariate function
#assign(x="cv",value=cv, envir = env)
if(t==1){
FreqList<-InitFreqList;
DensRaster<-InitDensRaster;
newFociRaster <- raster::reclassify(DensRaster,rcl=c(-Inf,Inf,0))     # initial conditions
# assign(x="FreqList",value=FreqList, envir = env)
# assign(x="DensRaster",value=DensRaster, envir = env)
# assign(x="newFociRaster",value=newFociRaster, envir = env)
}
##################
# DENSITY INDEPENDENT SURVIVAL (including plague survival)
##################
temp <- doSurvival(DensRaster,PlagueRaster,FreqList,UserParams,BaseLandscape,deviate,cv)  #env
DensRaster <- temp$NewDensRaster
FreqList <- temp$FreqList
#assign(x="DensRaster",value=DensRaster, envir = env)
#FreqList <- get("FreqList",envir=env) # get("UserParams",envir=env)
# plot(DensRaster)
# plot(FreqList[["gene1"]])
################
# REPRODUCTION
################
DensRaster <- doReproduce(UserParams,DensRaster,PlagueRaster,deviate)    # TODO: make specific to each resistance type...?
#assign(x="DensRaster",value=DensRaster, envir = env)
# plot(DensRaster)
# plot(FreqList[["gene1"]])
###############
# DISPERSAL: Move individuals around the landscape (this takes a while!)
###############
temp <- doDispersal(UserParams,DensRaster,PlagueRaster,newFociRaster,FreqList,BaseLandscape,DispList)
DensRaster <- temp$newPop
newFociRaster <- temp$newFociRaster
FreqList <- temp$newFreqList
#assign(x="DensRaster",value=DensRaster, envir = env)
# raster::plot(DensRaster)    # good in t=1, not so much in t=2
# raster::plot(FreqList[["gene2"]])
###############
# ALLEE EFFECT: REMOVE POPULATIONS BELOW A MINIMUM ABUNDANCE THRESHOLD
###############
#PopArray <- doAllee()
#if(MINABUND>0) PopArray <- doAllee()   # don't need this! all low-dens individuals move out anyway...
# $
###############
# CLEAR excess individuals from cells (DD)
DensRaster <- doDDSurvival(DensRaster,UserParams)
#assign(x="DensRaster",value=DensRaster, envir = env)
# raster::plot(DensRaster)
# plot(FreqList[["gene1"]])
##################
# PLAGUE PRESSURE
##################
YearsSincePlague <- YearsSincePlague + 1
PlagueRaster <- doPlague(PlagueRaster=PlagueRaster,YearsSincePlague=YearsSincePlague,DensRaster=DensRaster,UserParams,PlagueModel,EnvCovs,fake,timestep=t)
# raster::plot(PlagueRaster)
##################
# update the years since plague variable...
YearsSincePlague[PlagueRaster==1] <- 0
MakePlots(rep,t,BaseLandscape,DensRaster,PlagueRaster,FreqList)
ResultsList <- ComputeYearResults(ResultsList,DensRaster,FreqList,t)
MakeMovie(rep)
MakeMovie(rep)
rep
MakePlots(rep,t,BaseLandscape,DensRaster,PlagueRaster,FreqList)
ResultsList <- ComputeYearResults(ResultsList,DensRaster,FreqList,t)
MakeMovie(rep)
rm(list=ls())
############
## SIMULATION CONTROLS
############
NYEARS <- 50    # 1980 to 2036
############
## SET GLOBAL VARS
############
KEVIN_LAPTOP <- FALSE #
KEVIN_OFFICEPC <- FALSE #  TRUE #
KEVIN_LAPTOP2 <- FALSE # TRUE #
MIRANDA <- TRUE
if(KEVIN_LAPTOP) GIT_DIR <- "C:\\Users\\Kevin\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_OFFICEPC) GIT_DIR <- "E:\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_LAPTOP2) GIT_DIR <- "C:\\Users\\KevinT_Kevin\\Documents\\GitHub\\Plague_Resistance_Evolution"
if(MIRANDA) GIT_DIR <- "C:\\Users\\kshoemaker\\Documents\\GitHub\\Plague_Resistance_Evolution"
#####################
# LOAD FUNCTIONS
#####################
setwd(GIT_DIR)
source("PlagueResistanceEvolution_FUNCTIONS.R")
############
## SET UP WORKSPACE AND LOAD PACKAGES
############
dirs <- SetUpDirectories()
rm(GIT_DIR)
num_cores <- parallel::detectCores() - 2   # for setting up cluster... leave one core free for windows background processes?
num_cores <- 6
############
## SAMPLE FROM LATIN HYPERCUBE
############
N_LHS_SAMPLES <- 300  # 200
masterDF <- MakeLHSSamples(add=FALSE)
rep=1
fake=T
## note masterdf is written to data directory
# setwd(dirs$DATA_DIR)
# masterDF <- read.csv("masterDF_prelim2017-01-26.csv",header=T)
###########
##  START A PARALLEL FOR LOOP
###########
library(parallel)
library(doParallel)
cl <- parallel::makeCluster(num_cores,outfile="LOG.TXT")
doParallel::registerDoParallel(cl=cl)    # make the cluster
allsamples <- foreach(i = 1: nrow(masterDF)    # (300+1): nrow(masterDF)
# .export=objectlist,
# .packages = packagelist,
# .errorhandling=c("pass")
) %dopar% {
# #####################
# # LOAD FUNCTIONS
# #####################
#
# setwd(GIT_DIR)
# source("PlagueResistanceEvolution_FUNCTIONS.R")
#
############
## SET UP WORKSPACE AND LOAD PACKAGES
############
#SetUpWorkspace()
#num_cores <- detectCores() - 1   # for setting up cluster... leave one core free for windows background processes?
temp <- MakeWorker(NYEARS, masterDF, dirs)(i)  #DoSimulateResistance(rep=i)    # simulate for these params...
}     ## end parallel for loop
NYEARS
masterDF
dirs
i
i=1
MakeWorker(NYEARS, masterDF, dirs)(i)
rm(list=ls())
############
## SIMULATION CONTROLS
############
NYEARS <- 50    # 1980 to 2036
############
## SET GLOBAL VARS
############
KEVIN_LAPTOP <- FALSE #
KEVIN_OFFICEPC <- FALSE #  TRUE #
KEVIN_LAPTOP2 <- FALSE # TRUE #
MIRANDA <- TRUE
if(KEVIN_LAPTOP) GIT_DIR <- "C:\\Users\\Kevin\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_OFFICEPC) GIT_DIR <- "E:\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_LAPTOP2) GIT_DIR <- "C:\\Users\\KevinT_Kevin\\Documents\\GitHub\\Plague_Resistance_Evolution"
if(MIRANDA) GIT_DIR <- "C:\\Users\\kshoemaker\\Documents\\GitHub\\Plague_Resistance_Evolution"
#####################
# LOAD FUNCTIONS
#####################
setwd(GIT_DIR)
source("PlagueResistanceEvolution_FUNCTIONS.R")
############
## SET UP WORKSPACE AND LOAD PACKAGES
############
dirs <- SetUpDirectories()
rm(GIT_DIR)
num_cores <- parallel::detectCores() - 2   # for setting up cluster... leave one core free for windows background processes?
num_cores <- 6
############
## SAMPLE FROM LATIN HYPERCUBE
############
N_LHS_SAMPLES <- 300  # 200
masterDF <- MakeLHSSamples(add=FALSE)
rep=1
fake=T
library(parallel)
library(doParallel)
cl <- parallel::makeCluster(num_cores,outfile="LOG.TXT")
doParallel::registerDoParallel(cl=cl)    # make the cluster
allsamples <- foreach(i = 1: nrow(masterDF)    # (300+1): nrow(masterDF)
# .export=objectlist,
# .packages = packagelist,
# .errorhandling=c("pass")
) %dopar% {
# #####################
# # LOAD FUNCTIONS
# #####################
#
# setwd(GIT_DIR)
# source("PlagueResistanceEvolution_FUNCTIONS.R")
#
############
## SET UP WORKSPACE AND LOAD PACKAGES
############
#SetUpWorkspace()
#num_cores <- detectCores() - 1   # for setting up cluster... leave one core free for windows background processes?
temp <- MakeWorker(NYEARS, masterDF, dirs, fake)(i)  #DoSimulateResistance(rep=i)    # simulate for these params...
}     ## end parallel for loop
nrow(masterDF)
NYEARS <- 50    # 1980 to 2036
############
## SET GLOBAL VARS
############
KEVIN_LAPTOP <- FALSE #
KEVIN_OFFICEPC <- FALSE #  TRUE #
KEVIN_LAPTOP2 <- FALSE # TRUE #
MIRANDA <- TRUE
if(KEVIN_LAPTOP) GIT_DIR <- "C:\\Users\\Kevin\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_OFFICEPC) GIT_DIR <- "E:\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_LAPTOP2) GIT_DIR <- "C:\\Users\\KevinT_Kevin\\Documents\\GitHub\\Plague_Resistance_Evolution"
if(MIRANDA) GIT_DIR <- "C:\\Users\\kshoemaker\\Documents\\GitHub\\Plague_Resistance_Evolution"
#####################
# LOAD FUNCTIONS
#####################
setwd(GIT_DIR)
source("PlagueResistanceEvolution_FUNCTIONS.R")
############
## SET UP WORKSPACE AND LOAD PACKAGES
############
dirs <- SetUpDirectories()
rm(GIT_DIR)
num_cores <- parallel::detectCores() - 2   # for setting up cluster... leave one core free for windows background processes?
num_cores <- 6
############
## SAMPLE FROM LATIN HYPERCUBE
############
N_LHS_SAMPLES <- 700  # 200
masterDF <- MakeLHSSamples(add=FALSE)
rep=1
fake=T
## note masterdf is written to data directory
# setwd(dirs$DATA_DIR)
# masterDF <- read.csv("masterDF_prelim2017-01-26.csv",header=T)
###########
##  START A PARALLEL FOR LOOP
###########
library(parallel)
library(doParallel)
cl <- parallel::makeCluster(num_cores,outfile="LOG.TXT")
doParallel::registerDoParallel(cl=cl)    # make the cluster
nrow(masterDF)
dirs$DATA_DIR
setwd(dirs$DATA_DIR)
masterDF2 <- read.csv("masterDF_prelim2017-07-14.csv")
masterDF2
nrow(masterDF2)
masterDF <- masterDF2
rm(masterDF2)
N_LHS_SAMPLES <- 700  # 200
NYEARS <- 50    # 1980 to 2036
############
## SET GLOBAL VARS
############
KEVIN_LAPTOP <- FALSE #
KEVIN_OFFICEPC <- FALSE #  TRUE #
KEVIN_LAPTOP2 <- FALSE # TRUE #
MIRANDA <- TRUE
if(KEVIN_LAPTOP) GIT_DIR <- "C:\\Users\\Kevin\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_OFFICEPC) GIT_DIR <- "E:\\GIT\\Plague_Resistance_Evolution"
if(KEVIN_LAPTOP2) GIT_DIR <- "C:\\Users\\KevinT_Kevin\\Documents\\GitHub\\Plague_Resistance_Evolution"
if(MIRANDA) GIT_DIR <- "C:\\Users\\kshoemaker\\Documents\\GitHub\\Plague_Resistance_Evolution"
#####################
# LOAD FUNCTIONS
#####################
setwd(GIT_DIR)
source("PlagueResistanceEvolution_FUNCTIONS.R")
############
## SET UP WORKSPACE AND LOAD PACKAGES
############
dirs <- SetUpDirectories()
rm(GIT_DIR)
num_cores <- parallel::detectCores() - 2   # for setting up cluster... leave one core free for windows background processes?
num_cores <- 6
N_LHS_SAMPLES <- 700  # 200
masterDF
masterDF <- MakeLHSSamples(add=TRUE)    # add=FALSE
nrow(masterDF)
library(parallel)
library(doParallel)
cl <- parallel::makeCluster(num_cores,outfile="LOG.TXT")
doParallel::registerDoParallel(cl=cl)    # make the cluster
nrow(masterDF)
fake
allsamples <- foreach(i = 301: nrow(masterDF)    # (300+1): nrow(masterDF)
# .export=objectlist,
# .packages = packagelist,
# .errorhandling=c("pass")
) %dopar% {
# #####################
# # LOAD FUNCTIONS
# #####################
#
# setwd(GIT_DIR)
# source("PlagueResistanceEvolution_FUNCTIONS.R")
#
############
## SET UP WORKSPACE AND LOAD PACKAGES
############
#SetUpWorkspace()
#num_cores <- detectCores() - 1   # for setting up cluster... leave one core free for windows background processes?
temp <- MakeWorker(NYEARS, masterDF, dirs, fake)(i)  #DoSimulateResistance(rep=i)    # simulate for these params...
}     ## end parallel for loop
#MakeWorker(NYEARS, masterDF, dirs)(1)
###################
# CLOSE CLUSTER
###################
if(!is.null(cl)) {
parallel::stopCluster(cl)
cl <- c()
}
masterDF
2%%2
3%%2
4%%2
rep=2
MakeMovie(rep)
rep=4
MakeMovie(rep)
rep
dirs$MOVIE_DIR2
thisMOVIE_DIR <- sprintf("%s\\rep%04d",dirs$MOVIE_DIR2,rep)
thisMOVIE_DIR
is.na(file.info(thisMOVIE_DIR)[1,"isdir"])
if(is.na(file.info(thisMOVIE_DIR)[1,"isdir"])) dir.create(thisMOVIE_DIR)
thisFIGS_DIR <- sprintf("%s\\rep%04d",dirs$FIGS_DIR2,rep)
thisFIGS_DIR
setwd(thisFIGS_DIR)
fileyrs <- as.numeric(unlist(regmatches(list.files(), gregexpr("[[:digit:]]+", list.files()))))
fileyrs
fileyrs > NYEARS
notthissim <- fileyrs > NYEARS
toremove <- list.files()[notthissim]
toremove
any(notthissim)
if(any(notthissim)) file.remove(toremove)
cmd_abundmov <- paste0("ffmpeg -f image2 -framerate 2 -i AbundanceFig_year%03d.tif -s 500x500 ",
sprintf("%s\\AbundanceMovie.avi",thisMOVIE_DIR)," -y")
cmd_abundmov
cat(cmd_abundmov)
rep=2
MakeMovie(rep)
MakeMovie <- function(rep){
thisMOVIE_DIR <- sprintf("%s\\rep%04d",dirs$MOVIE_DIR2,rep)
if(is.na(file.info(thisMOVIE_DIR)[1,"isdir"])) dir.create(thisMOVIE_DIR)
thisFIGS_DIR <- sprintf("%s\\rep%04d",dirs$FIGS_DIR2,rep)
setwd(thisFIGS_DIR)
#### remove figures that are not part of this simulation?
fileyrs <- as.numeric(unlist(regmatches(list.files(), gregexpr("[[:digit:]]+", list.files()))))
notthissim <- fileyrs > NYEARS
toremove <- list.files()[notthissim]
if(any(notthissim)) file.remove(toremove)
## NOTE: need command line like this: ffmpeg -f image2 -framerate 2 -i AbundanceFig_year%03d.tif -s 500x500 test.avi -y
# MAKING THE REAL MOVIE HERE! USE IMAGE MAGICK AND FFMPEG SOFTWARE  (https://blogazonia.wordpress.com/2016/01/19/making-a-movie-with-r/)
# create the movie
cmd_abundmov <- paste0("ffmpeg -f image2 -framerate 2 -i AbundanceFig_year%03d.tif -s 500x500 ",
sprintf("%s\\AbundanceMovie.avi",thisMOVIE_DIR)," -y")
cmd_evolutionmov <- paste0("ffmpeg -f image2 -framerate 2 -i AllGenesFreqFig_year%03d.tif -s 800x500 ",
sprintf("%s\\EvolutionMovie.avi",thisMOVIE_DIR)," -y")
cmd_plaguemov <- paste0("ffmpeg -f image2 -framerate 2 -i PlagueFig_year%03d.tif -s 500x500 ",
sprintf("%s\\PlagueMovie.avi",thisMOVIE_DIR)," -y")
#sink(tempfile())
system(cmd_abundmov,ignore.stdout = T,ignore.stderr = T)
system(cmd_evolutionmov,ignore.stdout = T,ignore.stderr = T)
system(cmd_plaguemov,ignore.stdout = T,ignore.stderr = T)
#sink()
}  ### end function "MakeMovie"
thisMOVIE_DIR <- sprintf("%s\\rep%04d",dirs$MOVIE_DIR2,rep)
if(is.na(file.info(thisMOVIE_DIR)[1,"isdir"])) dir.create(thisMOVIE_DIR)
thisFIGS_DIR <- sprintf("%s\\rep%04d",dirs$FIGS_DIR2,rep)
setwd(thisFIGS_DIR)
fileyrs <- as.numeric(unlist(regmatches(list.files(), gregexpr("[[:digit:]]+", list.files()))))
notthissim <- fileyrs > NYEARS
toremove <- list.files()[notthissim]
if(any(notthissim)) file.remove(toremove)
rep
cmd_abundmov <- paste0("ffmpeg -f image2 -framerate 2 -i AbundanceFig_year%03d.tif -s 500x500 ",
sprintf("%s\\AbundanceMovie.avi",thisMOVIE_DIR)," -y")
cmd_evolutionmov <- paste0("ffmpeg -f image2 -framerate 2 -i AllGenesFreqFig_year%03d.tif -s 800x500 ",
sprintf("%s\\EvolutionMovie.avi",thisMOVIE_DIR)," -y")
cmd_plaguemov <- paste0("ffmpeg -f image2 -framerate 2 -i PlagueFig_year%03d.tif -s 500x500 ",
sprintf("%s\\PlagueMovie.avi",thisMOVIE_DIR)," -y")
system(cmd_abundmov,ignore.stdout = T,ignore.stderr = T)
cmd_abundmov
system(cmd_abundmov)
system("ffmpeg -f image2 -framerate 2 -i AbundanceFig_year%03d.tif -s 500x500 C:\\PlagueResistance\\Movies\\rep0002\\AbundanceMovie.avi -y")
system("ffmpeg")
system("c:")
?system
system2("c:")
Sys.which("wget")
Sys.which("ffmpeg")
Sys.which("cd")
Sys.which()
Sys.getenv("PATH")
system("dir")
Sys.which("wget")
Sys.getenv("PATH")
system(cmd_abundmov,ignore.stdout = T,ignore.stderr = T)
masterDF2 <- HarvestData(masterDF,dirs)
masterDF2$ISRES <- as.factor(masterDF2$ISRES)
masterDF2$ISEXT <- as.factor(masterDF2$ISEXT)
masterDF2$DOMINANCE <- as.factor(masterDF2$DOMINANCE)
df <- na.omit(masterDF2)
predictorNames <- c(  "% Habitat",       # nice readable names
"Conspecific attraction",
"Plague colony disruption",
"Maximum density per ha",
"Plague survival, susceptible",
"Mean fecundity",
"Fitness cost of resistance",
"Initial resistance allele freq.",
"Dominance of resistance factors"
)
pred.names=c(  "PER_SUITABLE",
"SNUGGLE",
"PLAGUE_DISPERSAL",
"MAXDENS",
"BASELINE_PLAGUESURV",
"BASELINE_MEANFEC",
"FITNESS_COST",
"INITFREQ",
"DOMINANCE"
)
cbind(pred.names,predictorNames)
response=  "ISEXT"   #  "ISRES"    #
response=  "ISEXT"   #  "ISRES"    #
response=  "ISRES"    #  "ISEXT"   #  "ISRES"    #
formula1 <- as.formula(paste(response,"~",paste(pred.names,collapse="+")))
formula1
source_github
source_github("https://raw.githubusercontent.com/kevintshoemaker/Random-Forest-Functions/master/","RF_Extensions.R")
res.tr <- ctree(formula=formula1, data=df, controls = ctree_control(mincriterion = 0.6,maxdepth = 3))
library(party)
install.packages("party")
install.packages("coin")
library(party)
library(party)
