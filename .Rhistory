t<-0
t<-t+1
deviate <- rnorm(1)   #determine if this is a good year or a bad year (for now, survival and fecundity are perfectly correlated)
cv=UserParams$Popbio$CV_SURVIVAL   # set up for using the getYearVariate function
if(t==1){
FreqList<-InitFreqList;
DensRaster<-InitDensRaster;
newFociRaster <- raster::reclassify(DensRaster,rcl=c(-Inf,Inf,0))     # initial conditions
# assign(x="FreqList",value=FreqList, envir = env)
# assign(x="DensRaster",value=DensRaster, envir = env)
# assign(x="newFociRaster",value=newFociRaster, envir = env)
}
##################
# DENSITY INDEPENDENT SURVIVAL (including plague survival)
##################
temp <- doSurvival(DensRaster,PlagueRaster,FreqList,UserParams,BaseLandscape,deviate,cv)  #env
Gene2Factor
newlist <- list()
gene=1
name = sprintf("gene%s",gene)
name2 = sprintf("Marker%s",gene)
name
names(FreqList)
GetInitFreqs <- function(UserParams,BaseLandscape){
InitFreqList <- list()
#UserParams$Genetics$INITFREQ
i=1
for(i in 1:UserParams$Genetics$NGENES){
genename <- as.numeric(gsub("Marker","",names(UserParams$Genetics$INITFREQ)[i]))
name <- sprintf("gene%s",genename)
temp <- rnorm(BaseLandscape$nPatches,UserParams$Genetics$INITFREQ[,i],UserParams$Genetics$INITFREQ_SD[1])
temp <- ifelse(temp<=0,0.01,temp)
temp <- ifelse(temp>=1,0.99,temp)
InitFreqList[[name]] <- raster::reclassify(BaseLandscape$patchIDRaster,rcl=cbind(c(1:BaseLandscape$nPatches),temp))
}
#plot(InitFreqList[["marker10"]])
InitFreqList <- raster::stack(InitFreqList)
#plot(InitFreqList)
return(InitFreqList)
}
InitList <- DoInitialization(UserParams,fake=fake)  #BaseLandscape
PlagueRaster <- InitList$PlagueRaster
YearsSincePlague <- InitList$YearsSincePlague
#PopArray <- InitList$PopArray
InitFreqList <- InitList$InitFreqList
InitDensRaster <- InitList$InitDensRaster
PlagueModel <- InitList$PlagueModel
DispList <- InitList$DispList
UserParams <- InitList$UserParams
BaseLandscape <- InitList$BaseLandscape
EnvCovs <- InitList$EnvCovs
ResultsList <- SetUpResults(NYEARS,UserParams)
# t=which(plagueyear)[1]
t<-0
t<-t+1
deviate <- rnorm(1)   #determine if this is a good year or a bad year (for now, survival and fecundity are perfectly correlated)
cv=UserParams$Popbio$CV_SURVIVAL   # set up for using the getYearVariate function
if(t==1){
FreqList<-InitFreqList;
DensRaster<-InitDensRaster;
newFociRaster <- raster::reclassify(DensRaster,rcl=c(-Inf,Inf,0))     # initial conditions
# assign(x="FreqList",value=FreqList, envir = env)
# assign(x="DensRaster",value=DensRaster, envir = env)
# assign(x="newFociRaster",value=newFociRaster, envir = env)
}
newlist <- list()
gene=1
names(FreqList)
genenames <- names(FreqList)
genenames <- names(FreqList)
newlist <- list()
gene=1
name = sprintf("gene%s",genenames[gene])
name
name = genenames[gene]  #sprintf("gene%s",genenames[gene])
name2 = sprintf("Marker%s",gene)
name2
name2 = gsub("gene","Marker",genenames[gene])  #sprintf("Marker%s",gene)
newlist[[name2]] =  FreqList[[name]]^2 * UserParams$Genetics$DOMINANCE[gene,1] +
(2*FreqList[[name]]*(1-FreqList[[name]])) * UserParams$Genetics$DOMINANCE[gene,2]
UserParams$Genetics$DOMINANCE
genenames <- names(FreqList)
newlist <- list()
gene=1
for(gene in 1:UserParams$Genetics$NGENES){   # first look at dominance
name = genenames[gene]  #sprintf("gene%s",genenames[gene])
name2 = gsub("gene","Marker",genenames[gene])  #sprintf("Marker%s",gene)
newlist[[name2]] =  FreqList[[name]]^2 * UserParams$Genetics$DOMINANCE[name2,1] +
(2*FreqList[[name]]*(1-FreqList[[name]])) * UserParams$Genetics$DOMINANCE[name2,2]
}
# then look at factors
newlist2 <- list()
factor=1
newlist2
# then look at factors
newlist2 <- list()
factor=1
# then look at factors
newlist2 <- list()
factor=1
name = sprintf("factor%s",factor)
name
genestomonitor <- UserParams$Genetics$RESISTANCE_SCENARIOS[[factor]]$loci
genestomonitor
detach(FreqList)
# then look at factors
newlist2 <- list()
factor=1
name = sprintf("factor%s",factor)
genestomonitor <- UserParams$Genetics$RESISTANCE_SCENARIOS[[factor]]$loci
name
genestomonitor
rules <- UserParams$Genetics$RESISTANCE_SCENARIOS[[factor]]$rules
rules
?do.call
list("(%s|%s|%s|%s|%s)")
as.list(rules_for_resistance[[1]]$loci)
rules_for_resistance[[1]]$rules <- do.call(sprintf,c(list("1-((1-%s)*(1-%s)*(1-%s)*(1-%s)*(1-%s))"),as.list(rules_for_resistance[[1]]$loci)))
rules_for_resistance[[1]]$rules
rules_for_resistance <- list()
rules_for_resistance[[1]] <- list()
rules_for_resistance[[1]]$loci <- paste("Marker",c(10,32,43,50,88),sep="")
rules_for_resistance[[1]]$rules <- do.call(sprintf,c(list("1-((1-%s)*(1-%s)*(1-%s)*(1-%s)*(1-%s))"),as.list(rules_for_resistance[[1]]$loci)))
rules_for_resistance[[2]] <- list()
rules_for_resistance[[2]]$loci <- paste("Marker",c(6,19,81,96,115,127),sep="")
rules_for_resistance[[2]] <- list()
rules_for_resistance[[2]]$loci <- paste("Marker",c(6,19,81,96,115,127),sep="")
rules_for_resistance[[2]]$rules <- do.call(sprintf,c(list("(%s)*(1-((1-%s)*(1-%s)*(1-%s)*(1-%s)*(1-%s)))"),as.list(rules_for_resistance[[2]]$loci)))
rules_for_resistance[[2]]$rules
rules_for_resistance[[3]] <- list()
rules_for_resistance[[3]]$loci <- paste("Marker",c(3,48,102,111),sep="")
rules_for_resistance <- list()
rules_for_resistance[[1]] <- list()
rules_for_resistance[[1]]$loci <- paste("Marker",c(10,32,43,50,88),sep="")
rules_for_resistance[[1]]$rules <- do.call(sprintf,c(list("1-((1-%s)*(1-%s)*(1-%s)*(1-%s)*(1-%s))"),as.list(rules_for_resistance[[1]]$loci)))
rules_for_resistance[[2]] <- list()
rules_for_resistance[[2]]$loci <- paste("Marker",c(6,19,81,96,115,127),sep="")
rules_for_resistance[[2]]$rules <- do.call(sprintf,c(list("(%s)*(1-((1-%s)*(1-%s)*(1-%s)*(1-%s)*(1-%s)))"),as.list(rules_for_resistance[[2]]$loci)))
rules_for_resistance[[3]] <- list()
rules_for_resistance[[3]]$loci <- paste("Marker",c(3,48,102,111),sep="")
rules_for_resistance[[3]]$rules <- do.call(sprintf,c(list("(%s*%s*%s*%s)"),as.list(rules_for_resistance[[3]]$loci)))
rules_for_resistance
InitList <- DoInitialization(UserParams,fake=fake)  #BaseLandscape
PlagueRaster <- InitList$PlagueRaster
YearsSincePlague <- InitList$YearsSincePlague
#PopArray <- InitList$PopArray
InitFreqList <- InitList$InitFreqList
InitDensRaster <- InitList$InitDensRaster
PlagueModel <- InitList$PlagueModel
DispList <- InitList$DispList
UserParams <- InitList$UserParams
BaseLandscape <- InitList$BaseLandscape
EnvCovs <- InitList$EnvCovs
ResultsList <- SetUpResults(NYEARS,UserParams)
# t=which(plagueyear)[1]
t<-0
t<-t+1
deviate <- rnorm(1)   #determine if this is a good year or a bad year (for now, survival and fecundity are perfectly correlated)
cv=UserParams$Popbio$CV_SURVIVAL   # set up for using the getYearVariate function
if(t==1){
FreqList<-InitFreqList;
DensRaster<-InitDensRaster;
newFociRaster <- raster::reclassify(DensRaster,rcl=c(-Inf,Inf,0))     # initial conditions
# assign(x="FreqList",value=FreqList, envir = env)
# assign(x="DensRaster",value=DensRaster, envir = env)
# assign(x="newFociRaster",value=newFociRaster, envir = env)
}
##################
# DENSITY INDEPENDENT SURVIVAL (including plague survival)
##################
temp <- doSurvival(DensRaster,PlagueRaster,FreqList,UserParams,BaseLandscape,deviate,cv)  #env
genenames <- names(FreqList)
newlist <- list()
gene=1
for(gene in 1:UserParams$Genetics$NGENES){   # first look at dominance
name = genenames[gene]  #sprintf("gene%s",genenames[gene])
name2 = gsub("gene","Marker",genenames[gene])  #sprintf("Marker%s",gene)
newlist[[name2]] =  FreqList[[name]]^2 * UserParams$Genetics$DOMINANCE[name2,1] +
(2*FreqList[[name]]*(1-FreqList[[name]])) * UserParams$Genetics$DOMINANCE[name2,2]
}
# then look at factors
newlist2 <- list()
factor=1
name = sprintf("factor%s",factor)
genestomonitor <- UserParams$Genetics$RESISTANCE_SCENARIOS[[factor]]$loci
rules <- UserParams$Genetics$RESISTANCE_SCENARIOS[[factor]]$rules
attach(FreqList)
FreqList
attach(newlist)
Marker10*Marker14
rules
eval(parse(test=rules))
eval(parse(text=rules))
# this function takes gene frequencies and converts to "factor" frequencies...
Gene2Factor <- function(UserParams,FreqList){  # FreqList
genenames <- names(FreqList)
newlist <- list()
gene=1
for(gene in 1:UserParams$Genetics$NGENES){   # first look at dominance
name = genenames[gene]  #sprintf("gene%s",genenames[gene])
name2 = gsub("gene","Marker",genenames[gene])  #sprintf("Marker%s",gene)
newlist[[name2]] =  FreqList[[name]]^2 * UserParams$Genetics$DOMINANCE[name2,1] +
(2*FreqList[[name]]*(1-FreqList[[name]])) * UserParams$Genetics$DOMINANCE[name2,2]
}
# then look at factors
newlist2 <- list()
factor=1
for(factor in 1:UserParams$Genetics$NWAYS_OF_GETTING){
name = sprintf("factor%s",factor)
genestomonitor <- UserParams$Genetics$RESISTANCE_SCENARIOS[[factor]]$loci
rules <- UserParams$Genetics$RESISTANCE_SCENARIOS[[factor]]$rules
newlist[[name]] <- with(newlist,eval(parse(text=rules)))        # use with and then run the analysis
}
newlist3 <- raster::stack(newlist2)
return(newlist2)
}
##################
# DENSITY INDEPENDENT SURVIVAL (including plague survival)
##################
temp <- doSurvival(DensRaster,PlagueRaster,FreqList,UserParams,BaseLandscape,deviate,cv)  #env
temp <- GetStructuredPop(DensRaster,FreqList,UserParams)    # break out population into resistant and non-resistant (and account for resistance factors)
Pop <- list()
temp <- IsResistant(DensRaster,FreqList,resistfunc,UserParams)      # structure by susceptible and resistant
IsResistant
FactorList <- Gene2Factor(UserParams,FreqList)  # FreqList
genenames <- names(FreqList)
newlist <- list()
gene=1
for(gene in 1:UserParams$Genetics$NGENES){   # first look at dominance
name = genenames[gene]  #sprintf("gene%s",genenames[gene])
name2 = gsub("gene","Marker",genenames[gene])  #sprintf("Marker%s",gene)
newlist[[name2]] =  FreqList[[name]]^2 * UserParams$Genetics$DOMINANCE[name2,1] +
(2*FreqList[[name]]*(1-FreqList[[name]])) * UserParams$Genetics$DOMINANCE[name2,2]
}
# then look at factors
newlist2 <- list()
factor=1
for(factor in 1:UserParams$Genetics$NWAYS_OF_GETTING){
name = sprintf("factor%s",factor)
genestomonitor <- UserParams$Genetics$RESISTANCE_SCENARIOS[[factor]]$loci
rules <- UserParams$Genetics$RESISTANCE_SCENARIOS[[factor]]$rules
newlist[[name]] <- with(newlist,eval(parse(text=rules)))        # use with and then run the analysis
}
# this function takes gene frequencies and converts to "factor" frequencies...
Gene2Factor <- function(UserParams,FreqList){  # FreqList
genenames <- names(FreqList)
newlist <- list()
gene=1
for(gene in 1:UserParams$Genetics$NGENES){   # first look at dominance
name = genenames[gene]  #sprintf("gene%s",genenames[gene])
name2 = gsub("gene","Marker",genenames[gene])  #sprintf("Marker%s",gene)
newlist[[name2]] =  FreqList[[name]]^2 * UserParams$Genetics$DOMINANCE[name2,1] +
(2*FreqList[[name]]*(1-FreqList[[name]])) * UserParams$Genetics$DOMINANCE[name2,2]
}
# then look at factors
newlist2 <- list()
factor=1
for(factor in 1:UserParams$Genetics$NWAYS_OF_GETTING){
name = sprintf("factor%s",factor)
genestomonitor <- UserParams$Genetics$RESISTANCE_SCENARIOS[[factor]]$loci
rules <- UserParams$Genetics$RESISTANCE_SCENARIOS[[factor]]$rules
newlist2[[name]] <- with(newlist,eval(parse(text=rules)))        # use with and then run the analysis
}
newlist3 <- raster::stack(newlist2)
return(newlist3)
}
FactorList <- Gene2Factor(UserParams,FreqList)  # FreqList
temp <- raster::overlay(FactorList,fun=fungen(UserParams$Genetics$NGENES)) #round(InitDensRaster*InitFreq[["gene1"]])   # freq of resist for each grid cell
fungen
nfacs=UserParams$Genetics$NWAYS_OF_GETTING
nargs <- ngenes
nargs <- nfacs
arguments <- paste("X",c(1:nargs),sep="")
arguments2 <- paste(arguments, collapse=",")
arguments3 <- paste(arguments, collapse="*")
expression <- sprintf("function(%s) %s ",arguments2,arguments3)
expression
nargs
arguments <- paste("X",c(1:nargs),sep="")
arguments2 <- paste(arguments, collapse=",")
arguments
arguments2 <- paste(arguments, collapse=",")
arguments3 <- paste(arguments, collapse="*")
as.list(arguments)
temp <- rep("(1-%s)",nfacs)
temp
temp2 <- paste(temp,collapse="*")
temp2
string <- sprintf("1-(%s)",temp2)
string
arguments4 <- do.call(sprintf,c(list(string),as.list(arguments)))
arguments4
expression <- sprintf("function(%s) %s ",arguments2,arguments3)
expression
expression <- sprintf("function(%s) %s ",arguments2,arguments4)
expression
resistfunc <- function(nfacs=UserParams$Genetics$NWAYS_OF_GETTING){      # this function assumes that all factors are needed for resistance
nargs <- nfacs
arguments <- paste("X",c(1:nargs),sep="")
arguments2 <- paste(arguments, collapse=",")
arguments3 <- paste(arguments, collapse="*")
temp <- rep("(1-%s)",nfacs)
temp2 <- paste(temp,collapse="*")
string <- sprintf("1-(%s)",temp2)
arguments4 <- do.call(sprintf,c(list(string),as.list(arguments)))
expression <- sprintf("function(%s) %s ",arguments2,arguments4)
eval(parse(text=expression))
}
FactorList <- Gene2Factor(UserParams,FreqList)  # FreqList
fungen=resistfunc
FactorList <- Gene2Factor(UserParams,FreqList)  # FreqList
temp <- raster::overlay(FactorList,fun=fungen(UserParams$Genetics$NGENES)) #round(InitDensRaster*InitFreq[["gene1"]])   # freq of resist for each grid cell
resistfunc(3)
resistfunc(3)(0.1,0.2,0.3)
?raster::overlay
resistfunc(3)(c(0.1,0.2,0.3),c(0.1,0.2,0.3),c(0.1,0.2,0.3))
temp <- raster::overlay(FactorList,fun=fungen(UserParams$Genetics$NWAYS_OF_GETTING)) #round(InitDensRaster*InitFreq[["gene1"]])   # freq of resist for each grid cell
FactorList <- Gene2Factor(UserParams,FreqList)  # FreqList
temp <- raster::overlay(FactorList,fun=fungen(UserParams$Genetics$NWAYS_OF_GETTING)) #round(InitDensRaster*InitFreq[["gene1"]])   # freq of resist for each grid cell
DensRaster
raster::plot(DensRaster)
ResistRaster <- raster::overlay(DensRaster,temp,fun=function(x,y) x*y)      # numbers of resistant individuals in each grid cell
temp <- StrFreqFunc(DensRaster,ResistRaster,FreqList,UserParams) # returns "suslist" and "reslist" to global env
reslist <- list()
suslist <- list()
#  temp <- DensRaster*F
gene=1
PerHet <- ((2/FreqList)-2)/(((2/FreqList)-2)+1)    # percent heterozygotes for dominant factors in resistant pool
DensRaster
ResistRaster
PerHet <- ((2/FreqList)-2)/(((2/FreqList)-2)+1)    # percent heterozygotes for dominant genes in resistant pool
#  temp <- DensRaster*F
gene=1
name = sprintf("gene%s",gene)
name
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
suslist
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
FreqList
GENETICS_DF
names(resistance_fingerprint)
DefineUserParams <- function(PER_SUITABLE=0.4,SNUGGLE=0.75,NFOCI=1,MAXDISPERSAL=500,BASELINE_DISPERSAL=0.05,
MAXDISPERSAL_PLAGUE = 1000,PLAGUE_DISPERSAL=0.95, MAXDENS = 100,
MINDENS = 15, BASELINE_MEANSURV = 0.6, BASELINE_PLAGUESURV=0.05,
BASELINE_PLAGUESURV_RESIST=0.5,BASELINE_MEANFEC=3.2,
FITNESS_COST=rnorm(ncol(resistance_fingerprint),masterDF$FITNESS_COST[rep],0.01),INITFREQ=c(0.09,0.1),DOMINANCE=dmat[[1]],GENETICS_DF=resistance_fingerprint,
RES_RULES=rules_for_resistance){
############
## DEFINE RANGE OF POSSIBLE SCENARIOS  [not implemented yet]
############
# Bg : "background"  - for looking at intermittent selection...
# BgDiseaseSpatialExtents <- c("gridcell","subpatch","patch","regional","landscape")
# BgDiseaseFrequencies <- c(1,2,3,5,10,20,30,40,50)
# ProbTransmissions <- seq(0,1,by=0.1)   # for now, no transmission
UserParams <- list()
#########
# defining the landscape
UserParams[["Landscape"]] <- list()
# define the gridded landscape
UserParams[["Landscape"]]$NROWS <- 50
UserParams[["Landscape"]]$NCOLS <- 50
UserParams[["Landscape"]]$CELLAREA_HA <- 1     # in hectares
UserParams[["Landscape"]]$CELLAREA_M2 <- UserParams[["Landscape"]]$CELLAREA_HA*10000   # in square meters
UserParams[["Landscape"]]$CELLWIDTH_M <- sqrt(UserParams[["Landscape"]]$CELLAREA_M2)    # in meters
UserParams[["Landscape"]]$HALFCELLWIDTH_M <- UserParams[["Landscape"]]$CELLWIDTH_M/2
# define the percent of the landscape that is suitable
UserParams[["Landscape"]]$PER_SUITABLE <- PER_SUITABLE
UserParams[["Landscape"]]$NPOPS <- nrow(GENETICS_DF)
#########
# defining the species biology:
UserParams[["Dispersal"]] <- list()
# dispersal params
# define the clustering (degree to which species prefers to establish residence near members of its own kind)
# 1 is complete tendency to cluster in space. 0 is agnostic to members of its own kind. -1 is tendency to avoid members of its own kind
UserParams[["Dispersal"]]$SNUGGLE <- SNUGGLE
# maximum annual dispersal distance (m)
UserParams[["Dispersal"]]$MAXDISPERSAL_M <- MAXDISPERSAL
# number of colony foci to establish (within the dispersal range) after colonies get below the low-density threshold
UserParams[["Dispersal"]]$NFOCI <- NFOCI
# rate of transmission (per-disperser probability of initiating an outbreak in recipient population) (under optimal plague conditions?)
#UserParams[["Dispersal"]]$PROB_TRANSMISSION <- 0  # [not implemented yet...] [maybe don't need...] [but critical if looking at tradeoffs]
# dispersal rate (independent of density)
UserParams[["Dispersal"]]$BASELINE_DISPERSAL <- BASELINE_DISPERSAL
# dispersal distance (m) for plagued-out populations
UserParams[["Dispersal"]]$MAXDISPERSAL_PLAGUE <-  MAXDISPERSAL_PLAGUE   # individuals from plagued-out populations might move farther than normal population
# dispersal rate for plagued-out populations
UserParams[["Dispersal"]]$PLAGUE_DISPERSAL <- PLAGUE_DISPERSAL     # individuals from plagued-out populations might have a higher tendency to move than normal populations- this can affect the spread of plague and the spread of plague resistance genes...
UserParams[["Popbio"]] <- list()
# define the maximum per-cell number of individuals
UserParams[["Popbio"]]$MAXDENS_HA <- MAXDENS
UserParams[["Popbio"]]$MAXABUND <- UserParams[["Popbio"]]$MAXDENS_HA *UserParams[["Landscape"]]$CELLAREA_HA
# define the minimum per-cell number of individuals (provide a simple hard Allee effect)
UserParams[["Popbio"]]$MINDENS_HA <- MINDENS
UserParams[["Popbio"]]$MINABUND <- UserParams[["Popbio"]]$MINDENS_HA*UserParams[["Landscape"]]$CELLAREA_HA
# maximum survival under plague (limit to resistance)
#   RESISTANCE_LIMIT <- 0.75   # deprecated
# baseline survival in a non_plague year (baseline survival for a naive population under no plague)
UserParams[["Popbio"]]$BASELINE_MEANSURV <- BASELINE_MEANSURV
# Variation in survival among years, expressed as CV
UserParams[["Popbio"]]$CV_SURVIVAL <- 0.2
# minimum survival under plague (completely naive population)
UserParams[["Popbio"]]$BASELINE_PLAGUESURV <- BASELINE_PLAGUESURV
# survival under plague for resistant individuals
UserParams[["Popbio"]]$BASELINE_PLAGUESURV_RESIST <- BASELINE_PLAGUESURV_RESIST
# minimum survival for non-plague populations
UserParams[["Popbio"]]$SURVMIN_NOPLAGUE <- 0.1
# maximum survival for non-plague populations
UserParams[["Popbio"]]$SURVMAX_NOPLAGUE <- 0.9
# minimum survival for plague populations
UserParams[["Popbio"]]$SURVMIN_PLAGUE <- 0.01
# maximum survival for plague populations (circumscribing env stochasticity at the population)
UserParams[["Popbio"]]$SURVMAX_PLAGUE <- 0.75
# fecundity in a non-plague year (baseline, number of offspring per adult, not sex structured)
UserParams[["Popbio"]]$BASELINE_MEANFEC <- BASELINE_MEANFEC
# temporal variation in fecundity, expressed as a CV
UserParams[["Popbio"]]$CV_FECUNDITY <- 0.5
# mean change in the ability to withstand plague among the survivor population. (accounts for limited heritability)
#SURVCHANGE_NEXTPLAGUE <- 0.05  # deprecated
# variation in the ability to survival plague among survivors, expressed as a SD [variation in standing genetic propensity to evolve resistance]
#SD_SURVCHANGE_NEXTPLAGUE <- 0.05    # deprecated
# plague survival rate as a function of the resistance factors?? [TODO]
# change in the ability to survive in a non-plague year, as a percentage of the fitness benefit in a plague year (fitness costs to resistance)
#FITNESS_COST <- 0.1    # now means the degree to which survival is reduced for resistant individuals in nonplague years
#########
# defining the species genetics:
UserParams[["Genetics"]] <- list()
UserParams[["Genetics"]]$NGENES <- ncol(GENETICS_DF)
UserParams[["Genetics"]]$NWAYS_OF_GETTING <- length(RES_RULES)   # ways of getting resistance
UserParams[["Genetics"]]$RESISTANCE_SCENARIOS <- RES_RULES
UserParams[["Genetics"]]$GENE_NAMES <- gsub("Marker","gene",names(GENETICS_DF))
#UserParams[["Genetics"]]$FITNESS_COST <- numeric(UserParams[["Genetics"]]$NGENES)
UserParams[["Genetics"]]$FITNESS_COST <- FITNESS_COST     # fitness cost
#UserParams[["Genetics"]]$INITFREQ <- matrix(0,nrow=UserParams[["Landscape"]]$NPOPS,ncol=UserParams[["Genetics"]]$NGENES)
UserParams[["Genetics"]]$INITFREQ <- GENETICS_DF
# UserParams[["Genetics"]]$INITFREQ[1] <- INITFREQ[1]  #0.09
# UserParams[["Genetics"]]$INITFREQ[2] <- INITFREQ[2] #  0.1
UserParams[["Genetics"]]$INITFREQ_SD <- 0.05     # degree of variation in initial frequency of resistance.
# temp <- matrix(0,nrow=UserParams[["Genetics"]]$NGENES,ncol=3)
# colnames(temp) <- c("2x(rr)","1x(rs)","0x(ss)")
UserParams[["Genetics"]]$DOMINANCE <- DOMINANCE
# UserParams[["Genetics"]]$DOMINANCE[1,] <- DOMINANCE[1,]   # dominant
# UserParams[["Genetics"]]$DOMINANCE[2,] <- DOMINANCE[2,]  # recessive
#
return(UserParams)
}
UserParams <- DefineUserParams(PER_SUITABLE=masterDF$PER_SUITABLE[rep],
SNUGGLE=masterDF$SNUGGLE[rep],
NFOCI=1,
MAXDISPERSAL=500,
BASELINE_DISPERSAL=0.05,
MAXDISPERSAL_PLAGUE = 1000,
PLAGUE_DISPERSAL=masterDF$PLAGUE_DISPERSAL[rep],
MAXDENS = masterDF$MAXDENS[rep],
MINDENS = 15,
BASELINE_MEANSURV = 0.6,
BASELINE_PLAGUESURV=masterDF$BASELINE_PLAGUESURV[rep],
BASELINE_PLAGUESURV_RESIST=0.5,
BASELINE_MEANFEC=masterDF$BASELINE_MEANFEC[rep],
FITNESS_COST=rnorm(ncol(resistance_fingerprint),masterDF$FITNESS_COST[rep],0.01),
INITFREQ=rep(masterDF$INITFREQ[rep],2),
DOMINANCE=dmat,    #  dmat[[masterDF$DOMINANCE[rep]]],
GENETICS_DF=resistance_fingerprint,
RES_RULES=rules_for_resistance)
InitList <- DoInitialization(UserParams,fake=fake)  #BaseLandscape
PlagueRaster <- InitList$PlagueRaster
YearsSincePlague <- InitList$YearsSincePlague
#PopArray <- InitList$PopArray
InitFreqList <- InitList$InitFreqList
InitDensRaster <- InitList$InitDensRaster
PlagueModel <- InitList$PlagueModel
DispList <- InitList$DispList
UserParams <- InitList$UserParams
BaseLandscape <- InitList$BaseLandscape
EnvCovs <- InitList$EnvCovs
ResultsList <- SetUpResults(NYEARS,UserParams)
# t=which(plagueyear)[1]
t<-0
t<-t+1
deviate <- rnorm(1)   #determine if this is a good year or a bad year (for now, survival and fecundity are perfectly correlated)
cv=UserParams$Popbio$CV_SURVIVAL   # set up for using the getYearVariate function
if(t==1){
FreqList<-InitFreqList;
DensRaster<-InitDensRaster;
newFociRaster <- raster::reclassify(DensRaster,rcl=c(-Inf,Inf,0))     # initial conditions
# assign(x="FreqList",value=FreqList, envir = env)
# assign(x="DensRaster",value=DensRaster, envir = env)
# assign(x="newFociRaster",value=newFociRaster, envir = env)
}
FactorList <- Gene2Factor(UserParams,FreqList)  # FreqList
temp <- raster::overlay(FactorList,fun=fungen(UserParams$Genetics$NWAYS_OF_GETTING)) #round(InitDensRaster*InitFreq[["gene1"]])   # freq of resist for each grid cell
ResistRaster <- raster::overlay(DensRaster,temp,fun=function(x,y) x*y)      # numbers of resistant individuals in each grid cell
reslist <- list()
suslist <- list()
#  temp <- DensRaster*F
PerHet <- ((2/FreqList)-2)/(((2/FreqList)-2)+1)    # percent heterozygotes for dominant genes in resistant pool
gene=1
name = UserParams$Genetics$GENE_NAMES[gene] #sprintf("gene%s",gene)
name
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
reslist[[name]] <- raster::reclassify(FreqList[[name]],rcl=c(-Inf,Inf,0))
ResistRaster
name = UserParams$Genetics$GENE_NAMES[gene] #sprintf("gene%s",gene)
suslist[[name]] <- 2*DensRaster*FreqList[[name]]  # total resistance alleles in the population
reslist[[name]] <- raster::reclassify(FreqList[[name]],rcl=c(-Inf,Inf,0))
ResistRaster
DensRaster
plot(ResistRaster)
raster::plot(ResistRaster)
UserParams$Genetics$DOMINANCE[gene,1]
UserParams$Genetics$DOMINANCE[gene,2]
dplyr::mutate_at()
?dplyr::mutate_at
